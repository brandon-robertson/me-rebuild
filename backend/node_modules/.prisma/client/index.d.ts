
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Player
 * 
 */
export type Player = $Result.DefaultSelection<Prisma.$PlayerPayload>
/**
 * Model Race
 * 
 */
export type Race = $Result.DefaultSelection<Prisma.$RacePayload>
/**
 * Model Rank
 * 
 */
export type Rank = $Result.DefaultSelection<Prisma.$RankPayload>
/**
 * Model System
 * 
 */
export type System = $Result.DefaultSelection<Prisma.$SystemPayload>
/**
 * Model Port
 * 
 */
export type Port = $Result.DefaultSelection<Prisma.$PortPayload>
/**
 * Model Good
 * 
 */
export type Good = $Result.DefaultSelection<Prisma.$GoodPayload>
/**
 * Model Ship
 * 
 */
export type Ship = $Result.DefaultSelection<Prisma.$ShipPayload>
/**
 * Model Weapon
 * 
 */
export type Weapon = $Result.DefaultSelection<Prisma.$WeaponPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.player`: Exposes CRUD operations for the **Player** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Players
    * const players = await prisma.player.findMany()
    * ```
    */
  get player(): Prisma.PlayerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.race`: Exposes CRUD operations for the **Race** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Races
    * const races = await prisma.race.findMany()
    * ```
    */
  get race(): Prisma.RaceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.rank`: Exposes CRUD operations for the **Rank** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ranks
    * const ranks = await prisma.rank.findMany()
    * ```
    */
  get rank(): Prisma.RankDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.system`: Exposes CRUD operations for the **System** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Systems
    * const systems = await prisma.system.findMany()
    * ```
    */
  get system(): Prisma.SystemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.port`: Exposes CRUD operations for the **Port** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ports
    * const ports = await prisma.port.findMany()
    * ```
    */
  get port(): Prisma.PortDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.good`: Exposes CRUD operations for the **Good** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Goods
    * const goods = await prisma.good.findMany()
    * ```
    */
  get good(): Prisma.GoodDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.ship`: Exposes CRUD operations for the **Ship** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ships
    * const ships = await prisma.ship.findMany()
    * ```
    */
  get ship(): Prisma.ShipDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.weapon`: Exposes CRUD operations for the **Weapon** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Weapons
    * const weapons = await prisma.weapon.findMany()
    * ```
    */
  get weapon(): Prisma.WeaponDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.12.0
   * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Player: 'Player',
    Race: 'Race',
    Rank: 'Rank',
    System: 'System',
    Port: 'Port',
    Good: 'Good',
    Ship: 'Ship',
    Weapon: 'Weapon'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "player" | "race" | "rank" | "system" | "port" | "good" | "ship" | "weapon"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Player: {
        payload: Prisma.$PlayerPayload<ExtArgs>
        fields: Prisma.PlayerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlayerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlayerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          findFirst: {
            args: Prisma.PlayerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlayerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          findMany: {
            args: Prisma.PlayerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>[]
          }
          create: {
            args: Prisma.PlayerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          createMany: {
            args: Prisma.PlayerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PlayerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>[]
          }
          delete: {
            args: Prisma.PlayerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          update: {
            args: Prisma.PlayerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          deleteMany: {
            args: Prisma.PlayerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlayerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PlayerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>[]
          }
          upsert: {
            args: Prisma.PlayerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          aggregate: {
            args: Prisma.PlayerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlayer>
          }
          groupBy: {
            args: Prisma.PlayerGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlayerGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlayerCountArgs<ExtArgs>
            result: $Utils.Optional<PlayerCountAggregateOutputType> | number
          }
        }
      }
      Race: {
        payload: Prisma.$RacePayload<ExtArgs>
        fields: Prisma.RaceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RaceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RacePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RaceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RacePayload>
          }
          findFirst: {
            args: Prisma.RaceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RacePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RaceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RacePayload>
          }
          findMany: {
            args: Prisma.RaceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RacePayload>[]
          }
          create: {
            args: Prisma.RaceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RacePayload>
          }
          createMany: {
            args: Prisma.RaceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RaceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RacePayload>[]
          }
          delete: {
            args: Prisma.RaceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RacePayload>
          }
          update: {
            args: Prisma.RaceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RacePayload>
          }
          deleteMany: {
            args: Prisma.RaceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RaceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RaceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RacePayload>[]
          }
          upsert: {
            args: Prisma.RaceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RacePayload>
          }
          aggregate: {
            args: Prisma.RaceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRace>
          }
          groupBy: {
            args: Prisma.RaceGroupByArgs<ExtArgs>
            result: $Utils.Optional<RaceGroupByOutputType>[]
          }
          count: {
            args: Prisma.RaceCountArgs<ExtArgs>
            result: $Utils.Optional<RaceCountAggregateOutputType> | number
          }
        }
      }
      Rank: {
        payload: Prisma.$RankPayload<ExtArgs>
        fields: Prisma.RankFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RankFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RankFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankPayload>
          }
          findFirst: {
            args: Prisma.RankFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RankFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankPayload>
          }
          findMany: {
            args: Prisma.RankFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankPayload>[]
          }
          create: {
            args: Prisma.RankCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankPayload>
          }
          createMany: {
            args: Prisma.RankCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RankCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankPayload>[]
          }
          delete: {
            args: Prisma.RankDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankPayload>
          }
          update: {
            args: Prisma.RankUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankPayload>
          }
          deleteMany: {
            args: Prisma.RankDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RankUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RankUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankPayload>[]
          }
          upsert: {
            args: Prisma.RankUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankPayload>
          }
          aggregate: {
            args: Prisma.RankAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRank>
          }
          groupBy: {
            args: Prisma.RankGroupByArgs<ExtArgs>
            result: $Utils.Optional<RankGroupByOutputType>[]
          }
          count: {
            args: Prisma.RankCountArgs<ExtArgs>
            result: $Utils.Optional<RankCountAggregateOutputType> | number
          }
        }
      }
      System: {
        payload: Prisma.$SystemPayload<ExtArgs>
        fields: Prisma.SystemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SystemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SystemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemPayload>
          }
          findFirst: {
            args: Prisma.SystemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SystemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemPayload>
          }
          findMany: {
            args: Prisma.SystemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemPayload>[]
          }
          create: {
            args: Prisma.SystemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemPayload>
          }
          createMany: {
            args: Prisma.SystemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SystemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemPayload>[]
          }
          delete: {
            args: Prisma.SystemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemPayload>
          }
          update: {
            args: Prisma.SystemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemPayload>
          }
          deleteMany: {
            args: Prisma.SystemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SystemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SystemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemPayload>[]
          }
          upsert: {
            args: Prisma.SystemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemPayload>
          }
          aggregate: {
            args: Prisma.SystemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSystem>
          }
          groupBy: {
            args: Prisma.SystemGroupByArgs<ExtArgs>
            result: $Utils.Optional<SystemGroupByOutputType>[]
          }
          count: {
            args: Prisma.SystemCountArgs<ExtArgs>
            result: $Utils.Optional<SystemCountAggregateOutputType> | number
          }
        }
      }
      Port: {
        payload: Prisma.$PortPayload<ExtArgs>
        fields: Prisma.PortFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PortFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PortPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PortFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PortPayload>
          }
          findFirst: {
            args: Prisma.PortFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PortPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PortFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PortPayload>
          }
          findMany: {
            args: Prisma.PortFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PortPayload>[]
          }
          create: {
            args: Prisma.PortCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PortPayload>
          }
          createMany: {
            args: Prisma.PortCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PortCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PortPayload>[]
          }
          delete: {
            args: Prisma.PortDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PortPayload>
          }
          update: {
            args: Prisma.PortUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PortPayload>
          }
          deleteMany: {
            args: Prisma.PortDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PortUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PortUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PortPayload>[]
          }
          upsert: {
            args: Prisma.PortUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PortPayload>
          }
          aggregate: {
            args: Prisma.PortAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePort>
          }
          groupBy: {
            args: Prisma.PortGroupByArgs<ExtArgs>
            result: $Utils.Optional<PortGroupByOutputType>[]
          }
          count: {
            args: Prisma.PortCountArgs<ExtArgs>
            result: $Utils.Optional<PortCountAggregateOutputType> | number
          }
        }
      }
      Good: {
        payload: Prisma.$GoodPayload<ExtArgs>
        fields: Prisma.GoodFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GoodFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoodPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GoodFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoodPayload>
          }
          findFirst: {
            args: Prisma.GoodFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoodPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GoodFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoodPayload>
          }
          findMany: {
            args: Prisma.GoodFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoodPayload>[]
          }
          create: {
            args: Prisma.GoodCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoodPayload>
          }
          createMany: {
            args: Prisma.GoodCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GoodCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoodPayload>[]
          }
          delete: {
            args: Prisma.GoodDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoodPayload>
          }
          update: {
            args: Prisma.GoodUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoodPayload>
          }
          deleteMany: {
            args: Prisma.GoodDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GoodUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GoodUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoodPayload>[]
          }
          upsert: {
            args: Prisma.GoodUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoodPayload>
          }
          aggregate: {
            args: Prisma.GoodAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGood>
          }
          groupBy: {
            args: Prisma.GoodGroupByArgs<ExtArgs>
            result: $Utils.Optional<GoodGroupByOutputType>[]
          }
          count: {
            args: Prisma.GoodCountArgs<ExtArgs>
            result: $Utils.Optional<GoodCountAggregateOutputType> | number
          }
        }
      }
      Ship: {
        payload: Prisma.$ShipPayload<ExtArgs>
        fields: Prisma.ShipFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ShipFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShipPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ShipFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShipPayload>
          }
          findFirst: {
            args: Prisma.ShipFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShipPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ShipFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShipPayload>
          }
          findMany: {
            args: Prisma.ShipFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShipPayload>[]
          }
          create: {
            args: Prisma.ShipCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShipPayload>
          }
          createMany: {
            args: Prisma.ShipCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ShipCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShipPayload>[]
          }
          delete: {
            args: Prisma.ShipDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShipPayload>
          }
          update: {
            args: Prisma.ShipUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShipPayload>
          }
          deleteMany: {
            args: Prisma.ShipDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ShipUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ShipUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShipPayload>[]
          }
          upsert: {
            args: Prisma.ShipUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShipPayload>
          }
          aggregate: {
            args: Prisma.ShipAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateShip>
          }
          groupBy: {
            args: Prisma.ShipGroupByArgs<ExtArgs>
            result: $Utils.Optional<ShipGroupByOutputType>[]
          }
          count: {
            args: Prisma.ShipCountArgs<ExtArgs>
            result: $Utils.Optional<ShipCountAggregateOutputType> | number
          }
        }
      }
      Weapon: {
        payload: Prisma.$WeaponPayload<ExtArgs>
        fields: Prisma.WeaponFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WeaponFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeaponPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WeaponFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeaponPayload>
          }
          findFirst: {
            args: Prisma.WeaponFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeaponPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WeaponFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeaponPayload>
          }
          findMany: {
            args: Prisma.WeaponFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeaponPayload>[]
          }
          create: {
            args: Prisma.WeaponCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeaponPayload>
          }
          createMany: {
            args: Prisma.WeaponCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WeaponCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeaponPayload>[]
          }
          delete: {
            args: Prisma.WeaponDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeaponPayload>
          }
          update: {
            args: Prisma.WeaponUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeaponPayload>
          }
          deleteMany: {
            args: Prisma.WeaponDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WeaponUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WeaponUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeaponPayload>[]
          }
          upsert: {
            args: Prisma.WeaponUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WeaponPayload>
          }
          aggregate: {
            args: Prisma.WeaponAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWeapon>
          }
          groupBy: {
            args: Prisma.WeaponGroupByArgs<ExtArgs>
            result: $Utils.Optional<WeaponGroupByOutputType>[]
          }
          count: {
            args: Prisma.WeaponCountArgs<ExtArgs>
            result: $Utils.Optional<WeaponCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    player?: PlayerOmit
    race?: RaceOmit
    rank?: RankOmit
    system?: SystemOmit
    port?: PortOmit
    good?: GoodOmit
    ship?: ShipOmit
    weapon?: WeaponOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    players: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    players?: boolean | UserCountOutputTypeCountPlayersArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPlayersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerWhereInput
  }


  /**
   * Count Type RaceCountOutputType
   */

  export type RaceCountOutputType = {
    ships: number
    weapons: number
    goods: number
  }

  export type RaceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ships?: boolean | RaceCountOutputTypeCountShipsArgs
    weapons?: boolean | RaceCountOutputTypeCountWeaponsArgs
    goods?: boolean | RaceCountOutputTypeCountGoodsArgs
  }

  // Custom InputTypes
  /**
   * RaceCountOutputType without action
   */
  export type RaceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RaceCountOutputType
     */
    select?: RaceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RaceCountOutputType without action
   */
  export type RaceCountOutputTypeCountShipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShipWhereInput
  }

  /**
   * RaceCountOutputType without action
   */
  export type RaceCountOutputTypeCountWeaponsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WeaponWhereInput
  }

  /**
   * RaceCountOutputType without action
   */
  export type RaceCountOutputTypeCountGoodsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GoodWhereInput
  }


  /**
   * Count Type RankCountOutputType
   */

  export type RankCountOutputType = {
    ships: number
  }

  export type RankCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ships?: boolean | RankCountOutputTypeCountShipsArgs
  }

  // Custom InputTypes
  /**
   * RankCountOutputType without action
   */
  export type RankCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankCountOutputType
     */
    select?: RankCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RankCountOutputType without action
   */
  export type RankCountOutputTypeCountShipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShipWhereInput
  }


  /**
   * Count Type SystemCountOutputType
   */

  export type SystemCountOutputType = {
    ports: number
    playersHere: number
  }

  export type SystemCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ports?: boolean | SystemCountOutputTypeCountPortsArgs
    playersHere?: boolean | SystemCountOutputTypeCountPlayersHereArgs
  }

  // Custom InputTypes
  /**
   * SystemCountOutputType without action
   */
  export type SystemCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemCountOutputType
     */
    select?: SystemCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SystemCountOutputType without action
   */
  export type SystemCountOutputTypeCountPortsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PortWhereInput
  }

  /**
   * SystemCountOutputType without action
   */
  export type SystemCountOutputTypeCountPlayersHereArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerWhereInput
  }


  /**
   * Count Type GoodCountOutputType
   */

  export type GoodCountOutputType = {
    weapons: number
    ammunitions: number
  }

  export type GoodCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    weapons?: boolean | GoodCountOutputTypeCountWeaponsArgs
    ammunitions?: boolean | GoodCountOutputTypeCountAmmunitionsArgs
  }

  // Custom InputTypes
  /**
   * GoodCountOutputType without action
   */
  export type GoodCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GoodCountOutputType
     */
    select?: GoodCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GoodCountOutputType without action
   */
  export type GoodCountOutputTypeCountWeaponsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WeaponWhereInput
  }

  /**
   * GoodCountOutputType without action
   */
  export type GoodCountOutputTypeCountAmmunitionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WeaponWhereInput
  }


  /**
   * Count Type ShipCountOutputType
   */

  export type ShipCountOutputType = {
    players: number
  }

  export type ShipCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    players?: boolean | ShipCountOutputTypeCountPlayersArgs
  }

  // Custom InputTypes
  /**
   * ShipCountOutputType without action
   */
  export type ShipCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShipCountOutputType
     */
    select?: ShipCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ShipCountOutputType without action
   */
  export type ShipCountOutputTypeCountPlayersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    username: string | null
    password: string | null
    admin: boolean | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    username: string | null
    password: string | null
    admin: boolean | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    password: number
    admin: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    password?: true
    admin?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    password?: true
    admin?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    password?: true
    admin?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    username: string
    password: string
    admin: boolean
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    admin?: boolean
    players?: boolean | User$playersArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    admin?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    admin?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    username?: boolean
    password?: boolean
    admin?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "password" | "admin", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    players?: boolean | User$playersArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      players: Prisma.$PlayerPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      username: string
      password: string
      admin: boolean
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    players<T extends User$playersArgs<ExtArgs> = {}>(args?: Subset<T, User$playersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly username: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly admin: FieldRef<"User", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.players
   */
  export type User$playersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    where?: PlayerWhereInput
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    cursor?: PlayerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlayerScalarFieldEnum | PlayerScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Player
   */

  export type AggregatePlayer = {
    _count: PlayerCountAggregateOutputType | null
    _avg: PlayerAvgAggregateOutputType | null
    _sum: PlayerSumAggregateOutputType | null
    _min: PlayerMinAggregateOutputType | null
    _max: PlayerMaxAggregateOutputType | null
  }

  export type PlayerAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    credits: number | null
    shipId: number | null
    currentSystemId: number | null
  }

  export type PlayerSumAggregateOutputType = {
    id: number | null
    userId: number | null
    credits: number | null
    shipId: number | null
    currentSystemId: number | null
  }

  export type PlayerMinAggregateOutputType = {
    id: number | null
    userId: number | null
    race: string | null
    credits: number | null
    shipId: number | null
    currentSystemId: number | null
  }

  export type PlayerMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    race: string | null
    credits: number | null
    shipId: number | null
    currentSystemId: number | null
  }

  export type PlayerCountAggregateOutputType = {
    id: number
    userId: number
    race: number
    credits: number
    shipId: number
    currentSystemId: number
    _all: number
  }


  export type PlayerAvgAggregateInputType = {
    id?: true
    userId?: true
    credits?: true
    shipId?: true
    currentSystemId?: true
  }

  export type PlayerSumAggregateInputType = {
    id?: true
    userId?: true
    credits?: true
    shipId?: true
    currentSystemId?: true
  }

  export type PlayerMinAggregateInputType = {
    id?: true
    userId?: true
    race?: true
    credits?: true
    shipId?: true
    currentSystemId?: true
  }

  export type PlayerMaxAggregateInputType = {
    id?: true
    userId?: true
    race?: true
    credits?: true
    shipId?: true
    currentSystemId?: true
  }

  export type PlayerCountAggregateInputType = {
    id?: true
    userId?: true
    race?: true
    credits?: true
    shipId?: true
    currentSystemId?: true
    _all?: true
  }

  export type PlayerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Player to aggregate.
     */
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     */
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Players
    **/
    _count?: true | PlayerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlayerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlayerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlayerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlayerMaxAggregateInputType
  }

  export type GetPlayerAggregateType<T extends PlayerAggregateArgs> = {
        [P in keyof T & keyof AggregatePlayer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlayer[P]>
      : GetScalarType<T[P], AggregatePlayer[P]>
  }




  export type PlayerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerWhereInput
    orderBy?: PlayerOrderByWithAggregationInput | PlayerOrderByWithAggregationInput[]
    by: PlayerScalarFieldEnum[] | PlayerScalarFieldEnum
    having?: PlayerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlayerCountAggregateInputType | true
    _avg?: PlayerAvgAggregateInputType
    _sum?: PlayerSumAggregateInputType
    _min?: PlayerMinAggregateInputType
    _max?: PlayerMaxAggregateInputType
  }

  export type PlayerGroupByOutputType = {
    id: number
    userId: number
    race: string
    credits: number
    shipId: number | null
    currentSystemId: number | null
    _count: PlayerCountAggregateOutputType | null
    _avg: PlayerAvgAggregateOutputType | null
    _sum: PlayerSumAggregateOutputType | null
    _min: PlayerMinAggregateOutputType | null
    _max: PlayerMaxAggregateOutputType | null
  }

  type GetPlayerGroupByPayload<T extends PlayerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlayerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlayerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlayerGroupByOutputType[P]>
            : GetScalarType<T[P], PlayerGroupByOutputType[P]>
        }
      >
    >


  export type PlayerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    race?: boolean
    credits?: boolean
    shipId?: boolean
    currentSystemId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    ship?: boolean | Player$shipArgs<ExtArgs>
    currentSystem?: boolean | Player$currentSystemArgs<ExtArgs>
  }, ExtArgs["result"]["player"]>

  export type PlayerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    race?: boolean
    credits?: boolean
    shipId?: boolean
    currentSystemId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    ship?: boolean | Player$shipArgs<ExtArgs>
    currentSystem?: boolean | Player$currentSystemArgs<ExtArgs>
  }, ExtArgs["result"]["player"]>

  export type PlayerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    race?: boolean
    credits?: boolean
    shipId?: boolean
    currentSystemId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    ship?: boolean | Player$shipArgs<ExtArgs>
    currentSystem?: boolean | Player$currentSystemArgs<ExtArgs>
  }, ExtArgs["result"]["player"]>

  export type PlayerSelectScalar = {
    id?: boolean
    userId?: boolean
    race?: boolean
    credits?: boolean
    shipId?: boolean
    currentSystemId?: boolean
  }

  export type PlayerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "race" | "credits" | "shipId" | "currentSystemId", ExtArgs["result"]["player"]>
  export type PlayerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    ship?: boolean | Player$shipArgs<ExtArgs>
    currentSystem?: boolean | Player$currentSystemArgs<ExtArgs>
  }
  export type PlayerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    ship?: boolean | Player$shipArgs<ExtArgs>
    currentSystem?: boolean | Player$currentSystemArgs<ExtArgs>
  }
  export type PlayerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    ship?: boolean | Player$shipArgs<ExtArgs>
    currentSystem?: boolean | Player$currentSystemArgs<ExtArgs>
  }

  export type $PlayerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Player"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      ship: Prisma.$ShipPayload<ExtArgs> | null
      currentSystem: Prisma.$SystemPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      race: string
      credits: number
      shipId: number | null
      currentSystemId: number | null
    }, ExtArgs["result"]["player"]>
    composites: {}
  }

  type PlayerGetPayload<S extends boolean | null | undefined | PlayerDefaultArgs> = $Result.GetResult<Prisma.$PlayerPayload, S>

  type PlayerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PlayerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PlayerCountAggregateInputType | true
    }

  export interface PlayerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Player'], meta: { name: 'Player' } }
    /**
     * Find zero or one Player that matches the filter.
     * @param {PlayerFindUniqueArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlayerFindUniqueArgs>(args: SelectSubset<T, PlayerFindUniqueArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Player that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PlayerFindUniqueOrThrowArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlayerFindUniqueOrThrowArgs>(args: SelectSubset<T, PlayerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Player that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerFindFirstArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlayerFindFirstArgs>(args?: SelectSubset<T, PlayerFindFirstArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Player that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerFindFirstOrThrowArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlayerFindFirstOrThrowArgs>(args?: SelectSubset<T, PlayerFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Players that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Players
     * const players = await prisma.player.findMany()
     * 
     * // Get first 10 Players
     * const players = await prisma.player.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const playerWithIdOnly = await prisma.player.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlayerFindManyArgs>(args?: SelectSubset<T, PlayerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Player.
     * @param {PlayerCreateArgs} args - Arguments to create a Player.
     * @example
     * // Create one Player
     * const Player = await prisma.player.create({
     *   data: {
     *     // ... data to create a Player
     *   }
     * })
     * 
     */
    create<T extends PlayerCreateArgs>(args: SelectSubset<T, PlayerCreateArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Players.
     * @param {PlayerCreateManyArgs} args - Arguments to create many Players.
     * @example
     * // Create many Players
     * const player = await prisma.player.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlayerCreateManyArgs>(args?: SelectSubset<T, PlayerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Players and returns the data saved in the database.
     * @param {PlayerCreateManyAndReturnArgs} args - Arguments to create many Players.
     * @example
     * // Create many Players
     * const player = await prisma.player.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Players and only return the `id`
     * const playerWithIdOnly = await prisma.player.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PlayerCreateManyAndReturnArgs>(args?: SelectSubset<T, PlayerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Player.
     * @param {PlayerDeleteArgs} args - Arguments to delete one Player.
     * @example
     * // Delete one Player
     * const Player = await prisma.player.delete({
     *   where: {
     *     // ... filter to delete one Player
     *   }
     * })
     * 
     */
    delete<T extends PlayerDeleteArgs>(args: SelectSubset<T, PlayerDeleteArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Player.
     * @param {PlayerUpdateArgs} args - Arguments to update one Player.
     * @example
     * // Update one Player
     * const player = await prisma.player.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlayerUpdateArgs>(args: SelectSubset<T, PlayerUpdateArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Players.
     * @param {PlayerDeleteManyArgs} args - Arguments to filter Players to delete.
     * @example
     * // Delete a few Players
     * const { count } = await prisma.player.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlayerDeleteManyArgs>(args?: SelectSubset<T, PlayerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Players.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Players
     * const player = await prisma.player.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlayerUpdateManyArgs>(args: SelectSubset<T, PlayerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Players and returns the data updated in the database.
     * @param {PlayerUpdateManyAndReturnArgs} args - Arguments to update many Players.
     * @example
     * // Update many Players
     * const player = await prisma.player.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Players and only return the `id`
     * const playerWithIdOnly = await prisma.player.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PlayerUpdateManyAndReturnArgs>(args: SelectSubset<T, PlayerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Player.
     * @param {PlayerUpsertArgs} args - Arguments to update or create a Player.
     * @example
     * // Update or create a Player
     * const player = await prisma.player.upsert({
     *   create: {
     *     // ... data to create a Player
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Player we want to update
     *   }
     * })
     */
    upsert<T extends PlayerUpsertArgs>(args: SelectSubset<T, PlayerUpsertArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Players.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerCountArgs} args - Arguments to filter Players to count.
     * @example
     * // Count the number of Players
     * const count = await prisma.player.count({
     *   where: {
     *     // ... the filter for the Players we want to count
     *   }
     * })
    **/
    count<T extends PlayerCountArgs>(
      args?: Subset<T, PlayerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlayerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Player.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlayerAggregateArgs>(args: Subset<T, PlayerAggregateArgs>): Prisma.PrismaPromise<GetPlayerAggregateType<T>>

    /**
     * Group by Player.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlayerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlayerGroupByArgs['orderBy'] }
        : { orderBy?: PlayerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlayerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlayerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Player model
   */
  readonly fields: PlayerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Player.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlayerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    ship<T extends Player$shipArgs<ExtArgs> = {}>(args?: Subset<T, Player$shipArgs<ExtArgs>>): Prisma__ShipClient<$Result.GetResult<Prisma.$ShipPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    currentSystem<T extends Player$currentSystemArgs<ExtArgs> = {}>(args?: Subset<T, Player$currentSystemArgs<ExtArgs>>): Prisma__SystemClient<$Result.GetResult<Prisma.$SystemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Player model
   */
  interface PlayerFieldRefs {
    readonly id: FieldRef<"Player", 'Int'>
    readonly userId: FieldRef<"Player", 'Int'>
    readonly race: FieldRef<"Player", 'String'>
    readonly credits: FieldRef<"Player", 'Int'>
    readonly shipId: FieldRef<"Player", 'Int'>
    readonly currentSystemId: FieldRef<"Player", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Player findUnique
   */
  export type PlayerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Player to fetch.
     */
    where: PlayerWhereUniqueInput
  }

  /**
   * Player findUniqueOrThrow
   */
  export type PlayerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Player to fetch.
     */
    where: PlayerWhereUniqueInput
  }

  /**
   * Player findFirst
   */
  export type PlayerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Player to fetch.
     */
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     */
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Players.
     */
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Players.
     */
    distinct?: PlayerScalarFieldEnum | PlayerScalarFieldEnum[]
  }

  /**
   * Player findFirstOrThrow
   */
  export type PlayerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Player to fetch.
     */
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     */
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Players.
     */
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Players.
     */
    distinct?: PlayerScalarFieldEnum | PlayerScalarFieldEnum[]
  }

  /**
   * Player findMany
   */
  export type PlayerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Players to fetch.
     */
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     */
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Players.
     */
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     */
    skip?: number
    distinct?: PlayerScalarFieldEnum | PlayerScalarFieldEnum[]
  }

  /**
   * Player create
   */
  export type PlayerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * The data needed to create a Player.
     */
    data: XOR<PlayerCreateInput, PlayerUncheckedCreateInput>
  }

  /**
   * Player createMany
   */
  export type PlayerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Players.
     */
    data: PlayerCreateManyInput | PlayerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Player createManyAndReturn
   */
  export type PlayerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * The data used to create many Players.
     */
    data: PlayerCreateManyInput | PlayerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Player update
   */
  export type PlayerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * The data needed to update a Player.
     */
    data: XOR<PlayerUpdateInput, PlayerUncheckedUpdateInput>
    /**
     * Choose, which Player to update.
     */
    where: PlayerWhereUniqueInput
  }

  /**
   * Player updateMany
   */
  export type PlayerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Players.
     */
    data: XOR<PlayerUpdateManyMutationInput, PlayerUncheckedUpdateManyInput>
    /**
     * Filter which Players to update
     */
    where?: PlayerWhereInput
    /**
     * Limit how many Players to update.
     */
    limit?: number
  }

  /**
   * Player updateManyAndReturn
   */
  export type PlayerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * The data used to update Players.
     */
    data: XOR<PlayerUpdateManyMutationInput, PlayerUncheckedUpdateManyInput>
    /**
     * Filter which Players to update
     */
    where?: PlayerWhereInput
    /**
     * Limit how many Players to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Player upsert
   */
  export type PlayerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * The filter to search for the Player to update in case it exists.
     */
    where: PlayerWhereUniqueInput
    /**
     * In case the Player found by the `where` argument doesn't exist, create a new Player with this data.
     */
    create: XOR<PlayerCreateInput, PlayerUncheckedCreateInput>
    /**
     * In case the Player was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlayerUpdateInput, PlayerUncheckedUpdateInput>
  }

  /**
   * Player delete
   */
  export type PlayerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter which Player to delete.
     */
    where: PlayerWhereUniqueInput
  }

  /**
   * Player deleteMany
   */
  export type PlayerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Players to delete
     */
    where?: PlayerWhereInput
    /**
     * Limit how many Players to delete.
     */
    limit?: number
  }

  /**
   * Player.ship
   */
  export type Player$shipArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ship
     */
    select?: ShipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ship
     */
    omit?: ShipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShipInclude<ExtArgs> | null
    where?: ShipWhereInput
  }

  /**
   * Player.currentSystem
   */
  export type Player$currentSystemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the System
     */
    select?: SystemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the System
     */
    omit?: SystemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemInclude<ExtArgs> | null
    where?: SystemWhereInput
  }

  /**
   * Player without action
   */
  export type PlayerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
  }


  /**
   * Model Race
   */

  export type AggregateRace = {
    _count: RaceCountAggregateOutputType | null
    _avg: RaceAvgAggregateOutputType | null
    _sum: RaceSumAggregateOutputType | null
    _min: RaceMinAggregateOutputType | null
    _max: RaceMaxAggregateOutputType | null
  }

  export type RaceAvgAggregateOutputType = {
    id: number | null
  }

  export type RaceSumAggregateOutputType = {
    id: number | null
  }

  export type RaceMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type RaceMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type RaceCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type RaceAvgAggregateInputType = {
    id?: true
  }

  export type RaceSumAggregateInputType = {
    id?: true
  }

  export type RaceMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type RaceMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type RaceCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type RaceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Race to aggregate.
     */
    where?: RaceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Races to fetch.
     */
    orderBy?: RaceOrderByWithRelationInput | RaceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RaceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Races from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Races.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Races
    **/
    _count?: true | RaceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RaceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RaceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RaceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RaceMaxAggregateInputType
  }

  export type GetRaceAggregateType<T extends RaceAggregateArgs> = {
        [P in keyof T & keyof AggregateRace]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRace[P]>
      : GetScalarType<T[P], AggregateRace[P]>
  }




  export type RaceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RaceWhereInput
    orderBy?: RaceOrderByWithAggregationInput | RaceOrderByWithAggregationInput[]
    by: RaceScalarFieldEnum[] | RaceScalarFieldEnum
    having?: RaceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RaceCountAggregateInputType | true
    _avg?: RaceAvgAggregateInputType
    _sum?: RaceSumAggregateInputType
    _min?: RaceMinAggregateInputType
    _max?: RaceMaxAggregateInputType
  }

  export type RaceGroupByOutputType = {
    id: number
    name: string
    _count: RaceCountAggregateOutputType | null
    _avg: RaceAvgAggregateOutputType | null
    _sum: RaceSumAggregateOutputType | null
    _min: RaceMinAggregateOutputType | null
    _max: RaceMaxAggregateOutputType | null
  }

  type GetRaceGroupByPayload<T extends RaceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RaceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RaceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RaceGroupByOutputType[P]>
            : GetScalarType<T[P], RaceGroupByOutputType[P]>
        }
      >
    >


  export type RaceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    ships?: boolean | Race$shipsArgs<ExtArgs>
    weapons?: boolean | Race$weaponsArgs<ExtArgs>
    goods?: boolean | Race$goodsArgs<ExtArgs>
    _count?: boolean | RaceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["race"]>

  export type RaceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["race"]>

  export type RaceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["race"]>

  export type RaceSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type RaceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["race"]>
  export type RaceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ships?: boolean | Race$shipsArgs<ExtArgs>
    weapons?: boolean | Race$weaponsArgs<ExtArgs>
    goods?: boolean | Race$goodsArgs<ExtArgs>
    _count?: boolean | RaceCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RaceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type RaceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $RacePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Race"
    objects: {
      ships: Prisma.$ShipPayload<ExtArgs>[]
      weapons: Prisma.$WeaponPayload<ExtArgs>[]
      goods: Prisma.$GoodPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["race"]>
    composites: {}
  }

  type RaceGetPayload<S extends boolean | null | undefined | RaceDefaultArgs> = $Result.GetResult<Prisma.$RacePayload, S>

  type RaceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RaceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RaceCountAggregateInputType | true
    }

  export interface RaceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Race'], meta: { name: 'Race' } }
    /**
     * Find zero or one Race that matches the filter.
     * @param {RaceFindUniqueArgs} args - Arguments to find a Race
     * @example
     * // Get one Race
     * const race = await prisma.race.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RaceFindUniqueArgs>(args: SelectSubset<T, RaceFindUniqueArgs<ExtArgs>>): Prisma__RaceClient<$Result.GetResult<Prisma.$RacePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Race that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RaceFindUniqueOrThrowArgs} args - Arguments to find a Race
     * @example
     * // Get one Race
     * const race = await prisma.race.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RaceFindUniqueOrThrowArgs>(args: SelectSubset<T, RaceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RaceClient<$Result.GetResult<Prisma.$RacePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Race that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RaceFindFirstArgs} args - Arguments to find a Race
     * @example
     * // Get one Race
     * const race = await prisma.race.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RaceFindFirstArgs>(args?: SelectSubset<T, RaceFindFirstArgs<ExtArgs>>): Prisma__RaceClient<$Result.GetResult<Prisma.$RacePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Race that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RaceFindFirstOrThrowArgs} args - Arguments to find a Race
     * @example
     * // Get one Race
     * const race = await prisma.race.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RaceFindFirstOrThrowArgs>(args?: SelectSubset<T, RaceFindFirstOrThrowArgs<ExtArgs>>): Prisma__RaceClient<$Result.GetResult<Prisma.$RacePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Races that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RaceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Races
     * const races = await prisma.race.findMany()
     * 
     * // Get first 10 Races
     * const races = await prisma.race.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const raceWithIdOnly = await prisma.race.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RaceFindManyArgs>(args?: SelectSubset<T, RaceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RacePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Race.
     * @param {RaceCreateArgs} args - Arguments to create a Race.
     * @example
     * // Create one Race
     * const Race = await prisma.race.create({
     *   data: {
     *     // ... data to create a Race
     *   }
     * })
     * 
     */
    create<T extends RaceCreateArgs>(args: SelectSubset<T, RaceCreateArgs<ExtArgs>>): Prisma__RaceClient<$Result.GetResult<Prisma.$RacePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Races.
     * @param {RaceCreateManyArgs} args - Arguments to create many Races.
     * @example
     * // Create many Races
     * const race = await prisma.race.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RaceCreateManyArgs>(args?: SelectSubset<T, RaceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Races and returns the data saved in the database.
     * @param {RaceCreateManyAndReturnArgs} args - Arguments to create many Races.
     * @example
     * // Create many Races
     * const race = await prisma.race.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Races and only return the `id`
     * const raceWithIdOnly = await prisma.race.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RaceCreateManyAndReturnArgs>(args?: SelectSubset<T, RaceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RacePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Race.
     * @param {RaceDeleteArgs} args - Arguments to delete one Race.
     * @example
     * // Delete one Race
     * const Race = await prisma.race.delete({
     *   where: {
     *     // ... filter to delete one Race
     *   }
     * })
     * 
     */
    delete<T extends RaceDeleteArgs>(args: SelectSubset<T, RaceDeleteArgs<ExtArgs>>): Prisma__RaceClient<$Result.GetResult<Prisma.$RacePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Race.
     * @param {RaceUpdateArgs} args - Arguments to update one Race.
     * @example
     * // Update one Race
     * const race = await prisma.race.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RaceUpdateArgs>(args: SelectSubset<T, RaceUpdateArgs<ExtArgs>>): Prisma__RaceClient<$Result.GetResult<Prisma.$RacePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Races.
     * @param {RaceDeleteManyArgs} args - Arguments to filter Races to delete.
     * @example
     * // Delete a few Races
     * const { count } = await prisma.race.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RaceDeleteManyArgs>(args?: SelectSubset<T, RaceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Races.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RaceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Races
     * const race = await prisma.race.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RaceUpdateManyArgs>(args: SelectSubset<T, RaceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Races and returns the data updated in the database.
     * @param {RaceUpdateManyAndReturnArgs} args - Arguments to update many Races.
     * @example
     * // Update many Races
     * const race = await prisma.race.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Races and only return the `id`
     * const raceWithIdOnly = await prisma.race.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RaceUpdateManyAndReturnArgs>(args: SelectSubset<T, RaceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RacePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Race.
     * @param {RaceUpsertArgs} args - Arguments to update or create a Race.
     * @example
     * // Update or create a Race
     * const race = await prisma.race.upsert({
     *   create: {
     *     // ... data to create a Race
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Race we want to update
     *   }
     * })
     */
    upsert<T extends RaceUpsertArgs>(args: SelectSubset<T, RaceUpsertArgs<ExtArgs>>): Prisma__RaceClient<$Result.GetResult<Prisma.$RacePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Races.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RaceCountArgs} args - Arguments to filter Races to count.
     * @example
     * // Count the number of Races
     * const count = await prisma.race.count({
     *   where: {
     *     // ... the filter for the Races we want to count
     *   }
     * })
    **/
    count<T extends RaceCountArgs>(
      args?: Subset<T, RaceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RaceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Race.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RaceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RaceAggregateArgs>(args: Subset<T, RaceAggregateArgs>): Prisma.PrismaPromise<GetRaceAggregateType<T>>

    /**
     * Group by Race.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RaceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RaceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RaceGroupByArgs['orderBy'] }
        : { orderBy?: RaceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RaceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRaceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Race model
   */
  readonly fields: RaceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Race.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RaceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ships<T extends Race$shipsArgs<ExtArgs> = {}>(args?: Subset<T, Race$shipsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShipPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    weapons<T extends Race$weaponsArgs<ExtArgs> = {}>(args?: Subset<T, Race$weaponsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WeaponPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    goods<T extends Race$goodsArgs<ExtArgs> = {}>(args?: Subset<T, Race$goodsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoodPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Race model
   */
  interface RaceFieldRefs {
    readonly id: FieldRef<"Race", 'Int'>
    readonly name: FieldRef<"Race", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Race findUnique
   */
  export type RaceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Race
     */
    select?: RaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Race
     */
    omit?: RaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RaceInclude<ExtArgs> | null
    /**
     * Filter, which Race to fetch.
     */
    where: RaceWhereUniqueInput
  }

  /**
   * Race findUniqueOrThrow
   */
  export type RaceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Race
     */
    select?: RaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Race
     */
    omit?: RaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RaceInclude<ExtArgs> | null
    /**
     * Filter, which Race to fetch.
     */
    where: RaceWhereUniqueInput
  }

  /**
   * Race findFirst
   */
  export type RaceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Race
     */
    select?: RaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Race
     */
    omit?: RaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RaceInclude<ExtArgs> | null
    /**
     * Filter, which Race to fetch.
     */
    where?: RaceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Races to fetch.
     */
    orderBy?: RaceOrderByWithRelationInput | RaceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Races.
     */
    cursor?: RaceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Races from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Races.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Races.
     */
    distinct?: RaceScalarFieldEnum | RaceScalarFieldEnum[]
  }

  /**
   * Race findFirstOrThrow
   */
  export type RaceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Race
     */
    select?: RaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Race
     */
    omit?: RaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RaceInclude<ExtArgs> | null
    /**
     * Filter, which Race to fetch.
     */
    where?: RaceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Races to fetch.
     */
    orderBy?: RaceOrderByWithRelationInput | RaceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Races.
     */
    cursor?: RaceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Races from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Races.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Races.
     */
    distinct?: RaceScalarFieldEnum | RaceScalarFieldEnum[]
  }

  /**
   * Race findMany
   */
  export type RaceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Race
     */
    select?: RaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Race
     */
    omit?: RaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RaceInclude<ExtArgs> | null
    /**
     * Filter, which Races to fetch.
     */
    where?: RaceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Races to fetch.
     */
    orderBy?: RaceOrderByWithRelationInput | RaceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Races.
     */
    cursor?: RaceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Races from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Races.
     */
    skip?: number
    distinct?: RaceScalarFieldEnum | RaceScalarFieldEnum[]
  }

  /**
   * Race create
   */
  export type RaceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Race
     */
    select?: RaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Race
     */
    omit?: RaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RaceInclude<ExtArgs> | null
    /**
     * The data needed to create a Race.
     */
    data: XOR<RaceCreateInput, RaceUncheckedCreateInput>
  }

  /**
   * Race createMany
   */
  export type RaceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Races.
     */
    data: RaceCreateManyInput | RaceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Race createManyAndReturn
   */
  export type RaceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Race
     */
    select?: RaceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Race
     */
    omit?: RaceOmit<ExtArgs> | null
    /**
     * The data used to create many Races.
     */
    data: RaceCreateManyInput | RaceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Race update
   */
  export type RaceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Race
     */
    select?: RaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Race
     */
    omit?: RaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RaceInclude<ExtArgs> | null
    /**
     * The data needed to update a Race.
     */
    data: XOR<RaceUpdateInput, RaceUncheckedUpdateInput>
    /**
     * Choose, which Race to update.
     */
    where: RaceWhereUniqueInput
  }

  /**
   * Race updateMany
   */
  export type RaceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Races.
     */
    data: XOR<RaceUpdateManyMutationInput, RaceUncheckedUpdateManyInput>
    /**
     * Filter which Races to update
     */
    where?: RaceWhereInput
    /**
     * Limit how many Races to update.
     */
    limit?: number
  }

  /**
   * Race updateManyAndReturn
   */
  export type RaceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Race
     */
    select?: RaceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Race
     */
    omit?: RaceOmit<ExtArgs> | null
    /**
     * The data used to update Races.
     */
    data: XOR<RaceUpdateManyMutationInput, RaceUncheckedUpdateManyInput>
    /**
     * Filter which Races to update
     */
    where?: RaceWhereInput
    /**
     * Limit how many Races to update.
     */
    limit?: number
  }

  /**
   * Race upsert
   */
  export type RaceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Race
     */
    select?: RaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Race
     */
    omit?: RaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RaceInclude<ExtArgs> | null
    /**
     * The filter to search for the Race to update in case it exists.
     */
    where: RaceWhereUniqueInput
    /**
     * In case the Race found by the `where` argument doesn't exist, create a new Race with this data.
     */
    create: XOR<RaceCreateInput, RaceUncheckedCreateInput>
    /**
     * In case the Race was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RaceUpdateInput, RaceUncheckedUpdateInput>
  }

  /**
   * Race delete
   */
  export type RaceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Race
     */
    select?: RaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Race
     */
    omit?: RaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RaceInclude<ExtArgs> | null
    /**
     * Filter which Race to delete.
     */
    where: RaceWhereUniqueInput
  }

  /**
   * Race deleteMany
   */
  export type RaceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Races to delete
     */
    where?: RaceWhereInput
    /**
     * Limit how many Races to delete.
     */
    limit?: number
  }

  /**
   * Race.ships
   */
  export type Race$shipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ship
     */
    select?: ShipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ship
     */
    omit?: ShipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShipInclude<ExtArgs> | null
    where?: ShipWhereInput
    orderBy?: ShipOrderByWithRelationInput | ShipOrderByWithRelationInput[]
    cursor?: ShipWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShipScalarFieldEnum | ShipScalarFieldEnum[]
  }

  /**
   * Race.weapons
   */
  export type Race$weaponsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Weapon
     */
    select?: WeaponSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Weapon
     */
    omit?: WeaponOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeaponInclude<ExtArgs> | null
    where?: WeaponWhereInput
    orderBy?: WeaponOrderByWithRelationInput | WeaponOrderByWithRelationInput[]
    cursor?: WeaponWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WeaponScalarFieldEnum | WeaponScalarFieldEnum[]
  }

  /**
   * Race.goods
   */
  export type Race$goodsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Good
     */
    select?: GoodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Good
     */
    omit?: GoodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoodInclude<ExtArgs> | null
    where?: GoodWhereInput
    orderBy?: GoodOrderByWithRelationInput | GoodOrderByWithRelationInput[]
    cursor?: GoodWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GoodScalarFieldEnum | GoodScalarFieldEnum[]
  }

  /**
   * Race without action
   */
  export type RaceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Race
     */
    select?: RaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Race
     */
    omit?: RaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RaceInclude<ExtArgs> | null
  }


  /**
   * Model Rank
   */

  export type AggregateRank = {
    _count: RankCountAggregateOutputType | null
    _avg: RankAvgAggregateOutputType | null
    _sum: RankSumAggregateOutputType | null
    _min: RankMinAggregateOutputType | null
    _max: RankMaxAggregateOutputType | null
  }

  export type RankAvgAggregateOutputType = {
    id: number | null
  }

  export type RankSumAggregateOutputType = {
    id: number | null
  }

  export type RankMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type RankMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type RankCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type RankAvgAggregateInputType = {
    id?: true
  }

  export type RankSumAggregateInputType = {
    id?: true
  }

  export type RankMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type RankMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type RankCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type RankAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rank to aggregate.
     */
    where?: RankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ranks to fetch.
     */
    orderBy?: RankOrderByWithRelationInput | RankOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ranks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ranks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ranks
    **/
    _count?: true | RankCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RankAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RankSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RankMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RankMaxAggregateInputType
  }

  export type GetRankAggregateType<T extends RankAggregateArgs> = {
        [P in keyof T & keyof AggregateRank]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRank[P]>
      : GetScalarType<T[P], AggregateRank[P]>
  }




  export type RankGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RankWhereInput
    orderBy?: RankOrderByWithAggregationInput | RankOrderByWithAggregationInput[]
    by: RankScalarFieldEnum[] | RankScalarFieldEnum
    having?: RankScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RankCountAggregateInputType | true
    _avg?: RankAvgAggregateInputType
    _sum?: RankSumAggregateInputType
    _min?: RankMinAggregateInputType
    _max?: RankMaxAggregateInputType
  }

  export type RankGroupByOutputType = {
    id: number
    name: string
    _count: RankCountAggregateOutputType | null
    _avg: RankAvgAggregateOutputType | null
    _sum: RankSumAggregateOutputType | null
    _min: RankMinAggregateOutputType | null
    _max: RankMaxAggregateOutputType | null
  }

  type GetRankGroupByPayload<T extends RankGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RankGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RankGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RankGroupByOutputType[P]>
            : GetScalarType<T[P], RankGroupByOutputType[P]>
        }
      >
    >


  export type RankSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    ships?: boolean | Rank$shipsArgs<ExtArgs>
    _count?: boolean | RankCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rank"]>

  export type RankSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["rank"]>

  export type RankSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["rank"]>

  export type RankSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type RankOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["rank"]>
  export type RankInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ships?: boolean | Rank$shipsArgs<ExtArgs>
    _count?: boolean | RankCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RankIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type RankIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $RankPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Rank"
    objects: {
      ships: Prisma.$ShipPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["rank"]>
    composites: {}
  }

  type RankGetPayload<S extends boolean | null | undefined | RankDefaultArgs> = $Result.GetResult<Prisma.$RankPayload, S>

  type RankCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RankFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RankCountAggregateInputType | true
    }

  export interface RankDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Rank'], meta: { name: 'Rank' } }
    /**
     * Find zero or one Rank that matches the filter.
     * @param {RankFindUniqueArgs} args - Arguments to find a Rank
     * @example
     * // Get one Rank
     * const rank = await prisma.rank.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RankFindUniqueArgs>(args: SelectSubset<T, RankFindUniqueArgs<ExtArgs>>): Prisma__RankClient<$Result.GetResult<Prisma.$RankPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Rank that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RankFindUniqueOrThrowArgs} args - Arguments to find a Rank
     * @example
     * // Get one Rank
     * const rank = await prisma.rank.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RankFindUniqueOrThrowArgs>(args: SelectSubset<T, RankFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RankClient<$Result.GetResult<Prisma.$RankPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Rank that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankFindFirstArgs} args - Arguments to find a Rank
     * @example
     * // Get one Rank
     * const rank = await prisma.rank.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RankFindFirstArgs>(args?: SelectSubset<T, RankFindFirstArgs<ExtArgs>>): Prisma__RankClient<$Result.GetResult<Prisma.$RankPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Rank that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankFindFirstOrThrowArgs} args - Arguments to find a Rank
     * @example
     * // Get one Rank
     * const rank = await prisma.rank.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RankFindFirstOrThrowArgs>(args?: SelectSubset<T, RankFindFirstOrThrowArgs<ExtArgs>>): Prisma__RankClient<$Result.GetResult<Prisma.$RankPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Ranks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ranks
     * const ranks = await prisma.rank.findMany()
     * 
     * // Get first 10 Ranks
     * const ranks = await prisma.rank.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rankWithIdOnly = await prisma.rank.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RankFindManyArgs>(args?: SelectSubset<T, RankFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RankPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Rank.
     * @param {RankCreateArgs} args - Arguments to create a Rank.
     * @example
     * // Create one Rank
     * const Rank = await prisma.rank.create({
     *   data: {
     *     // ... data to create a Rank
     *   }
     * })
     * 
     */
    create<T extends RankCreateArgs>(args: SelectSubset<T, RankCreateArgs<ExtArgs>>): Prisma__RankClient<$Result.GetResult<Prisma.$RankPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Ranks.
     * @param {RankCreateManyArgs} args - Arguments to create many Ranks.
     * @example
     * // Create many Ranks
     * const rank = await prisma.rank.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RankCreateManyArgs>(args?: SelectSubset<T, RankCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Ranks and returns the data saved in the database.
     * @param {RankCreateManyAndReturnArgs} args - Arguments to create many Ranks.
     * @example
     * // Create many Ranks
     * const rank = await prisma.rank.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Ranks and only return the `id`
     * const rankWithIdOnly = await prisma.rank.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RankCreateManyAndReturnArgs>(args?: SelectSubset<T, RankCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RankPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Rank.
     * @param {RankDeleteArgs} args - Arguments to delete one Rank.
     * @example
     * // Delete one Rank
     * const Rank = await prisma.rank.delete({
     *   where: {
     *     // ... filter to delete one Rank
     *   }
     * })
     * 
     */
    delete<T extends RankDeleteArgs>(args: SelectSubset<T, RankDeleteArgs<ExtArgs>>): Prisma__RankClient<$Result.GetResult<Prisma.$RankPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Rank.
     * @param {RankUpdateArgs} args - Arguments to update one Rank.
     * @example
     * // Update one Rank
     * const rank = await prisma.rank.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RankUpdateArgs>(args: SelectSubset<T, RankUpdateArgs<ExtArgs>>): Prisma__RankClient<$Result.GetResult<Prisma.$RankPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Ranks.
     * @param {RankDeleteManyArgs} args - Arguments to filter Ranks to delete.
     * @example
     * // Delete a few Ranks
     * const { count } = await prisma.rank.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RankDeleteManyArgs>(args?: SelectSubset<T, RankDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ranks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ranks
     * const rank = await prisma.rank.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RankUpdateManyArgs>(args: SelectSubset<T, RankUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ranks and returns the data updated in the database.
     * @param {RankUpdateManyAndReturnArgs} args - Arguments to update many Ranks.
     * @example
     * // Update many Ranks
     * const rank = await prisma.rank.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Ranks and only return the `id`
     * const rankWithIdOnly = await prisma.rank.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RankUpdateManyAndReturnArgs>(args: SelectSubset<T, RankUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RankPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Rank.
     * @param {RankUpsertArgs} args - Arguments to update or create a Rank.
     * @example
     * // Update or create a Rank
     * const rank = await prisma.rank.upsert({
     *   create: {
     *     // ... data to create a Rank
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rank we want to update
     *   }
     * })
     */
    upsert<T extends RankUpsertArgs>(args: SelectSubset<T, RankUpsertArgs<ExtArgs>>): Prisma__RankClient<$Result.GetResult<Prisma.$RankPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Ranks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankCountArgs} args - Arguments to filter Ranks to count.
     * @example
     * // Count the number of Ranks
     * const count = await prisma.rank.count({
     *   where: {
     *     // ... the filter for the Ranks we want to count
     *   }
     * })
    **/
    count<T extends RankCountArgs>(
      args?: Subset<T, RankCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RankCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Rank.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RankAggregateArgs>(args: Subset<T, RankAggregateArgs>): Prisma.PrismaPromise<GetRankAggregateType<T>>

    /**
     * Group by Rank.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RankGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RankGroupByArgs['orderBy'] }
        : { orderBy?: RankGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RankGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRankGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Rank model
   */
  readonly fields: RankFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Rank.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RankClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ships<T extends Rank$shipsArgs<ExtArgs> = {}>(args?: Subset<T, Rank$shipsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShipPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Rank model
   */
  interface RankFieldRefs {
    readonly id: FieldRef<"Rank", 'Int'>
    readonly name: FieldRef<"Rank", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Rank findUnique
   */
  export type RankFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rank
     */
    select?: RankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rank
     */
    omit?: RankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankInclude<ExtArgs> | null
    /**
     * Filter, which Rank to fetch.
     */
    where: RankWhereUniqueInput
  }

  /**
   * Rank findUniqueOrThrow
   */
  export type RankFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rank
     */
    select?: RankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rank
     */
    omit?: RankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankInclude<ExtArgs> | null
    /**
     * Filter, which Rank to fetch.
     */
    where: RankWhereUniqueInput
  }

  /**
   * Rank findFirst
   */
  export type RankFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rank
     */
    select?: RankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rank
     */
    omit?: RankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankInclude<ExtArgs> | null
    /**
     * Filter, which Rank to fetch.
     */
    where?: RankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ranks to fetch.
     */
    orderBy?: RankOrderByWithRelationInput | RankOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ranks.
     */
    cursor?: RankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ranks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ranks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ranks.
     */
    distinct?: RankScalarFieldEnum | RankScalarFieldEnum[]
  }

  /**
   * Rank findFirstOrThrow
   */
  export type RankFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rank
     */
    select?: RankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rank
     */
    omit?: RankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankInclude<ExtArgs> | null
    /**
     * Filter, which Rank to fetch.
     */
    where?: RankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ranks to fetch.
     */
    orderBy?: RankOrderByWithRelationInput | RankOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ranks.
     */
    cursor?: RankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ranks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ranks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ranks.
     */
    distinct?: RankScalarFieldEnum | RankScalarFieldEnum[]
  }

  /**
   * Rank findMany
   */
  export type RankFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rank
     */
    select?: RankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rank
     */
    omit?: RankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankInclude<ExtArgs> | null
    /**
     * Filter, which Ranks to fetch.
     */
    where?: RankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ranks to fetch.
     */
    orderBy?: RankOrderByWithRelationInput | RankOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ranks.
     */
    cursor?: RankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ranks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ranks.
     */
    skip?: number
    distinct?: RankScalarFieldEnum | RankScalarFieldEnum[]
  }

  /**
   * Rank create
   */
  export type RankCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rank
     */
    select?: RankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rank
     */
    omit?: RankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankInclude<ExtArgs> | null
    /**
     * The data needed to create a Rank.
     */
    data: XOR<RankCreateInput, RankUncheckedCreateInput>
  }

  /**
   * Rank createMany
   */
  export type RankCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Ranks.
     */
    data: RankCreateManyInput | RankCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Rank createManyAndReturn
   */
  export type RankCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rank
     */
    select?: RankSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Rank
     */
    omit?: RankOmit<ExtArgs> | null
    /**
     * The data used to create many Ranks.
     */
    data: RankCreateManyInput | RankCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Rank update
   */
  export type RankUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rank
     */
    select?: RankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rank
     */
    omit?: RankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankInclude<ExtArgs> | null
    /**
     * The data needed to update a Rank.
     */
    data: XOR<RankUpdateInput, RankUncheckedUpdateInput>
    /**
     * Choose, which Rank to update.
     */
    where: RankWhereUniqueInput
  }

  /**
   * Rank updateMany
   */
  export type RankUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Ranks.
     */
    data: XOR<RankUpdateManyMutationInput, RankUncheckedUpdateManyInput>
    /**
     * Filter which Ranks to update
     */
    where?: RankWhereInput
    /**
     * Limit how many Ranks to update.
     */
    limit?: number
  }

  /**
   * Rank updateManyAndReturn
   */
  export type RankUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rank
     */
    select?: RankSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Rank
     */
    omit?: RankOmit<ExtArgs> | null
    /**
     * The data used to update Ranks.
     */
    data: XOR<RankUpdateManyMutationInput, RankUncheckedUpdateManyInput>
    /**
     * Filter which Ranks to update
     */
    where?: RankWhereInput
    /**
     * Limit how many Ranks to update.
     */
    limit?: number
  }

  /**
   * Rank upsert
   */
  export type RankUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rank
     */
    select?: RankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rank
     */
    omit?: RankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankInclude<ExtArgs> | null
    /**
     * The filter to search for the Rank to update in case it exists.
     */
    where: RankWhereUniqueInput
    /**
     * In case the Rank found by the `where` argument doesn't exist, create a new Rank with this data.
     */
    create: XOR<RankCreateInput, RankUncheckedCreateInput>
    /**
     * In case the Rank was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RankUpdateInput, RankUncheckedUpdateInput>
  }

  /**
   * Rank delete
   */
  export type RankDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rank
     */
    select?: RankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rank
     */
    omit?: RankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankInclude<ExtArgs> | null
    /**
     * Filter which Rank to delete.
     */
    where: RankWhereUniqueInput
  }

  /**
   * Rank deleteMany
   */
  export type RankDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ranks to delete
     */
    where?: RankWhereInput
    /**
     * Limit how many Ranks to delete.
     */
    limit?: number
  }

  /**
   * Rank.ships
   */
  export type Rank$shipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ship
     */
    select?: ShipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ship
     */
    omit?: ShipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShipInclude<ExtArgs> | null
    where?: ShipWhereInput
    orderBy?: ShipOrderByWithRelationInput | ShipOrderByWithRelationInput[]
    cursor?: ShipWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShipScalarFieldEnum | ShipScalarFieldEnum[]
  }

  /**
   * Rank without action
   */
  export type RankDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rank
     */
    select?: RankSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Rank
     */
    omit?: RankOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankInclude<ExtArgs> | null
  }


  /**
   * Model System
   */

  export type AggregateSystem = {
    _count: SystemCountAggregateOutputType | null
    _avg: SystemAvgAggregateOutputType | null
    _sum: SystemSumAggregateOutputType | null
    _min: SystemMinAggregateOutputType | null
    _max: SystemMaxAggregateOutputType | null
  }

  export type SystemAvgAggregateOutputType = {
    id: number | null
    coordsX: number | null
    coordsY: number | null
  }

  export type SystemSumAggregateOutputType = {
    id: number | null
    coordsX: number | null
    coordsY: number | null
  }

  export type SystemMinAggregateOutputType = {
    id: number | null
    name: string | null
    coordsX: number | null
    coordsY: number | null
    raceType: string | null
  }

  export type SystemMaxAggregateOutputType = {
    id: number | null
    name: string | null
    coordsX: number | null
    coordsY: number | null
    raceType: string | null
  }

  export type SystemCountAggregateOutputType = {
    id: number
    name: number
    coordsX: number
    coordsY: number
    raceType: number
    _all: number
  }


  export type SystemAvgAggregateInputType = {
    id?: true
    coordsX?: true
    coordsY?: true
  }

  export type SystemSumAggregateInputType = {
    id?: true
    coordsX?: true
    coordsY?: true
  }

  export type SystemMinAggregateInputType = {
    id?: true
    name?: true
    coordsX?: true
    coordsY?: true
    raceType?: true
  }

  export type SystemMaxAggregateInputType = {
    id?: true
    name?: true
    coordsX?: true
    coordsY?: true
    raceType?: true
  }

  export type SystemCountAggregateInputType = {
    id?: true
    name?: true
    coordsX?: true
    coordsY?: true
    raceType?: true
    _all?: true
  }

  export type SystemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which System to aggregate.
     */
    where?: SystemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Systems to fetch.
     */
    orderBy?: SystemOrderByWithRelationInput | SystemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SystemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Systems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Systems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Systems
    **/
    _count?: true | SystemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SystemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SystemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SystemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SystemMaxAggregateInputType
  }

  export type GetSystemAggregateType<T extends SystemAggregateArgs> = {
        [P in keyof T & keyof AggregateSystem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSystem[P]>
      : GetScalarType<T[P], AggregateSystem[P]>
  }




  export type SystemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SystemWhereInput
    orderBy?: SystemOrderByWithAggregationInput | SystemOrderByWithAggregationInput[]
    by: SystemScalarFieldEnum[] | SystemScalarFieldEnum
    having?: SystemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SystemCountAggregateInputType | true
    _avg?: SystemAvgAggregateInputType
    _sum?: SystemSumAggregateInputType
    _min?: SystemMinAggregateInputType
    _max?: SystemMaxAggregateInputType
  }

  export type SystemGroupByOutputType = {
    id: number
    name: string
    coordsX: number
    coordsY: number
    raceType: string | null
    _count: SystemCountAggregateOutputType | null
    _avg: SystemAvgAggregateOutputType | null
    _sum: SystemSumAggregateOutputType | null
    _min: SystemMinAggregateOutputType | null
    _max: SystemMaxAggregateOutputType | null
  }

  type GetSystemGroupByPayload<T extends SystemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SystemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SystemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SystemGroupByOutputType[P]>
            : GetScalarType<T[P], SystemGroupByOutputType[P]>
        }
      >
    >


  export type SystemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    coordsX?: boolean
    coordsY?: boolean
    raceType?: boolean
    ports?: boolean | System$portsArgs<ExtArgs>
    playersHere?: boolean | System$playersHereArgs<ExtArgs>
    _count?: boolean | SystemCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["system"]>

  export type SystemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    coordsX?: boolean
    coordsY?: boolean
    raceType?: boolean
  }, ExtArgs["result"]["system"]>

  export type SystemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    coordsX?: boolean
    coordsY?: boolean
    raceType?: boolean
  }, ExtArgs["result"]["system"]>

  export type SystemSelectScalar = {
    id?: boolean
    name?: boolean
    coordsX?: boolean
    coordsY?: boolean
    raceType?: boolean
  }

  export type SystemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "coordsX" | "coordsY" | "raceType", ExtArgs["result"]["system"]>
  export type SystemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ports?: boolean | System$portsArgs<ExtArgs>
    playersHere?: boolean | System$playersHereArgs<ExtArgs>
    _count?: boolean | SystemCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SystemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type SystemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SystemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "System"
    objects: {
      ports: Prisma.$PortPayload<ExtArgs>[]
      playersHere: Prisma.$PlayerPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      coordsX: number
      coordsY: number
      raceType: string | null
    }, ExtArgs["result"]["system"]>
    composites: {}
  }

  type SystemGetPayload<S extends boolean | null | undefined | SystemDefaultArgs> = $Result.GetResult<Prisma.$SystemPayload, S>

  type SystemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SystemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SystemCountAggregateInputType | true
    }

  export interface SystemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['System'], meta: { name: 'System' } }
    /**
     * Find zero or one System that matches the filter.
     * @param {SystemFindUniqueArgs} args - Arguments to find a System
     * @example
     * // Get one System
     * const system = await prisma.system.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SystemFindUniqueArgs>(args: SelectSubset<T, SystemFindUniqueArgs<ExtArgs>>): Prisma__SystemClient<$Result.GetResult<Prisma.$SystemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one System that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SystemFindUniqueOrThrowArgs} args - Arguments to find a System
     * @example
     * // Get one System
     * const system = await prisma.system.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SystemFindUniqueOrThrowArgs>(args: SelectSubset<T, SystemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SystemClient<$Result.GetResult<Prisma.$SystemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first System that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemFindFirstArgs} args - Arguments to find a System
     * @example
     * // Get one System
     * const system = await prisma.system.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SystemFindFirstArgs>(args?: SelectSubset<T, SystemFindFirstArgs<ExtArgs>>): Prisma__SystemClient<$Result.GetResult<Prisma.$SystemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first System that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemFindFirstOrThrowArgs} args - Arguments to find a System
     * @example
     * // Get one System
     * const system = await prisma.system.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SystemFindFirstOrThrowArgs>(args?: SelectSubset<T, SystemFindFirstOrThrowArgs<ExtArgs>>): Prisma__SystemClient<$Result.GetResult<Prisma.$SystemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Systems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Systems
     * const systems = await prisma.system.findMany()
     * 
     * // Get first 10 Systems
     * const systems = await prisma.system.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const systemWithIdOnly = await prisma.system.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SystemFindManyArgs>(args?: SelectSubset<T, SystemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a System.
     * @param {SystemCreateArgs} args - Arguments to create a System.
     * @example
     * // Create one System
     * const System = await prisma.system.create({
     *   data: {
     *     // ... data to create a System
     *   }
     * })
     * 
     */
    create<T extends SystemCreateArgs>(args: SelectSubset<T, SystemCreateArgs<ExtArgs>>): Prisma__SystemClient<$Result.GetResult<Prisma.$SystemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Systems.
     * @param {SystemCreateManyArgs} args - Arguments to create many Systems.
     * @example
     * // Create many Systems
     * const system = await prisma.system.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SystemCreateManyArgs>(args?: SelectSubset<T, SystemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Systems and returns the data saved in the database.
     * @param {SystemCreateManyAndReturnArgs} args - Arguments to create many Systems.
     * @example
     * // Create many Systems
     * const system = await prisma.system.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Systems and only return the `id`
     * const systemWithIdOnly = await prisma.system.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SystemCreateManyAndReturnArgs>(args?: SelectSubset<T, SystemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a System.
     * @param {SystemDeleteArgs} args - Arguments to delete one System.
     * @example
     * // Delete one System
     * const System = await prisma.system.delete({
     *   where: {
     *     // ... filter to delete one System
     *   }
     * })
     * 
     */
    delete<T extends SystemDeleteArgs>(args: SelectSubset<T, SystemDeleteArgs<ExtArgs>>): Prisma__SystemClient<$Result.GetResult<Prisma.$SystemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one System.
     * @param {SystemUpdateArgs} args - Arguments to update one System.
     * @example
     * // Update one System
     * const system = await prisma.system.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SystemUpdateArgs>(args: SelectSubset<T, SystemUpdateArgs<ExtArgs>>): Prisma__SystemClient<$Result.GetResult<Prisma.$SystemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Systems.
     * @param {SystemDeleteManyArgs} args - Arguments to filter Systems to delete.
     * @example
     * // Delete a few Systems
     * const { count } = await prisma.system.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SystemDeleteManyArgs>(args?: SelectSubset<T, SystemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Systems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Systems
     * const system = await prisma.system.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SystemUpdateManyArgs>(args: SelectSubset<T, SystemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Systems and returns the data updated in the database.
     * @param {SystemUpdateManyAndReturnArgs} args - Arguments to update many Systems.
     * @example
     * // Update many Systems
     * const system = await prisma.system.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Systems and only return the `id`
     * const systemWithIdOnly = await prisma.system.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SystemUpdateManyAndReturnArgs>(args: SelectSubset<T, SystemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one System.
     * @param {SystemUpsertArgs} args - Arguments to update or create a System.
     * @example
     * // Update or create a System
     * const system = await prisma.system.upsert({
     *   create: {
     *     // ... data to create a System
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the System we want to update
     *   }
     * })
     */
    upsert<T extends SystemUpsertArgs>(args: SelectSubset<T, SystemUpsertArgs<ExtArgs>>): Prisma__SystemClient<$Result.GetResult<Prisma.$SystemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Systems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemCountArgs} args - Arguments to filter Systems to count.
     * @example
     * // Count the number of Systems
     * const count = await prisma.system.count({
     *   where: {
     *     // ... the filter for the Systems we want to count
     *   }
     * })
    **/
    count<T extends SystemCountArgs>(
      args?: Subset<T, SystemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SystemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a System.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SystemAggregateArgs>(args: Subset<T, SystemAggregateArgs>): Prisma.PrismaPromise<GetSystemAggregateType<T>>

    /**
     * Group by System.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SystemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SystemGroupByArgs['orderBy'] }
        : { orderBy?: SystemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SystemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSystemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the System model
   */
  readonly fields: SystemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for System.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SystemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ports<T extends System$portsArgs<ExtArgs> = {}>(args?: Subset<T, System$portsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PortPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    playersHere<T extends System$playersHereArgs<ExtArgs> = {}>(args?: Subset<T, System$playersHereArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the System model
   */
  interface SystemFieldRefs {
    readonly id: FieldRef<"System", 'Int'>
    readonly name: FieldRef<"System", 'String'>
    readonly coordsX: FieldRef<"System", 'Int'>
    readonly coordsY: FieldRef<"System", 'Int'>
    readonly raceType: FieldRef<"System", 'String'>
  }
    

  // Custom InputTypes
  /**
   * System findUnique
   */
  export type SystemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the System
     */
    select?: SystemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the System
     */
    omit?: SystemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemInclude<ExtArgs> | null
    /**
     * Filter, which System to fetch.
     */
    where: SystemWhereUniqueInput
  }

  /**
   * System findUniqueOrThrow
   */
  export type SystemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the System
     */
    select?: SystemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the System
     */
    omit?: SystemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemInclude<ExtArgs> | null
    /**
     * Filter, which System to fetch.
     */
    where: SystemWhereUniqueInput
  }

  /**
   * System findFirst
   */
  export type SystemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the System
     */
    select?: SystemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the System
     */
    omit?: SystemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemInclude<ExtArgs> | null
    /**
     * Filter, which System to fetch.
     */
    where?: SystemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Systems to fetch.
     */
    orderBy?: SystemOrderByWithRelationInput | SystemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Systems.
     */
    cursor?: SystemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Systems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Systems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Systems.
     */
    distinct?: SystemScalarFieldEnum | SystemScalarFieldEnum[]
  }

  /**
   * System findFirstOrThrow
   */
  export type SystemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the System
     */
    select?: SystemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the System
     */
    omit?: SystemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemInclude<ExtArgs> | null
    /**
     * Filter, which System to fetch.
     */
    where?: SystemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Systems to fetch.
     */
    orderBy?: SystemOrderByWithRelationInput | SystemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Systems.
     */
    cursor?: SystemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Systems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Systems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Systems.
     */
    distinct?: SystemScalarFieldEnum | SystemScalarFieldEnum[]
  }

  /**
   * System findMany
   */
  export type SystemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the System
     */
    select?: SystemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the System
     */
    omit?: SystemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemInclude<ExtArgs> | null
    /**
     * Filter, which Systems to fetch.
     */
    where?: SystemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Systems to fetch.
     */
    orderBy?: SystemOrderByWithRelationInput | SystemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Systems.
     */
    cursor?: SystemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Systems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Systems.
     */
    skip?: number
    distinct?: SystemScalarFieldEnum | SystemScalarFieldEnum[]
  }

  /**
   * System create
   */
  export type SystemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the System
     */
    select?: SystemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the System
     */
    omit?: SystemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemInclude<ExtArgs> | null
    /**
     * The data needed to create a System.
     */
    data: XOR<SystemCreateInput, SystemUncheckedCreateInput>
  }

  /**
   * System createMany
   */
  export type SystemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Systems.
     */
    data: SystemCreateManyInput | SystemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * System createManyAndReturn
   */
  export type SystemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the System
     */
    select?: SystemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the System
     */
    omit?: SystemOmit<ExtArgs> | null
    /**
     * The data used to create many Systems.
     */
    data: SystemCreateManyInput | SystemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * System update
   */
  export type SystemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the System
     */
    select?: SystemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the System
     */
    omit?: SystemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemInclude<ExtArgs> | null
    /**
     * The data needed to update a System.
     */
    data: XOR<SystemUpdateInput, SystemUncheckedUpdateInput>
    /**
     * Choose, which System to update.
     */
    where: SystemWhereUniqueInput
  }

  /**
   * System updateMany
   */
  export type SystemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Systems.
     */
    data: XOR<SystemUpdateManyMutationInput, SystemUncheckedUpdateManyInput>
    /**
     * Filter which Systems to update
     */
    where?: SystemWhereInput
    /**
     * Limit how many Systems to update.
     */
    limit?: number
  }

  /**
   * System updateManyAndReturn
   */
  export type SystemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the System
     */
    select?: SystemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the System
     */
    omit?: SystemOmit<ExtArgs> | null
    /**
     * The data used to update Systems.
     */
    data: XOR<SystemUpdateManyMutationInput, SystemUncheckedUpdateManyInput>
    /**
     * Filter which Systems to update
     */
    where?: SystemWhereInput
    /**
     * Limit how many Systems to update.
     */
    limit?: number
  }

  /**
   * System upsert
   */
  export type SystemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the System
     */
    select?: SystemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the System
     */
    omit?: SystemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemInclude<ExtArgs> | null
    /**
     * The filter to search for the System to update in case it exists.
     */
    where: SystemWhereUniqueInput
    /**
     * In case the System found by the `where` argument doesn't exist, create a new System with this data.
     */
    create: XOR<SystemCreateInput, SystemUncheckedCreateInput>
    /**
     * In case the System was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SystemUpdateInput, SystemUncheckedUpdateInput>
  }

  /**
   * System delete
   */
  export type SystemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the System
     */
    select?: SystemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the System
     */
    omit?: SystemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemInclude<ExtArgs> | null
    /**
     * Filter which System to delete.
     */
    where: SystemWhereUniqueInput
  }

  /**
   * System deleteMany
   */
  export type SystemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Systems to delete
     */
    where?: SystemWhereInput
    /**
     * Limit how many Systems to delete.
     */
    limit?: number
  }

  /**
   * System.ports
   */
  export type System$portsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Port
     */
    select?: PortSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Port
     */
    omit?: PortOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortInclude<ExtArgs> | null
    where?: PortWhereInput
    orderBy?: PortOrderByWithRelationInput | PortOrderByWithRelationInput[]
    cursor?: PortWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PortScalarFieldEnum | PortScalarFieldEnum[]
  }

  /**
   * System.playersHere
   */
  export type System$playersHereArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    where?: PlayerWhereInput
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    cursor?: PlayerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlayerScalarFieldEnum | PlayerScalarFieldEnum[]
  }

  /**
   * System without action
   */
  export type SystemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the System
     */
    select?: SystemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the System
     */
    omit?: SystemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemInclude<ExtArgs> | null
  }


  /**
   * Model Port
   */

  export type AggregatePort = {
    _count: PortCountAggregateOutputType | null
    _avg: PortAvgAggregateOutputType | null
    _sum: PortSumAggregateOutputType | null
    _min: PortMinAggregateOutputType | null
    _max: PortMaxAggregateOutputType | null
  }

  export type PortAvgAggregateOutputType = {
    id: number | null
    systemId: number | null
    upgradeLevel: number | null
  }

  export type PortSumAggregateOutputType = {
    id: number | null
    systemId: number | null
    upgradeLevel: number | null
  }

  export type PortMinAggregateOutputType = {
    id: number | null
    systemId: number | null
    upgradeLevel: number | null
  }

  export type PortMaxAggregateOutputType = {
    id: number | null
    systemId: number | null
    upgradeLevel: number | null
  }

  export type PortCountAggregateOutputType = {
    id: number
    systemId: number
    goodsAvailable: number
    upgradeLevel: number
    _all: number
  }


  export type PortAvgAggregateInputType = {
    id?: true
    systemId?: true
    upgradeLevel?: true
  }

  export type PortSumAggregateInputType = {
    id?: true
    systemId?: true
    upgradeLevel?: true
  }

  export type PortMinAggregateInputType = {
    id?: true
    systemId?: true
    upgradeLevel?: true
  }

  export type PortMaxAggregateInputType = {
    id?: true
    systemId?: true
    upgradeLevel?: true
  }

  export type PortCountAggregateInputType = {
    id?: true
    systemId?: true
    goodsAvailable?: true
    upgradeLevel?: true
    _all?: true
  }

  export type PortAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Port to aggregate.
     */
    where?: PortWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ports to fetch.
     */
    orderBy?: PortOrderByWithRelationInput | PortOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PortWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ports
    **/
    _count?: true | PortCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PortAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PortSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PortMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PortMaxAggregateInputType
  }

  export type GetPortAggregateType<T extends PortAggregateArgs> = {
        [P in keyof T & keyof AggregatePort]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePort[P]>
      : GetScalarType<T[P], AggregatePort[P]>
  }




  export type PortGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PortWhereInput
    orderBy?: PortOrderByWithAggregationInput | PortOrderByWithAggregationInput[]
    by: PortScalarFieldEnum[] | PortScalarFieldEnum
    having?: PortScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PortCountAggregateInputType | true
    _avg?: PortAvgAggregateInputType
    _sum?: PortSumAggregateInputType
    _min?: PortMinAggregateInputType
    _max?: PortMaxAggregateInputType
  }

  export type PortGroupByOutputType = {
    id: number
    systemId: number
    goodsAvailable: JsonValue | null
    upgradeLevel: number
    _count: PortCountAggregateOutputType | null
    _avg: PortAvgAggregateOutputType | null
    _sum: PortSumAggregateOutputType | null
    _min: PortMinAggregateOutputType | null
    _max: PortMaxAggregateOutputType | null
  }

  type GetPortGroupByPayload<T extends PortGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PortGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PortGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PortGroupByOutputType[P]>
            : GetScalarType<T[P], PortGroupByOutputType[P]>
        }
      >
    >


  export type PortSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    systemId?: boolean
    goodsAvailable?: boolean
    upgradeLevel?: boolean
    system?: boolean | SystemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["port"]>

  export type PortSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    systemId?: boolean
    goodsAvailable?: boolean
    upgradeLevel?: boolean
    system?: boolean | SystemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["port"]>

  export type PortSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    systemId?: boolean
    goodsAvailable?: boolean
    upgradeLevel?: boolean
    system?: boolean | SystemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["port"]>

  export type PortSelectScalar = {
    id?: boolean
    systemId?: boolean
    goodsAvailable?: boolean
    upgradeLevel?: boolean
  }

  export type PortOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "systemId" | "goodsAvailable" | "upgradeLevel", ExtArgs["result"]["port"]>
  export type PortInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    system?: boolean | SystemDefaultArgs<ExtArgs>
  }
  export type PortIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    system?: boolean | SystemDefaultArgs<ExtArgs>
  }
  export type PortIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    system?: boolean | SystemDefaultArgs<ExtArgs>
  }

  export type $PortPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Port"
    objects: {
      system: Prisma.$SystemPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      systemId: number
      goodsAvailable: Prisma.JsonValue | null
      upgradeLevel: number
    }, ExtArgs["result"]["port"]>
    composites: {}
  }

  type PortGetPayload<S extends boolean | null | undefined | PortDefaultArgs> = $Result.GetResult<Prisma.$PortPayload, S>

  type PortCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PortFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PortCountAggregateInputType | true
    }

  export interface PortDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Port'], meta: { name: 'Port' } }
    /**
     * Find zero or one Port that matches the filter.
     * @param {PortFindUniqueArgs} args - Arguments to find a Port
     * @example
     * // Get one Port
     * const port = await prisma.port.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PortFindUniqueArgs>(args: SelectSubset<T, PortFindUniqueArgs<ExtArgs>>): Prisma__PortClient<$Result.GetResult<Prisma.$PortPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Port that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PortFindUniqueOrThrowArgs} args - Arguments to find a Port
     * @example
     * // Get one Port
     * const port = await prisma.port.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PortFindUniqueOrThrowArgs>(args: SelectSubset<T, PortFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PortClient<$Result.GetResult<Prisma.$PortPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Port that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PortFindFirstArgs} args - Arguments to find a Port
     * @example
     * // Get one Port
     * const port = await prisma.port.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PortFindFirstArgs>(args?: SelectSubset<T, PortFindFirstArgs<ExtArgs>>): Prisma__PortClient<$Result.GetResult<Prisma.$PortPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Port that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PortFindFirstOrThrowArgs} args - Arguments to find a Port
     * @example
     * // Get one Port
     * const port = await prisma.port.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PortFindFirstOrThrowArgs>(args?: SelectSubset<T, PortFindFirstOrThrowArgs<ExtArgs>>): Prisma__PortClient<$Result.GetResult<Prisma.$PortPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Ports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PortFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ports
     * const ports = await prisma.port.findMany()
     * 
     * // Get first 10 Ports
     * const ports = await prisma.port.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const portWithIdOnly = await prisma.port.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PortFindManyArgs>(args?: SelectSubset<T, PortFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PortPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Port.
     * @param {PortCreateArgs} args - Arguments to create a Port.
     * @example
     * // Create one Port
     * const Port = await prisma.port.create({
     *   data: {
     *     // ... data to create a Port
     *   }
     * })
     * 
     */
    create<T extends PortCreateArgs>(args: SelectSubset<T, PortCreateArgs<ExtArgs>>): Prisma__PortClient<$Result.GetResult<Prisma.$PortPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Ports.
     * @param {PortCreateManyArgs} args - Arguments to create many Ports.
     * @example
     * // Create many Ports
     * const port = await prisma.port.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PortCreateManyArgs>(args?: SelectSubset<T, PortCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Ports and returns the data saved in the database.
     * @param {PortCreateManyAndReturnArgs} args - Arguments to create many Ports.
     * @example
     * // Create many Ports
     * const port = await prisma.port.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Ports and only return the `id`
     * const portWithIdOnly = await prisma.port.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PortCreateManyAndReturnArgs>(args?: SelectSubset<T, PortCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PortPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Port.
     * @param {PortDeleteArgs} args - Arguments to delete one Port.
     * @example
     * // Delete one Port
     * const Port = await prisma.port.delete({
     *   where: {
     *     // ... filter to delete one Port
     *   }
     * })
     * 
     */
    delete<T extends PortDeleteArgs>(args: SelectSubset<T, PortDeleteArgs<ExtArgs>>): Prisma__PortClient<$Result.GetResult<Prisma.$PortPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Port.
     * @param {PortUpdateArgs} args - Arguments to update one Port.
     * @example
     * // Update one Port
     * const port = await prisma.port.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PortUpdateArgs>(args: SelectSubset<T, PortUpdateArgs<ExtArgs>>): Prisma__PortClient<$Result.GetResult<Prisma.$PortPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Ports.
     * @param {PortDeleteManyArgs} args - Arguments to filter Ports to delete.
     * @example
     * // Delete a few Ports
     * const { count } = await prisma.port.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PortDeleteManyArgs>(args?: SelectSubset<T, PortDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PortUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ports
     * const port = await prisma.port.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PortUpdateManyArgs>(args: SelectSubset<T, PortUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ports and returns the data updated in the database.
     * @param {PortUpdateManyAndReturnArgs} args - Arguments to update many Ports.
     * @example
     * // Update many Ports
     * const port = await prisma.port.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Ports and only return the `id`
     * const portWithIdOnly = await prisma.port.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PortUpdateManyAndReturnArgs>(args: SelectSubset<T, PortUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PortPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Port.
     * @param {PortUpsertArgs} args - Arguments to update or create a Port.
     * @example
     * // Update or create a Port
     * const port = await prisma.port.upsert({
     *   create: {
     *     // ... data to create a Port
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Port we want to update
     *   }
     * })
     */
    upsert<T extends PortUpsertArgs>(args: SelectSubset<T, PortUpsertArgs<ExtArgs>>): Prisma__PortClient<$Result.GetResult<Prisma.$PortPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Ports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PortCountArgs} args - Arguments to filter Ports to count.
     * @example
     * // Count the number of Ports
     * const count = await prisma.port.count({
     *   where: {
     *     // ... the filter for the Ports we want to count
     *   }
     * })
    **/
    count<T extends PortCountArgs>(
      args?: Subset<T, PortCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PortCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Port.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PortAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PortAggregateArgs>(args: Subset<T, PortAggregateArgs>): Prisma.PrismaPromise<GetPortAggregateType<T>>

    /**
     * Group by Port.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PortGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PortGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PortGroupByArgs['orderBy'] }
        : { orderBy?: PortGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PortGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPortGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Port model
   */
  readonly fields: PortFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Port.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PortClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    system<T extends SystemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SystemDefaultArgs<ExtArgs>>): Prisma__SystemClient<$Result.GetResult<Prisma.$SystemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Port model
   */
  interface PortFieldRefs {
    readonly id: FieldRef<"Port", 'Int'>
    readonly systemId: FieldRef<"Port", 'Int'>
    readonly goodsAvailable: FieldRef<"Port", 'Json'>
    readonly upgradeLevel: FieldRef<"Port", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Port findUnique
   */
  export type PortFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Port
     */
    select?: PortSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Port
     */
    omit?: PortOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortInclude<ExtArgs> | null
    /**
     * Filter, which Port to fetch.
     */
    where: PortWhereUniqueInput
  }

  /**
   * Port findUniqueOrThrow
   */
  export type PortFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Port
     */
    select?: PortSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Port
     */
    omit?: PortOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortInclude<ExtArgs> | null
    /**
     * Filter, which Port to fetch.
     */
    where: PortWhereUniqueInput
  }

  /**
   * Port findFirst
   */
  export type PortFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Port
     */
    select?: PortSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Port
     */
    omit?: PortOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortInclude<ExtArgs> | null
    /**
     * Filter, which Port to fetch.
     */
    where?: PortWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ports to fetch.
     */
    orderBy?: PortOrderByWithRelationInput | PortOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ports.
     */
    cursor?: PortWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ports.
     */
    distinct?: PortScalarFieldEnum | PortScalarFieldEnum[]
  }

  /**
   * Port findFirstOrThrow
   */
  export type PortFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Port
     */
    select?: PortSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Port
     */
    omit?: PortOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortInclude<ExtArgs> | null
    /**
     * Filter, which Port to fetch.
     */
    where?: PortWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ports to fetch.
     */
    orderBy?: PortOrderByWithRelationInput | PortOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ports.
     */
    cursor?: PortWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ports.
     */
    distinct?: PortScalarFieldEnum | PortScalarFieldEnum[]
  }

  /**
   * Port findMany
   */
  export type PortFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Port
     */
    select?: PortSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Port
     */
    omit?: PortOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortInclude<ExtArgs> | null
    /**
     * Filter, which Ports to fetch.
     */
    where?: PortWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ports to fetch.
     */
    orderBy?: PortOrderByWithRelationInput | PortOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ports.
     */
    cursor?: PortWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ports.
     */
    skip?: number
    distinct?: PortScalarFieldEnum | PortScalarFieldEnum[]
  }

  /**
   * Port create
   */
  export type PortCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Port
     */
    select?: PortSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Port
     */
    omit?: PortOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortInclude<ExtArgs> | null
    /**
     * The data needed to create a Port.
     */
    data: XOR<PortCreateInput, PortUncheckedCreateInput>
  }

  /**
   * Port createMany
   */
  export type PortCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Ports.
     */
    data: PortCreateManyInput | PortCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Port createManyAndReturn
   */
  export type PortCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Port
     */
    select?: PortSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Port
     */
    omit?: PortOmit<ExtArgs> | null
    /**
     * The data used to create many Ports.
     */
    data: PortCreateManyInput | PortCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Port update
   */
  export type PortUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Port
     */
    select?: PortSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Port
     */
    omit?: PortOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortInclude<ExtArgs> | null
    /**
     * The data needed to update a Port.
     */
    data: XOR<PortUpdateInput, PortUncheckedUpdateInput>
    /**
     * Choose, which Port to update.
     */
    where: PortWhereUniqueInput
  }

  /**
   * Port updateMany
   */
  export type PortUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Ports.
     */
    data: XOR<PortUpdateManyMutationInput, PortUncheckedUpdateManyInput>
    /**
     * Filter which Ports to update
     */
    where?: PortWhereInput
    /**
     * Limit how many Ports to update.
     */
    limit?: number
  }

  /**
   * Port updateManyAndReturn
   */
  export type PortUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Port
     */
    select?: PortSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Port
     */
    omit?: PortOmit<ExtArgs> | null
    /**
     * The data used to update Ports.
     */
    data: XOR<PortUpdateManyMutationInput, PortUncheckedUpdateManyInput>
    /**
     * Filter which Ports to update
     */
    where?: PortWhereInput
    /**
     * Limit how many Ports to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Port upsert
   */
  export type PortUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Port
     */
    select?: PortSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Port
     */
    omit?: PortOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortInclude<ExtArgs> | null
    /**
     * The filter to search for the Port to update in case it exists.
     */
    where: PortWhereUniqueInput
    /**
     * In case the Port found by the `where` argument doesn't exist, create a new Port with this data.
     */
    create: XOR<PortCreateInput, PortUncheckedCreateInput>
    /**
     * In case the Port was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PortUpdateInput, PortUncheckedUpdateInput>
  }

  /**
   * Port delete
   */
  export type PortDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Port
     */
    select?: PortSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Port
     */
    omit?: PortOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortInclude<ExtArgs> | null
    /**
     * Filter which Port to delete.
     */
    where: PortWhereUniqueInput
  }

  /**
   * Port deleteMany
   */
  export type PortDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ports to delete
     */
    where?: PortWhereInput
    /**
     * Limit how many Ports to delete.
     */
    limit?: number
  }

  /**
   * Port without action
   */
  export type PortDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Port
     */
    select?: PortSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Port
     */
    omit?: PortOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortInclude<ExtArgs> | null
  }


  /**
   * Model Good
   */

  export type AggregateGood = {
    _count: GoodCountAggregateOutputType | null
    _avg: GoodAvgAggregateOutputType | null
    _sum: GoodSumAggregateOutputType | null
    _min: GoodMinAggregateOutputType | null
    _max: GoodMaxAggregateOutputType | null
  }

  export type GoodAvgAggregateOutputType = {
    id: number | null
    level: number | null
    raceId: number | null
    tech: number | null
    type: number | null
  }

  export type GoodSumAggregateOutputType = {
    id: number | null
    level: number | null
    raceId: number | null
    tech: number | null
    type: number | null
  }

  export type GoodMinAggregateOutputType = {
    id: number | null
    name: string | null
    level: number | null
    raceId: number | null
    tech: number | null
    type: number | null
  }

  export type GoodMaxAggregateOutputType = {
    id: number | null
    name: string | null
    level: number | null
    raceId: number | null
    tech: number | null
    type: number | null
  }

  export type GoodCountAggregateOutputType = {
    id: number
    name: number
    level: number
    raceId: number
    tech: number
    type: number
    _all: number
  }


  export type GoodAvgAggregateInputType = {
    id?: true
    level?: true
    raceId?: true
    tech?: true
    type?: true
  }

  export type GoodSumAggregateInputType = {
    id?: true
    level?: true
    raceId?: true
    tech?: true
    type?: true
  }

  export type GoodMinAggregateInputType = {
    id?: true
    name?: true
    level?: true
    raceId?: true
    tech?: true
    type?: true
  }

  export type GoodMaxAggregateInputType = {
    id?: true
    name?: true
    level?: true
    raceId?: true
    tech?: true
    type?: true
  }

  export type GoodCountAggregateInputType = {
    id?: true
    name?: true
    level?: true
    raceId?: true
    tech?: true
    type?: true
    _all?: true
  }

  export type GoodAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Good to aggregate.
     */
    where?: GoodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Goods to fetch.
     */
    orderBy?: GoodOrderByWithRelationInput | GoodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GoodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Goods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Goods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Goods
    **/
    _count?: true | GoodCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GoodAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GoodSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GoodMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GoodMaxAggregateInputType
  }

  export type GetGoodAggregateType<T extends GoodAggregateArgs> = {
        [P in keyof T & keyof AggregateGood]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGood[P]>
      : GetScalarType<T[P], AggregateGood[P]>
  }




  export type GoodGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GoodWhereInput
    orderBy?: GoodOrderByWithAggregationInput | GoodOrderByWithAggregationInput[]
    by: GoodScalarFieldEnum[] | GoodScalarFieldEnum
    having?: GoodScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GoodCountAggregateInputType | true
    _avg?: GoodAvgAggregateInputType
    _sum?: GoodSumAggregateInputType
    _min?: GoodMinAggregateInputType
    _max?: GoodMaxAggregateInputType
  }

  export type GoodGroupByOutputType = {
    id: number
    name: string
    level: number
    raceId: number | null
    tech: number
    type: number
    _count: GoodCountAggregateOutputType | null
    _avg: GoodAvgAggregateOutputType | null
    _sum: GoodSumAggregateOutputType | null
    _min: GoodMinAggregateOutputType | null
    _max: GoodMaxAggregateOutputType | null
  }

  type GetGoodGroupByPayload<T extends GoodGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GoodGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GoodGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GoodGroupByOutputType[P]>
            : GetScalarType<T[P], GoodGroupByOutputType[P]>
        }
      >
    >


  export type GoodSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    level?: boolean
    raceId?: boolean
    tech?: boolean
    type?: boolean
    race?: boolean | Good$raceArgs<ExtArgs>
    weapons?: boolean | Good$weaponsArgs<ExtArgs>
    ammunitions?: boolean | Good$ammunitionsArgs<ExtArgs>
    _count?: boolean | GoodCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["good"]>

  export type GoodSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    level?: boolean
    raceId?: boolean
    tech?: boolean
    type?: boolean
    race?: boolean | Good$raceArgs<ExtArgs>
  }, ExtArgs["result"]["good"]>

  export type GoodSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    level?: boolean
    raceId?: boolean
    tech?: boolean
    type?: boolean
    race?: boolean | Good$raceArgs<ExtArgs>
  }, ExtArgs["result"]["good"]>

  export type GoodSelectScalar = {
    id?: boolean
    name?: boolean
    level?: boolean
    raceId?: boolean
    tech?: boolean
    type?: boolean
  }

  export type GoodOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "level" | "raceId" | "tech" | "type", ExtArgs["result"]["good"]>
  export type GoodInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    race?: boolean | Good$raceArgs<ExtArgs>
    weapons?: boolean | Good$weaponsArgs<ExtArgs>
    ammunitions?: boolean | Good$ammunitionsArgs<ExtArgs>
    _count?: boolean | GoodCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GoodIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    race?: boolean | Good$raceArgs<ExtArgs>
  }
  export type GoodIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    race?: boolean | Good$raceArgs<ExtArgs>
  }

  export type $GoodPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Good"
    objects: {
      race: Prisma.$RacePayload<ExtArgs> | null
      weapons: Prisma.$WeaponPayload<ExtArgs>[]
      ammunitions: Prisma.$WeaponPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      level: number
      raceId: number | null
      tech: number
      type: number
    }, ExtArgs["result"]["good"]>
    composites: {}
  }

  type GoodGetPayload<S extends boolean | null | undefined | GoodDefaultArgs> = $Result.GetResult<Prisma.$GoodPayload, S>

  type GoodCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GoodFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GoodCountAggregateInputType | true
    }

  export interface GoodDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Good'], meta: { name: 'Good' } }
    /**
     * Find zero or one Good that matches the filter.
     * @param {GoodFindUniqueArgs} args - Arguments to find a Good
     * @example
     * // Get one Good
     * const good = await prisma.good.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GoodFindUniqueArgs>(args: SelectSubset<T, GoodFindUniqueArgs<ExtArgs>>): Prisma__GoodClient<$Result.GetResult<Prisma.$GoodPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Good that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GoodFindUniqueOrThrowArgs} args - Arguments to find a Good
     * @example
     * // Get one Good
     * const good = await prisma.good.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GoodFindUniqueOrThrowArgs>(args: SelectSubset<T, GoodFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GoodClient<$Result.GetResult<Prisma.$GoodPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Good that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoodFindFirstArgs} args - Arguments to find a Good
     * @example
     * // Get one Good
     * const good = await prisma.good.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GoodFindFirstArgs>(args?: SelectSubset<T, GoodFindFirstArgs<ExtArgs>>): Prisma__GoodClient<$Result.GetResult<Prisma.$GoodPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Good that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoodFindFirstOrThrowArgs} args - Arguments to find a Good
     * @example
     * // Get one Good
     * const good = await prisma.good.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GoodFindFirstOrThrowArgs>(args?: SelectSubset<T, GoodFindFirstOrThrowArgs<ExtArgs>>): Prisma__GoodClient<$Result.GetResult<Prisma.$GoodPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Goods that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoodFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Goods
     * const goods = await prisma.good.findMany()
     * 
     * // Get first 10 Goods
     * const goods = await prisma.good.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const goodWithIdOnly = await prisma.good.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GoodFindManyArgs>(args?: SelectSubset<T, GoodFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoodPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Good.
     * @param {GoodCreateArgs} args - Arguments to create a Good.
     * @example
     * // Create one Good
     * const Good = await prisma.good.create({
     *   data: {
     *     // ... data to create a Good
     *   }
     * })
     * 
     */
    create<T extends GoodCreateArgs>(args: SelectSubset<T, GoodCreateArgs<ExtArgs>>): Prisma__GoodClient<$Result.GetResult<Prisma.$GoodPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Goods.
     * @param {GoodCreateManyArgs} args - Arguments to create many Goods.
     * @example
     * // Create many Goods
     * const good = await prisma.good.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GoodCreateManyArgs>(args?: SelectSubset<T, GoodCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Goods and returns the data saved in the database.
     * @param {GoodCreateManyAndReturnArgs} args - Arguments to create many Goods.
     * @example
     * // Create many Goods
     * const good = await prisma.good.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Goods and only return the `id`
     * const goodWithIdOnly = await prisma.good.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GoodCreateManyAndReturnArgs>(args?: SelectSubset<T, GoodCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoodPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Good.
     * @param {GoodDeleteArgs} args - Arguments to delete one Good.
     * @example
     * // Delete one Good
     * const Good = await prisma.good.delete({
     *   where: {
     *     // ... filter to delete one Good
     *   }
     * })
     * 
     */
    delete<T extends GoodDeleteArgs>(args: SelectSubset<T, GoodDeleteArgs<ExtArgs>>): Prisma__GoodClient<$Result.GetResult<Prisma.$GoodPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Good.
     * @param {GoodUpdateArgs} args - Arguments to update one Good.
     * @example
     * // Update one Good
     * const good = await prisma.good.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GoodUpdateArgs>(args: SelectSubset<T, GoodUpdateArgs<ExtArgs>>): Prisma__GoodClient<$Result.GetResult<Prisma.$GoodPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Goods.
     * @param {GoodDeleteManyArgs} args - Arguments to filter Goods to delete.
     * @example
     * // Delete a few Goods
     * const { count } = await prisma.good.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GoodDeleteManyArgs>(args?: SelectSubset<T, GoodDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Goods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoodUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Goods
     * const good = await prisma.good.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GoodUpdateManyArgs>(args: SelectSubset<T, GoodUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Goods and returns the data updated in the database.
     * @param {GoodUpdateManyAndReturnArgs} args - Arguments to update many Goods.
     * @example
     * // Update many Goods
     * const good = await prisma.good.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Goods and only return the `id`
     * const goodWithIdOnly = await prisma.good.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GoodUpdateManyAndReturnArgs>(args: SelectSubset<T, GoodUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoodPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Good.
     * @param {GoodUpsertArgs} args - Arguments to update or create a Good.
     * @example
     * // Update or create a Good
     * const good = await prisma.good.upsert({
     *   create: {
     *     // ... data to create a Good
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Good we want to update
     *   }
     * })
     */
    upsert<T extends GoodUpsertArgs>(args: SelectSubset<T, GoodUpsertArgs<ExtArgs>>): Prisma__GoodClient<$Result.GetResult<Prisma.$GoodPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Goods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoodCountArgs} args - Arguments to filter Goods to count.
     * @example
     * // Count the number of Goods
     * const count = await prisma.good.count({
     *   where: {
     *     // ... the filter for the Goods we want to count
     *   }
     * })
    **/
    count<T extends GoodCountArgs>(
      args?: Subset<T, GoodCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GoodCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Good.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoodAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GoodAggregateArgs>(args: Subset<T, GoodAggregateArgs>): Prisma.PrismaPromise<GetGoodAggregateType<T>>

    /**
     * Group by Good.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoodGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GoodGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GoodGroupByArgs['orderBy'] }
        : { orderBy?: GoodGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GoodGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGoodGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Good model
   */
  readonly fields: GoodFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Good.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GoodClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    race<T extends Good$raceArgs<ExtArgs> = {}>(args?: Subset<T, Good$raceArgs<ExtArgs>>): Prisma__RaceClient<$Result.GetResult<Prisma.$RacePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    weapons<T extends Good$weaponsArgs<ExtArgs> = {}>(args?: Subset<T, Good$weaponsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WeaponPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ammunitions<T extends Good$ammunitionsArgs<ExtArgs> = {}>(args?: Subset<T, Good$ammunitionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WeaponPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Good model
   */
  interface GoodFieldRefs {
    readonly id: FieldRef<"Good", 'Int'>
    readonly name: FieldRef<"Good", 'String'>
    readonly level: FieldRef<"Good", 'Int'>
    readonly raceId: FieldRef<"Good", 'Int'>
    readonly tech: FieldRef<"Good", 'Int'>
    readonly type: FieldRef<"Good", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Good findUnique
   */
  export type GoodFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Good
     */
    select?: GoodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Good
     */
    omit?: GoodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoodInclude<ExtArgs> | null
    /**
     * Filter, which Good to fetch.
     */
    where: GoodWhereUniqueInput
  }

  /**
   * Good findUniqueOrThrow
   */
  export type GoodFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Good
     */
    select?: GoodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Good
     */
    omit?: GoodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoodInclude<ExtArgs> | null
    /**
     * Filter, which Good to fetch.
     */
    where: GoodWhereUniqueInput
  }

  /**
   * Good findFirst
   */
  export type GoodFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Good
     */
    select?: GoodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Good
     */
    omit?: GoodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoodInclude<ExtArgs> | null
    /**
     * Filter, which Good to fetch.
     */
    where?: GoodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Goods to fetch.
     */
    orderBy?: GoodOrderByWithRelationInput | GoodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Goods.
     */
    cursor?: GoodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Goods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Goods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Goods.
     */
    distinct?: GoodScalarFieldEnum | GoodScalarFieldEnum[]
  }

  /**
   * Good findFirstOrThrow
   */
  export type GoodFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Good
     */
    select?: GoodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Good
     */
    omit?: GoodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoodInclude<ExtArgs> | null
    /**
     * Filter, which Good to fetch.
     */
    where?: GoodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Goods to fetch.
     */
    orderBy?: GoodOrderByWithRelationInput | GoodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Goods.
     */
    cursor?: GoodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Goods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Goods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Goods.
     */
    distinct?: GoodScalarFieldEnum | GoodScalarFieldEnum[]
  }

  /**
   * Good findMany
   */
  export type GoodFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Good
     */
    select?: GoodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Good
     */
    omit?: GoodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoodInclude<ExtArgs> | null
    /**
     * Filter, which Goods to fetch.
     */
    where?: GoodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Goods to fetch.
     */
    orderBy?: GoodOrderByWithRelationInput | GoodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Goods.
     */
    cursor?: GoodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Goods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Goods.
     */
    skip?: number
    distinct?: GoodScalarFieldEnum | GoodScalarFieldEnum[]
  }

  /**
   * Good create
   */
  export type GoodCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Good
     */
    select?: GoodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Good
     */
    omit?: GoodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoodInclude<ExtArgs> | null
    /**
     * The data needed to create a Good.
     */
    data: XOR<GoodCreateInput, GoodUncheckedCreateInput>
  }

  /**
   * Good createMany
   */
  export type GoodCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Goods.
     */
    data: GoodCreateManyInput | GoodCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Good createManyAndReturn
   */
  export type GoodCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Good
     */
    select?: GoodSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Good
     */
    omit?: GoodOmit<ExtArgs> | null
    /**
     * The data used to create many Goods.
     */
    data: GoodCreateManyInput | GoodCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoodIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Good update
   */
  export type GoodUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Good
     */
    select?: GoodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Good
     */
    omit?: GoodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoodInclude<ExtArgs> | null
    /**
     * The data needed to update a Good.
     */
    data: XOR<GoodUpdateInput, GoodUncheckedUpdateInput>
    /**
     * Choose, which Good to update.
     */
    where: GoodWhereUniqueInput
  }

  /**
   * Good updateMany
   */
  export type GoodUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Goods.
     */
    data: XOR<GoodUpdateManyMutationInput, GoodUncheckedUpdateManyInput>
    /**
     * Filter which Goods to update
     */
    where?: GoodWhereInput
    /**
     * Limit how many Goods to update.
     */
    limit?: number
  }

  /**
   * Good updateManyAndReturn
   */
  export type GoodUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Good
     */
    select?: GoodSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Good
     */
    omit?: GoodOmit<ExtArgs> | null
    /**
     * The data used to update Goods.
     */
    data: XOR<GoodUpdateManyMutationInput, GoodUncheckedUpdateManyInput>
    /**
     * Filter which Goods to update
     */
    where?: GoodWhereInput
    /**
     * Limit how many Goods to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoodIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Good upsert
   */
  export type GoodUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Good
     */
    select?: GoodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Good
     */
    omit?: GoodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoodInclude<ExtArgs> | null
    /**
     * The filter to search for the Good to update in case it exists.
     */
    where: GoodWhereUniqueInput
    /**
     * In case the Good found by the `where` argument doesn't exist, create a new Good with this data.
     */
    create: XOR<GoodCreateInput, GoodUncheckedCreateInput>
    /**
     * In case the Good was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GoodUpdateInput, GoodUncheckedUpdateInput>
  }

  /**
   * Good delete
   */
  export type GoodDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Good
     */
    select?: GoodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Good
     */
    omit?: GoodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoodInclude<ExtArgs> | null
    /**
     * Filter which Good to delete.
     */
    where: GoodWhereUniqueInput
  }

  /**
   * Good deleteMany
   */
  export type GoodDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Goods to delete
     */
    where?: GoodWhereInput
    /**
     * Limit how many Goods to delete.
     */
    limit?: number
  }

  /**
   * Good.race
   */
  export type Good$raceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Race
     */
    select?: RaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Race
     */
    omit?: RaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RaceInclude<ExtArgs> | null
    where?: RaceWhereInput
  }

  /**
   * Good.weapons
   */
  export type Good$weaponsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Weapon
     */
    select?: WeaponSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Weapon
     */
    omit?: WeaponOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeaponInclude<ExtArgs> | null
    where?: WeaponWhereInput
    orderBy?: WeaponOrderByWithRelationInput | WeaponOrderByWithRelationInput[]
    cursor?: WeaponWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WeaponScalarFieldEnum | WeaponScalarFieldEnum[]
  }

  /**
   * Good.ammunitions
   */
  export type Good$ammunitionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Weapon
     */
    select?: WeaponSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Weapon
     */
    omit?: WeaponOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeaponInclude<ExtArgs> | null
    where?: WeaponWhereInput
    orderBy?: WeaponOrderByWithRelationInput | WeaponOrderByWithRelationInput[]
    cursor?: WeaponWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WeaponScalarFieldEnum | WeaponScalarFieldEnum[]
  }

  /**
   * Good without action
   */
  export type GoodDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Good
     */
    select?: GoodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Good
     */
    omit?: GoodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoodInclude<ExtArgs> | null
  }


  /**
   * Model Ship
   */

  export type AggregateShip = {
    _count: ShipCountAggregateOutputType | null
    _avg: ShipAvgAggregateOutputType | null
    _sum: ShipSumAggregateOutputType | null
    _min: ShipMinAggregateOutputType | null
    _max: ShipMaxAggregateOutputType | null
  }

  export type ShipAvgAggregateOutputType = {
    id: number | null
    raceId: number | null
    rankId: number | null
    cargoSpace: number | null
    shields: number | null
    armor: number | null
    accel: number | null
    cost: number | null
    weaponsSlots: number | null
    shieldsSlots: number | null
    recharge: number | null
  }

  export type ShipSumAggregateOutputType = {
    id: number | null
    raceId: number | null
    rankId: number | null
    cargoSpace: number | null
    shields: number | null
    armor: number | null
    accel: number | null
    cost: number | null
    weaponsSlots: number | null
    shieldsSlots: number | null
    recharge: number | null
  }

  export type ShipMinAggregateOutputType = {
    id: number | null
    name: string | null
    raceId: number | null
    rankId: number | null
    cargoSpace: number | null
    shields: number | null
    armor: number | null
    accel: number | null
    cost: number | null
    weaponsSlots: number | null
    shieldsSlots: number | null
    recharge: number | null
  }

  export type ShipMaxAggregateOutputType = {
    id: number | null
    name: string | null
    raceId: number | null
    rankId: number | null
    cargoSpace: number | null
    shields: number | null
    armor: number | null
    accel: number | null
    cost: number | null
    weaponsSlots: number | null
    shieldsSlots: number | null
    recharge: number | null
  }

  export type ShipCountAggregateOutputType = {
    id: number
    name: number
    raceId: number
    rankId: number
    cargoSpace: number
    shields: number
    armor: number
    accel: number
    cost: number
    weaponsSlots: number
    shieldsSlots: number
    recharge: number
    _all: number
  }


  export type ShipAvgAggregateInputType = {
    id?: true
    raceId?: true
    rankId?: true
    cargoSpace?: true
    shields?: true
    armor?: true
    accel?: true
    cost?: true
    weaponsSlots?: true
    shieldsSlots?: true
    recharge?: true
  }

  export type ShipSumAggregateInputType = {
    id?: true
    raceId?: true
    rankId?: true
    cargoSpace?: true
    shields?: true
    armor?: true
    accel?: true
    cost?: true
    weaponsSlots?: true
    shieldsSlots?: true
    recharge?: true
  }

  export type ShipMinAggregateInputType = {
    id?: true
    name?: true
    raceId?: true
    rankId?: true
    cargoSpace?: true
    shields?: true
    armor?: true
    accel?: true
    cost?: true
    weaponsSlots?: true
    shieldsSlots?: true
    recharge?: true
  }

  export type ShipMaxAggregateInputType = {
    id?: true
    name?: true
    raceId?: true
    rankId?: true
    cargoSpace?: true
    shields?: true
    armor?: true
    accel?: true
    cost?: true
    weaponsSlots?: true
    shieldsSlots?: true
    recharge?: true
  }

  export type ShipCountAggregateInputType = {
    id?: true
    name?: true
    raceId?: true
    rankId?: true
    cargoSpace?: true
    shields?: true
    armor?: true
    accel?: true
    cost?: true
    weaponsSlots?: true
    shieldsSlots?: true
    recharge?: true
    _all?: true
  }

  export type ShipAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ship to aggregate.
     */
    where?: ShipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ships to fetch.
     */
    orderBy?: ShipOrderByWithRelationInput | ShipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ShipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ships
    **/
    _count?: true | ShipCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShipAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShipSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShipMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShipMaxAggregateInputType
  }

  export type GetShipAggregateType<T extends ShipAggregateArgs> = {
        [P in keyof T & keyof AggregateShip]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShip[P]>
      : GetScalarType<T[P], AggregateShip[P]>
  }




  export type ShipGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShipWhereInput
    orderBy?: ShipOrderByWithAggregationInput | ShipOrderByWithAggregationInput[]
    by: ShipScalarFieldEnum[] | ShipScalarFieldEnum
    having?: ShipScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShipCountAggregateInputType | true
    _avg?: ShipAvgAggregateInputType
    _sum?: ShipSumAggregateInputType
    _min?: ShipMinAggregateInputType
    _max?: ShipMaxAggregateInputType
  }

  export type ShipGroupByOutputType = {
    id: number
    name: string | null
    raceId: number
    rankId: number
    cargoSpace: number
    shields: number
    armor: number
    accel: number
    cost: number
    weaponsSlots: number
    shieldsSlots: number
    recharge: number
    _count: ShipCountAggregateOutputType | null
    _avg: ShipAvgAggregateOutputType | null
    _sum: ShipSumAggregateOutputType | null
    _min: ShipMinAggregateOutputType | null
    _max: ShipMaxAggregateOutputType | null
  }

  type GetShipGroupByPayload<T extends ShipGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ShipGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShipGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShipGroupByOutputType[P]>
            : GetScalarType<T[P], ShipGroupByOutputType[P]>
        }
      >
    >


  export type ShipSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    raceId?: boolean
    rankId?: boolean
    cargoSpace?: boolean
    shields?: boolean
    armor?: boolean
    accel?: boolean
    cost?: boolean
    weaponsSlots?: boolean
    shieldsSlots?: boolean
    recharge?: boolean
    race?: boolean | RaceDefaultArgs<ExtArgs>
    rank?: boolean | RankDefaultArgs<ExtArgs>
    players?: boolean | Ship$playersArgs<ExtArgs>
    _count?: boolean | ShipCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ship"]>

  export type ShipSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    raceId?: boolean
    rankId?: boolean
    cargoSpace?: boolean
    shields?: boolean
    armor?: boolean
    accel?: boolean
    cost?: boolean
    weaponsSlots?: boolean
    shieldsSlots?: boolean
    recharge?: boolean
    race?: boolean | RaceDefaultArgs<ExtArgs>
    rank?: boolean | RankDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ship"]>

  export type ShipSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    raceId?: boolean
    rankId?: boolean
    cargoSpace?: boolean
    shields?: boolean
    armor?: boolean
    accel?: boolean
    cost?: boolean
    weaponsSlots?: boolean
    shieldsSlots?: boolean
    recharge?: boolean
    race?: boolean | RaceDefaultArgs<ExtArgs>
    rank?: boolean | RankDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ship"]>

  export type ShipSelectScalar = {
    id?: boolean
    name?: boolean
    raceId?: boolean
    rankId?: boolean
    cargoSpace?: boolean
    shields?: boolean
    armor?: boolean
    accel?: boolean
    cost?: boolean
    weaponsSlots?: boolean
    shieldsSlots?: boolean
    recharge?: boolean
  }

  export type ShipOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "raceId" | "rankId" | "cargoSpace" | "shields" | "armor" | "accel" | "cost" | "weaponsSlots" | "shieldsSlots" | "recharge", ExtArgs["result"]["ship"]>
  export type ShipInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    race?: boolean | RaceDefaultArgs<ExtArgs>
    rank?: boolean | RankDefaultArgs<ExtArgs>
    players?: boolean | Ship$playersArgs<ExtArgs>
    _count?: boolean | ShipCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ShipIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    race?: boolean | RaceDefaultArgs<ExtArgs>
    rank?: boolean | RankDefaultArgs<ExtArgs>
  }
  export type ShipIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    race?: boolean | RaceDefaultArgs<ExtArgs>
    rank?: boolean | RankDefaultArgs<ExtArgs>
  }

  export type $ShipPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Ship"
    objects: {
      race: Prisma.$RacePayload<ExtArgs>
      rank: Prisma.$RankPayload<ExtArgs>
      players: Prisma.$PlayerPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string | null
      raceId: number
      rankId: number
      cargoSpace: number
      shields: number
      armor: number
      accel: number
      cost: number
      weaponsSlots: number
      shieldsSlots: number
      recharge: number
    }, ExtArgs["result"]["ship"]>
    composites: {}
  }

  type ShipGetPayload<S extends boolean | null | undefined | ShipDefaultArgs> = $Result.GetResult<Prisma.$ShipPayload, S>

  type ShipCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ShipFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ShipCountAggregateInputType | true
    }

  export interface ShipDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Ship'], meta: { name: 'Ship' } }
    /**
     * Find zero or one Ship that matches the filter.
     * @param {ShipFindUniqueArgs} args - Arguments to find a Ship
     * @example
     * // Get one Ship
     * const ship = await prisma.ship.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ShipFindUniqueArgs>(args: SelectSubset<T, ShipFindUniqueArgs<ExtArgs>>): Prisma__ShipClient<$Result.GetResult<Prisma.$ShipPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Ship that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ShipFindUniqueOrThrowArgs} args - Arguments to find a Ship
     * @example
     * // Get one Ship
     * const ship = await prisma.ship.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ShipFindUniqueOrThrowArgs>(args: SelectSubset<T, ShipFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ShipClient<$Result.GetResult<Prisma.$ShipPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ship that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShipFindFirstArgs} args - Arguments to find a Ship
     * @example
     * // Get one Ship
     * const ship = await prisma.ship.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ShipFindFirstArgs>(args?: SelectSubset<T, ShipFindFirstArgs<ExtArgs>>): Prisma__ShipClient<$Result.GetResult<Prisma.$ShipPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ship that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShipFindFirstOrThrowArgs} args - Arguments to find a Ship
     * @example
     * // Get one Ship
     * const ship = await prisma.ship.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ShipFindFirstOrThrowArgs>(args?: SelectSubset<T, ShipFindFirstOrThrowArgs<ExtArgs>>): Prisma__ShipClient<$Result.GetResult<Prisma.$ShipPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Ships that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShipFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ships
     * const ships = await prisma.ship.findMany()
     * 
     * // Get first 10 Ships
     * const ships = await prisma.ship.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shipWithIdOnly = await prisma.ship.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ShipFindManyArgs>(args?: SelectSubset<T, ShipFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShipPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Ship.
     * @param {ShipCreateArgs} args - Arguments to create a Ship.
     * @example
     * // Create one Ship
     * const Ship = await prisma.ship.create({
     *   data: {
     *     // ... data to create a Ship
     *   }
     * })
     * 
     */
    create<T extends ShipCreateArgs>(args: SelectSubset<T, ShipCreateArgs<ExtArgs>>): Prisma__ShipClient<$Result.GetResult<Prisma.$ShipPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Ships.
     * @param {ShipCreateManyArgs} args - Arguments to create many Ships.
     * @example
     * // Create many Ships
     * const ship = await prisma.ship.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ShipCreateManyArgs>(args?: SelectSubset<T, ShipCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Ships and returns the data saved in the database.
     * @param {ShipCreateManyAndReturnArgs} args - Arguments to create many Ships.
     * @example
     * // Create many Ships
     * const ship = await prisma.ship.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Ships and only return the `id`
     * const shipWithIdOnly = await prisma.ship.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ShipCreateManyAndReturnArgs>(args?: SelectSubset<T, ShipCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShipPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Ship.
     * @param {ShipDeleteArgs} args - Arguments to delete one Ship.
     * @example
     * // Delete one Ship
     * const Ship = await prisma.ship.delete({
     *   where: {
     *     // ... filter to delete one Ship
     *   }
     * })
     * 
     */
    delete<T extends ShipDeleteArgs>(args: SelectSubset<T, ShipDeleteArgs<ExtArgs>>): Prisma__ShipClient<$Result.GetResult<Prisma.$ShipPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Ship.
     * @param {ShipUpdateArgs} args - Arguments to update one Ship.
     * @example
     * // Update one Ship
     * const ship = await prisma.ship.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ShipUpdateArgs>(args: SelectSubset<T, ShipUpdateArgs<ExtArgs>>): Prisma__ShipClient<$Result.GetResult<Prisma.$ShipPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Ships.
     * @param {ShipDeleteManyArgs} args - Arguments to filter Ships to delete.
     * @example
     * // Delete a few Ships
     * const { count } = await prisma.ship.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ShipDeleteManyArgs>(args?: SelectSubset<T, ShipDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShipUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ships
     * const ship = await prisma.ship.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ShipUpdateManyArgs>(args: SelectSubset<T, ShipUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ships and returns the data updated in the database.
     * @param {ShipUpdateManyAndReturnArgs} args - Arguments to update many Ships.
     * @example
     * // Update many Ships
     * const ship = await prisma.ship.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Ships and only return the `id`
     * const shipWithIdOnly = await prisma.ship.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ShipUpdateManyAndReturnArgs>(args: SelectSubset<T, ShipUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShipPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Ship.
     * @param {ShipUpsertArgs} args - Arguments to update or create a Ship.
     * @example
     * // Update or create a Ship
     * const ship = await prisma.ship.upsert({
     *   create: {
     *     // ... data to create a Ship
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ship we want to update
     *   }
     * })
     */
    upsert<T extends ShipUpsertArgs>(args: SelectSubset<T, ShipUpsertArgs<ExtArgs>>): Prisma__ShipClient<$Result.GetResult<Prisma.$ShipPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Ships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShipCountArgs} args - Arguments to filter Ships to count.
     * @example
     * // Count the number of Ships
     * const count = await prisma.ship.count({
     *   where: {
     *     // ... the filter for the Ships we want to count
     *   }
     * })
    **/
    count<T extends ShipCountArgs>(
      args?: Subset<T, ShipCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShipCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ship.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShipAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShipAggregateArgs>(args: Subset<T, ShipAggregateArgs>): Prisma.PrismaPromise<GetShipAggregateType<T>>

    /**
     * Group by Ship.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShipGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShipGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShipGroupByArgs['orderBy'] }
        : { orderBy?: ShipGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShipGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShipGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Ship model
   */
  readonly fields: ShipFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Ship.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ShipClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    race<T extends RaceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RaceDefaultArgs<ExtArgs>>): Prisma__RaceClient<$Result.GetResult<Prisma.$RacePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    rank<T extends RankDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RankDefaultArgs<ExtArgs>>): Prisma__RankClient<$Result.GetResult<Prisma.$RankPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    players<T extends Ship$playersArgs<ExtArgs> = {}>(args?: Subset<T, Ship$playersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Ship model
   */
  interface ShipFieldRefs {
    readonly id: FieldRef<"Ship", 'Int'>
    readonly name: FieldRef<"Ship", 'String'>
    readonly raceId: FieldRef<"Ship", 'Int'>
    readonly rankId: FieldRef<"Ship", 'Int'>
    readonly cargoSpace: FieldRef<"Ship", 'Int'>
    readonly shields: FieldRef<"Ship", 'Int'>
    readonly armor: FieldRef<"Ship", 'Int'>
    readonly accel: FieldRef<"Ship", 'Float'>
    readonly cost: FieldRef<"Ship", 'Int'>
    readonly weaponsSlots: FieldRef<"Ship", 'Int'>
    readonly shieldsSlots: FieldRef<"Ship", 'Int'>
    readonly recharge: FieldRef<"Ship", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Ship findUnique
   */
  export type ShipFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ship
     */
    select?: ShipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ship
     */
    omit?: ShipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShipInclude<ExtArgs> | null
    /**
     * Filter, which Ship to fetch.
     */
    where: ShipWhereUniqueInput
  }

  /**
   * Ship findUniqueOrThrow
   */
  export type ShipFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ship
     */
    select?: ShipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ship
     */
    omit?: ShipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShipInclude<ExtArgs> | null
    /**
     * Filter, which Ship to fetch.
     */
    where: ShipWhereUniqueInput
  }

  /**
   * Ship findFirst
   */
  export type ShipFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ship
     */
    select?: ShipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ship
     */
    omit?: ShipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShipInclude<ExtArgs> | null
    /**
     * Filter, which Ship to fetch.
     */
    where?: ShipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ships to fetch.
     */
    orderBy?: ShipOrderByWithRelationInput | ShipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ships.
     */
    cursor?: ShipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ships.
     */
    distinct?: ShipScalarFieldEnum | ShipScalarFieldEnum[]
  }

  /**
   * Ship findFirstOrThrow
   */
  export type ShipFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ship
     */
    select?: ShipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ship
     */
    omit?: ShipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShipInclude<ExtArgs> | null
    /**
     * Filter, which Ship to fetch.
     */
    where?: ShipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ships to fetch.
     */
    orderBy?: ShipOrderByWithRelationInput | ShipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ships.
     */
    cursor?: ShipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ships.
     */
    distinct?: ShipScalarFieldEnum | ShipScalarFieldEnum[]
  }

  /**
   * Ship findMany
   */
  export type ShipFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ship
     */
    select?: ShipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ship
     */
    omit?: ShipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShipInclude<ExtArgs> | null
    /**
     * Filter, which Ships to fetch.
     */
    where?: ShipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ships to fetch.
     */
    orderBy?: ShipOrderByWithRelationInput | ShipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ships.
     */
    cursor?: ShipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ships.
     */
    skip?: number
    distinct?: ShipScalarFieldEnum | ShipScalarFieldEnum[]
  }

  /**
   * Ship create
   */
  export type ShipCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ship
     */
    select?: ShipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ship
     */
    omit?: ShipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShipInclude<ExtArgs> | null
    /**
     * The data needed to create a Ship.
     */
    data: XOR<ShipCreateInput, ShipUncheckedCreateInput>
  }

  /**
   * Ship createMany
   */
  export type ShipCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Ships.
     */
    data: ShipCreateManyInput | ShipCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Ship createManyAndReturn
   */
  export type ShipCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ship
     */
    select?: ShipSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Ship
     */
    omit?: ShipOmit<ExtArgs> | null
    /**
     * The data used to create many Ships.
     */
    data: ShipCreateManyInput | ShipCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShipIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Ship update
   */
  export type ShipUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ship
     */
    select?: ShipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ship
     */
    omit?: ShipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShipInclude<ExtArgs> | null
    /**
     * The data needed to update a Ship.
     */
    data: XOR<ShipUpdateInput, ShipUncheckedUpdateInput>
    /**
     * Choose, which Ship to update.
     */
    where: ShipWhereUniqueInput
  }

  /**
   * Ship updateMany
   */
  export type ShipUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Ships.
     */
    data: XOR<ShipUpdateManyMutationInput, ShipUncheckedUpdateManyInput>
    /**
     * Filter which Ships to update
     */
    where?: ShipWhereInput
    /**
     * Limit how many Ships to update.
     */
    limit?: number
  }

  /**
   * Ship updateManyAndReturn
   */
  export type ShipUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ship
     */
    select?: ShipSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Ship
     */
    omit?: ShipOmit<ExtArgs> | null
    /**
     * The data used to update Ships.
     */
    data: XOR<ShipUpdateManyMutationInput, ShipUncheckedUpdateManyInput>
    /**
     * Filter which Ships to update
     */
    where?: ShipWhereInput
    /**
     * Limit how many Ships to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShipIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Ship upsert
   */
  export type ShipUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ship
     */
    select?: ShipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ship
     */
    omit?: ShipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShipInclude<ExtArgs> | null
    /**
     * The filter to search for the Ship to update in case it exists.
     */
    where: ShipWhereUniqueInput
    /**
     * In case the Ship found by the `where` argument doesn't exist, create a new Ship with this data.
     */
    create: XOR<ShipCreateInput, ShipUncheckedCreateInput>
    /**
     * In case the Ship was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ShipUpdateInput, ShipUncheckedUpdateInput>
  }

  /**
   * Ship delete
   */
  export type ShipDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ship
     */
    select?: ShipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ship
     */
    omit?: ShipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShipInclude<ExtArgs> | null
    /**
     * Filter which Ship to delete.
     */
    where: ShipWhereUniqueInput
  }

  /**
   * Ship deleteMany
   */
  export type ShipDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ships to delete
     */
    where?: ShipWhereInput
    /**
     * Limit how many Ships to delete.
     */
    limit?: number
  }

  /**
   * Ship.players
   */
  export type Ship$playersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    where?: PlayerWhereInput
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    cursor?: PlayerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlayerScalarFieldEnum | PlayerScalarFieldEnum[]
  }

  /**
   * Ship without action
   */
  export type ShipDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ship
     */
    select?: ShipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ship
     */
    omit?: ShipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShipInclude<ExtArgs> | null
  }


  /**
   * Model Weapon
   */

  export type AggregateWeapon = {
    _count: WeaponCountAggregateOutputType | null
    _avg: WeaponAvgAggregateOutputType | null
    _sum: WeaponSumAggregateOutputType | null
    _min: WeaponMinAggregateOutputType | null
    _max: WeaponMaxAggregateOutputType | null
  }

  export type WeaponAvgAggregateOutputType = {
    id: number | null
    goodId: number | null
    raceId: number | null
    racks: number | null
    stations: number | null
    accuracy: number | null
    volley: number | null
    ammunitionId: number | null
    generalDamage: number | null
    shieldDamage: number | null
    armorDamage: number | null
  }

  export type WeaponSumAggregateOutputType = {
    id: number | null
    goodId: number | null
    raceId: number | null
    racks: number | null
    stations: number | null
    accuracy: number | null
    volley: number | null
    ammunitionId: number | null
    generalDamage: number | null
    shieldDamage: number | null
    armorDamage: number | null
  }

  export type WeaponMinAggregateOutputType = {
    id: number | null
    name: string | null
    goodId: number | null
    raceId: number | null
    racks: number | null
    stations: number | null
    accuracy: number | null
    volley: number | null
    ammunitionId: number | null
    generalDamage: number | null
    shieldDamage: number | null
    armorDamage: number | null
  }

  export type WeaponMaxAggregateOutputType = {
    id: number | null
    name: string | null
    goodId: number | null
    raceId: number | null
    racks: number | null
    stations: number | null
    accuracy: number | null
    volley: number | null
    ammunitionId: number | null
    generalDamage: number | null
    shieldDamage: number | null
    armorDamage: number | null
  }

  export type WeaponCountAggregateOutputType = {
    id: number
    name: number
    goodId: number
    raceId: number
    racks: number
    stations: number
    accuracy: number
    volley: number
    ammunitionId: number
    generalDamage: number
    shieldDamage: number
    armorDamage: number
    _all: number
  }


  export type WeaponAvgAggregateInputType = {
    id?: true
    goodId?: true
    raceId?: true
    racks?: true
    stations?: true
    accuracy?: true
    volley?: true
    ammunitionId?: true
    generalDamage?: true
    shieldDamage?: true
    armorDamage?: true
  }

  export type WeaponSumAggregateInputType = {
    id?: true
    goodId?: true
    raceId?: true
    racks?: true
    stations?: true
    accuracy?: true
    volley?: true
    ammunitionId?: true
    generalDamage?: true
    shieldDamage?: true
    armorDamage?: true
  }

  export type WeaponMinAggregateInputType = {
    id?: true
    name?: true
    goodId?: true
    raceId?: true
    racks?: true
    stations?: true
    accuracy?: true
    volley?: true
    ammunitionId?: true
    generalDamage?: true
    shieldDamage?: true
    armorDamage?: true
  }

  export type WeaponMaxAggregateInputType = {
    id?: true
    name?: true
    goodId?: true
    raceId?: true
    racks?: true
    stations?: true
    accuracy?: true
    volley?: true
    ammunitionId?: true
    generalDamage?: true
    shieldDamage?: true
    armorDamage?: true
  }

  export type WeaponCountAggregateInputType = {
    id?: true
    name?: true
    goodId?: true
    raceId?: true
    racks?: true
    stations?: true
    accuracy?: true
    volley?: true
    ammunitionId?: true
    generalDamage?: true
    shieldDamage?: true
    armorDamage?: true
    _all?: true
  }

  export type WeaponAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Weapon to aggregate.
     */
    where?: WeaponWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Weapons to fetch.
     */
    orderBy?: WeaponOrderByWithRelationInput | WeaponOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WeaponWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Weapons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Weapons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Weapons
    **/
    _count?: true | WeaponCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WeaponAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WeaponSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WeaponMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WeaponMaxAggregateInputType
  }

  export type GetWeaponAggregateType<T extends WeaponAggregateArgs> = {
        [P in keyof T & keyof AggregateWeapon]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWeapon[P]>
      : GetScalarType<T[P], AggregateWeapon[P]>
  }




  export type WeaponGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WeaponWhereInput
    orderBy?: WeaponOrderByWithAggregationInput | WeaponOrderByWithAggregationInput[]
    by: WeaponScalarFieldEnum[] | WeaponScalarFieldEnum
    having?: WeaponScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WeaponCountAggregateInputType | true
    _avg?: WeaponAvgAggregateInputType
    _sum?: WeaponSumAggregateInputType
    _min?: WeaponMinAggregateInputType
    _max?: WeaponMaxAggregateInputType
  }

  export type WeaponGroupByOutputType = {
    id: number
    name: string
    goodId: number
    raceId: number | null
    racks: number
    stations: number
    accuracy: number
    volley: number
    ammunitionId: number | null
    generalDamage: number
    shieldDamage: number
    armorDamage: number
    _count: WeaponCountAggregateOutputType | null
    _avg: WeaponAvgAggregateOutputType | null
    _sum: WeaponSumAggregateOutputType | null
    _min: WeaponMinAggregateOutputType | null
    _max: WeaponMaxAggregateOutputType | null
  }

  type GetWeaponGroupByPayload<T extends WeaponGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WeaponGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WeaponGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WeaponGroupByOutputType[P]>
            : GetScalarType<T[P], WeaponGroupByOutputType[P]>
        }
      >
    >


  export type WeaponSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    goodId?: boolean
    raceId?: boolean
    racks?: boolean
    stations?: boolean
    accuracy?: boolean
    volley?: boolean
    ammunitionId?: boolean
    generalDamage?: boolean
    shieldDamage?: boolean
    armorDamage?: boolean
    good?: boolean | GoodDefaultArgs<ExtArgs>
    race?: boolean | Weapon$raceArgs<ExtArgs>
    ammunition?: boolean | Weapon$ammunitionArgs<ExtArgs>
  }, ExtArgs["result"]["weapon"]>

  export type WeaponSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    goodId?: boolean
    raceId?: boolean
    racks?: boolean
    stations?: boolean
    accuracy?: boolean
    volley?: boolean
    ammunitionId?: boolean
    generalDamage?: boolean
    shieldDamage?: boolean
    armorDamage?: boolean
    good?: boolean | GoodDefaultArgs<ExtArgs>
    race?: boolean | Weapon$raceArgs<ExtArgs>
    ammunition?: boolean | Weapon$ammunitionArgs<ExtArgs>
  }, ExtArgs["result"]["weapon"]>

  export type WeaponSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    goodId?: boolean
    raceId?: boolean
    racks?: boolean
    stations?: boolean
    accuracy?: boolean
    volley?: boolean
    ammunitionId?: boolean
    generalDamage?: boolean
    shieldDamage?: boolean
    armorDamage?: boolean
    good?: boolean | GoodDefaultArgs<ExtArgs>
    race?: boolean | Weapon$raceArgs<ExtArgs>
    ammunition?: boolean | Weapon$ammunitionArgs<ExtArgs>
  }, ExtArgs["result"]["weapon"]>

  export type WeaponSelectScalar = {
    id?: boolean
    name?: boolean
    goodId?: boolean
    raceId?: boolean
    racks?: boolean
    stations?: boolean
    accuracy?: boolean
    volley?: boolean
    ammunitionId?: boolean
    generalDamage?: boolean
    shieldDamage?: boolean
    armorDamage?: boolean
  }

  export type WeaponOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "goodId" | "raceId" | "racks" | "stations" | "accuracy" | "volley" | "ammunitionId" | "generalDamage" | "shieldDamage" | "armorDamage", ExtArgs["result"]["weapon"]>
  export type WeaponInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    good?: boolean | GoodDefaultArgs<ExtArgs>
    race?: boolean | Weapon$raceArgs<ExtArgs>
    ammunition?: boolean | Weapon$ammunitionArgs<ExtArgs>
  }
  export type WeaponIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    good?: boolean | GoodDefaultArgs<ExtArgs>
    race?: boolean | Weapon$raceArgs<ExtArgs>
    ammunition?: boolean | Weapon$ammunitionArgs<ExtArgs>
  }
  export type WeaponIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    good?: boolean | GoodDefaultArgs<ExtArgs>
    race?: boolean | Weapon$raceArgs<ExtArgs>
    ammunition?: boolean | Weapon$ammunitionArgs<ExtArgs>
  }

  export type $WeaponPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Weapon"
    objects: {
      good: Prisma.$GoodPayload<ExtArgs>
      race: Prisma.$RacePayload<ExtArgs> | null
      ammunition: Prisma.$GoodPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      goodId: number
      raceId: number | null
      racks: number
      stations: number
      accuracy: number
      volley: number
      ammunitionId: number | null
      generalDamage: number
      shieldDamage: number
      armorDamage: number
    }, ExtArgs["result"]["weapon"]>
    composites: {}
  }

  type WeaponGetPayload<S extends boolean | null | undefined | WeaponDefaultArgs> = $Result.GetResult<Prisma.$WeaponPayload, S>

  type WeaponCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WeaponFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WeaponCountAggregateInputType | true
    }

  export interface WeaponDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Weapon'], meta: { name: 'Weapon' } }
    /**
     * Find zero or one Weapon that matches the filter.
     * @param {WeaponFindUniqueArgs} args - Arguments to find a Weapon
     * @example
     * // Get one Weapon
     * const weapon = await prisma.weapon.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WeaponFindUniqueArgs>(args: SelectSubset<T, WeaponFindUniqueArgs<ExtArgs>>): Prisma__WeaponClient<$Result.GetResult<Prisma.$WeaponPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Weapon that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WeaponFindUniqueOrThrowArgs} args - Arguments to find a Weapon
     * @example
     * // Get one Weapon
     * const weapon = await prisma.weapon.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WeaponFindUniqueOrThrowArgs>(args: SelectSubset<T, WeaponFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WeaponClient<$Result.GetResult<Prisma.$WeaponPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Weapon that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeaponFindFirstArgs} args - Arguments to find a Weapon
     * @example
     * // Get one Weapon
     * const weapon = await prisma.weapon.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WeaponFindFirstArgs>(args?: SelectSubset<T, WeaponFindFirstArgs<ExtArgs>>): Prisma__WeaponClient<$Result.GetResult<Prisma.$WeaponPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Weapon that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeaponFindFirstOrThrowArgs} args - Arguments to find a Weapon
     * @example
     * // Get one Weapon
     * const weapon = await prisma.weapon.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WeaponFindFirstOrThrowArgs>(args?: SelectSubset<T, WeaponFindFirstOrThrowArgs<ExtArgs>>): Prisma__WeaponClient<$Result.GetResult<Prisma.$WeaponPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Weapons that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeaponFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Weapons
     * const weapons = await prisma.weapon.findMany()
     * 
     * // Get first 10 Weapons
     * const weapons = await prisma.weapon.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const weaponWithIdOnly = await prisma.weapon.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WeaponFindManyArgs>(args?: SelectSubset<T, WeaponFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WeaponPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Weapon.
     * @param {WeaponCreateArgs} args - Arguments to create a Weapon.
     * @example
     * // Create one Weapon
     * const Weapon = await prisma.weapon.create({
     *   data: {
     *     // ... data to create a Weapon
     *   }
     * })
     * 
     */
    create<T extends WeaponCreateArgs>(args: SelectSubset<T, WeaponCreateArgs<ExtArgs>>): Prisma__WeaponClient<$Result.GetResult<Prisma.$WeaponPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Weapons.
     * @param {WeaponCreateManyArgs} args - Arguments to create many Weapons.
     * @example
     * // Create many Weapons
     * const weapon = await prisma.weapon.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WeaponCreateManyArgs>(args?: SelectSubset<T, WeaponCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Weapons and returns the data saved in the database.
     * @param {WeaponCreateManyAndReturnArgs} args - Arguments to create many Weapons.
     * @example
     * // Create many Weapons
     * const weapon = await prisma.weapon.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Weapons and only return the `id`
     * const weaponWithIdOnly = await prisma.weapon.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WeaponCreateManyAndReturnArgs>(args?: SelectSubset<T, WeaponCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WeaponPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Weapon.
     * @param {WeaponDeleteArgs} args - Arguments to delete one Weapon.
     * @example
     * // Delete one Weapon
     * const Weapon = await prisma.weapon.delete({
     *   where: {
     *     // ... filter to delete one Weapon
     *   }
     * })
     * 
     */
    delete<T extends WeaponDeleteArgs>(args: SelectSubset<T, WeaponDeleteArgs<ExtArgs>>): Prisma__WeaponClient<$Result.GetResult<Prisma.$WeaponPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Weapon.
     * @param {WeaponUpdateArgs} args - Arguments to update one Weapon.
     * @example
     * // Update one Weapon
     * const weapon = await prisma.weapon.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WeaponUpdateArgs>(args: SelectSubset<T, WeaponUpdateArgs<ExtArgs>>): Prisma__WeaponClient<$Result.GetResult<Prisma.$WeaponPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Weapons.
     * @param {WeaponDeleteManyArgs} args - Arguments to filter Weapons to delete.
     * @example
     * // Delete a few Weapons
     * const { count } = await prisma.weapon.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WeaponDeleteManyArgs>(args?: SelectSubset<T, WeaponDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Weapons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeaponUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Weapons
     * const weapon = await prisma.weapon.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WeaponUpdateManyArgs>(args: SelectSubset<T, WeaponUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Weapons and returns the data updated in the database.
     * @param {WeaponUpdateManyAndReturnArgs} args - Arguments to update many Weapons.
     * @example
     * // Update many Weapons
     * const weapon = await prisma.weapon.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Weapons and only return the `id`
     * const weaponWithIdOnly = await prisma.weapon.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WeaponUpdateManyAndReturnArgs>(args: SelectSubset<T, WeaponUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WeaponPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Weapon.
     * @param {WeaponUpsertArgs} args - Arguments to update or create a Weapon.
     * @example
     * // Update or create a Weapon
     * const weapon = await prisma.weapon.upsert({
     *   create: {
     *     // ... data to create a Weapon
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Weapon we want to update
     *   }
     * })
     */
    upsert<T extends WeaponUpsertArgs>(args: SelectSubset<T, WeaponUpsertArgs<ExtArgs>>): Prisma__WeaponClient<$Result.GetResult<Prisma.$WeaponPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Weapons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeaponCountArgs} args - Arguments to filter Weapons to count.
     * @example
     * // Count the number of Weapons
     * const count = await prisma.weapon.count({
     *   where: {
     *     // ... the filter for the Weapons we want to count
     *   }
     * })
    **/
    count<T extends WeaponCountArgs>(
      args?: Subset<T, WeaponCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WeaponCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Weapon.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeaponAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WeaponAggregateArgs>(args: Subset<T, WeaponAggregateArgs>): Prisma.PrismaPromise<GetWeaponAggregateType<T>>

    /**
     * Group by Weapon.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeaponGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WeaponGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WeaponGroupByArgs['orderBy'] }
        : { orderBy?: WeaponGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WeaponGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWeaponGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Weapon model
   */
  readonly fields: WeaponFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Weapon.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WeaponClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    good<T extends GoodDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GoodDefaultArgs<ExtArgs>>): Prisma__GoodClient<$Result.GetResult<Prisma.$GoodPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    race<T extends Weapon$raceArgs<ExtArgs> = {}>(args?: Subset<T, Weapon$raceArgs<ExtArgs>>): Prisma__RaceClient<$Result.GetResult<Prisma.$RacePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    ammunition<T extends Weapon$ammunitionArgs<ExtArgs> = {}>(args?: Subset<T, Weapon$ammunitionArgs<ExtArgs>>): Prisma__GoodClient<$Result.GetResult<Prisma.$GoodPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Weapon model
   */
  interface WeaponFieldRefs {
    readonly id: FieldRef<"Weapon", 'Int'>
    readonly name: FieldRef<"Weapon", 'String'>
    readonly goodId: FieldRef<"Weapon", 'Int'>
    readonly raceId: FieldRef<"Weapon", 'Int'>
    readonly racks: FieldRef<"Weapon", 'Int'>
    readonly stations: FieldRef<"Weapon", 'Int'>
    readonly accuracy: FieldRef<"Weapon", 'Float'>
    readonly volley: FieldRef<"Weapon", 'Int'>
    readonly ammunitionId: FieldRef<"Weapon", 'Int'>
    readonly generalDamage: FieldRef<"Weapon", 'Int'>
    readonly shieldDamage: FieldRef<"Weapon", 'Int'>
    readonly armorDamage: FieldRef<"Weapon", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Weapon findUnique
   */
  export type WeaponFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Weapon
     */
    select?: WeaponSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Weapon
     */
    omit?: WeaponOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeaponInclude<ExtArgs> | null
    /**
     * Filter, which Weapon to fetch.
     */
    where: WeaponWhereUniqueInput
  }

  /**
   * Weapon findUniqueOrThrow
   */
  export type WeaponFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Weapon
     */
    select?: WeaponSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Weapon
     */
    omit?: WeaponOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeaponInclude<ExtArgs> | null
    /**
     * Filter, which Weapon to fetch.
     */
    where: WeaponWhereUniqueInput
  }

  /**
   * Weapon findFirst
   */
  export type WeaponFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Weapon
     */
    select?: WeaponSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Weapon
     */
    omit?: WeaponOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeaponInclude<ExtArgs> | null
    /**
     * Filter, which Weapon to fetch.
     */
    where?: WeaponWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Weapons to fetch.
     */
    orderBy?: WeaponOrderByWithRelationInput | WeaponOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Weapons.
     */
    cursor?: WeaponWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Weapons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Weapons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Weapons.
     */
    distinct?: WeaponScalarFieldEnum | WeaponScalarFieldEnum[]
  }

  /**
   * Weapon findFirstOrThrow
   */
  export type WeaponFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Weapon
     */
    select?: WeaponSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Weapon
     */
    omit?: WeaponOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeaponInclude<ExtArgs> | null
    /**
     * Filter, which Weapon to fetch.
     */
    where?: WeaponWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Weapons to fetch.
     */
    orderBy?: WeaponOrderByWithRelationInput | WeaponOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Weapons.
     */
    cursor?: WeaponWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Weapons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Weapons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Weapons.
     */
    distinct?: WeaponScalarFieldEnum | WeaponScalarFieldEnum[]
  }

  /**
   * Weapon findMany
   */
  export type WeaponFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Weapon
     */
    select?: WeaponSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Weapon
     */
    omit?: WeaponOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeaponInclude<ExtArgs> | null
    /**
     * Filter, which Weapons to fetch.
     */
    where?: WeaponWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Weapons to fetch.
     */
    orderBy?: WeaponOrderByWithRelationInput | WeaponOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Weapons.
     */
    cursor?: WeaponWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Weapons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Weapons.
     */
    skip?: number
    distinct?: WeaponScalarFieldEnum | WeaponScalarFieldEnum[]
  }

  /**
   * Weapon create
   */
  export type WeaponCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Weapon
     */
    select?: WeaponSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Weapon
     */
    omit?: WeaponOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeaponInclude<ExtArgs> | null
    /**
     * The data needed to create a Weapon.
     */
    data: XOR<WeaponCreateInput, WeaponUncheckedCreateInput>
  }

  /**
   * Weapon createMany
   */
  export type WeaponCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Weapons.
     */
    data: WeaponCreateManyInput | WeaponCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Weapon createManyAndReturn
   */
  export type WeaponCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Weapon
     */
    select?: WeaponSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Weapon
     */
    omit?: WeaponOmit<ExtArgs> | null
    /**
     * The data used to create many Weapons.
     */
    data: WeaponCreateManyInput | WeaponCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeaponIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Weapon update
   */
  export type WeaponUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Weapon
     */
    select?: WeaponSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Weapon
     */
    omit?: WeaponOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeaponInclude<ExtArgs> | null
    /**
     * The data needed to update a Weapon.
     */
    data: XOR<WeaponUpdateInput, WeaponUncheckedUpdateInput>
    /**
     * Choose, which Weapon to update.
     */
    where: WeaponWhereUniqueInput
  }

  /**
   * Weapon updateMany
   */
  export type WeaponUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Weapons.
     */
    data: XOR<WeaponUpdateManyMutationInput, WeaponUncheckedUpdateManyInput>
    /**
     * Filter which Weapons to update
     */
    where?: WeaponWhereInput
    /**
     * Limit how many Weapons to update.
     */
    limit?: number
  }

  /**
   * Weapon updateManyAndReturn
   */
  export type WeaponUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Weapon
     */
    select?: WeaponSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Weapon
     */
    omit?: WeaponOmit<ExtArgs> | null
    /**
     * The data used to update Weapons.
     */
    data: XOR<WeaponUpdateManyMutationInput, WeaponUncheckedUpdateManyInput>
    /**
     * Filter which Weapons to update
     */
    where?: WeaponWhereInput
    /**
     * Limit how many Weapons to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeaponIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Weapon upsert
   */
  export type WeaponUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Weapon
     */
    select?: WeaponSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Weapon
     */
    omit?: WeaponOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeaponInclude<ExtArgs> | null
    /**
     * The filter to search for the Weapon to update in case it exists.
     */
    where: WeaponWhereUniqueInput
    /**
     * In case the Weapon found by the `where` argument doesn't exist, create a new Weapon with this data.
     */
    create: XOR<WeaponCreateInput, WeaponUncheckedCreateInput>
    /**
     * In case the Weapon was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WeaponUpdateInput, WeaponUncheckedUpdateInput>
  }

  /**
   * Weapon delete
   */
  export type WeaponDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Weapon
     */
    select?: WeaponSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Weapon
     */
    omit?: WeaponOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeaponInclude<ExtArgs> | null
    /**
     * Filter which Weapon to delete.
     */
    where: WeaponWhereUniqueInput
  }

  /**
   * Weapon deleteMany
   */
  export type WeaponDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Weapons to delete
     */
    where?: WeaponWhereInput
    /**
     * Limit how many Weapons to delete.
     */
    limit?: number
  }

  /**
   * Weapon.race
   */
  export type Weapon$raceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Race
     */
    select?: RaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Race
     */
    omit?: RaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RaceInclude<ExtArgs> | null
    where?: RaceWhereInput
  }

  /**
   * Weapon.ammunition
   */
  export type Weapon$ammunitionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Good
     */
    select?: GoodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Good
     */
    omit?: GoodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoodInclude<ExtArgs> | null
    where?: GoodWhereInput
  }

  /**
   * Weapon without action
   */
  export type WeaponDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Weapon
     */
    select?: WeaponSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Weapon
     */
    omit?: WeaponOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WeaponInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    password: 'password',
    admin: 'admin'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const PlayerScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    race: 'race',
    credits: 'credits',
    shipId: 'shipId',
    currentSystemId: 'currentSystemId'
  };

  export type PlayerScalarFieldEnum = (typeof PlayerScalarFieldEnum)[keyof typeof PlayerScalarFieldEnum]


  export const RaceScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type RaceScalarFieldEnum = (typeof RaceScalarFieldEnum)[keyof typeof RaceScalarFieldEnum]


  export const RankScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type RankScalarFieldEnum = (typeof RankScalarFieldEnum)[keyof typeof RankScalarFieldEnum]


  export const SystemScalarFieldEnum: {
    id: 'id',
    name: 'name',
    coordsX: 'coordsX',
    coordsY: 'coordsY',
    raceType: 'raceType'
  };

  export type SystemScalarFieldEnum = (typeof SystemScalarFieldEnum)[keyof typeof SystemScalarFieldEnum]


  export const PortScalarFieldEnum: {
    id: 'id',
    systemId: 'systemId',
    goodsAvailable: 'goodsAvailable',
    upgradeLevel: 'upgradeLevel'
  };

  export type PortScalarFieldEnum = (typeof PortScalarFieldEnum)[keyof typeof PortScalarFieldEnum]


  export const GoodScalarFieldEnum: {
    id: 'id',
    name: 'name',
    level: 'level',
    raceId: 'raceId',
    tech: 'tech',
    type: 'type'
  };

  export type GoodScalarFieldEnum = (typeof GoodScalarFieldEnum)[keyof typeof GoodScalarFieldEnum]


  export const ShipScalarFieldEnum: {
    id: 'id',
    name: 'name',
    raceId: 'raceId',
    rankId: 'rankId',
    cargoSpace: 'cargoSpace',
    shields: 'shields',
    armor: 'armor',
    accel: 'accel',
    cost: 'cost',
    weaponsSlots: 'weaponsSlots',
    shieldsSlots: 'shieldsSlots',
    recharge: 'recharge'
  };

  export type ShipScalarFieldEnum = (typeof ShipScalarFieldEnum)[keyof typeof ShipScalarFieldEnum]


  export const WeaponScalarFieldEnum: {
    id: 'id',
    name: 'name',
    goodId: 'goodId',
    raceId: 'raceId',
    racks: 'racks',
    stations: 'stations',
    accuracy: 'accuracy',
    volley: 'volley',
    ammunitionId: 'ammunitionId',
    generalDamage: 'generalDamage',
    shieldDamage: 'shieldDamage',
    armorDamage: 'armorDamage'
  };

  export type WeaponScalarFieldEnum = (typeof WeaponScalarFieldEnum)[keyof typeof WeaponScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    username?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    admin?: BoolFilter<"User"> | boolean
    players?: PlayerListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    admin?: SortOrder
    players?: PlayerOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    username?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    admin?: BoolFilter<"User"> | boolean
    players?: PlayerListRelationFilter
  }, "id" | "username">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    admin?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    username?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    admin?: BoolWithAggregatesFilter<"User"> | boolean
  }

  export type PlayerWhereInput = {
    AND?: PlayerWhereInput | PlayerWhereInput[]
    OR?: PlayerWhereInput[]
    NOT?: PlayerWhereInput | PlayerWhereInput[]
    id?: IntFilter<"Player"> | number
    userId?: IntFilter<"Player"> | number
    race?: StringFilter<"Player"> | string
    credits?: IntFilter<"Player"> | number
    shipId?: IntNullableFilter<"Player"> | number | null
    currentSystemId?: IntNullableFilter<"Player"> | number | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    ship?: XOR<ShipNullableScalarRelationFilter, ShipWhereInput> | null
    currentSystem?: XOR<SystemNullableScalarRelationFilter, SystemWhereInput> | null
  }

  export type PlayerOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    race?: SortOrder
    credits?: SortOrder
    shipId?: SortOrderInput | SortOrder
    currentSystemId?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    ship?: ShipOrderByWithRelationInput
    currentSystem?: SystemOrderByWithRelationInput
  }

  export type PlayerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PlayerWhereInput | PlayerWhereInput[]
    OR?: PlayerWhereInput[]
    NOT?: PlayerWhereInput | PlayerWhereInput[]
    userId?: IntFilter<"Player"> | number
    race?: StringFilter<"Player"> | string
    credits?: IntFilter<"Player"> | number
    shipId?: IntNullableFilter<"Player"> | number | null
    currentSystemId?: IntNullableFilter<"Player"> | number | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    ship?: XOR<ShipNullableScalarRelationFilter, ShipWhereInput> | null
    currentSystem?: XOR<SystemNullableScalarRelationFilter, SystemWhereInput> | null
  }, "id">

  export type PlayerOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    race?: SortOrder
    credits?: SortOrder
    shipId?: SortOrderInput | SortOrder
    currentSystemId?: SortOrderInput | SortOrder
    _count?: PlayerCountOrderByAggregateInput
    _avg?: PlayerAvgOrderByAggregateInput
    _max?: PlayerMaxOrderByAggregateInput
    _min?: PlayerMinOrderByAggregateInput
    _sum?: PlayerSumOrderByAggregateInput
  }

  export type PlayerScalarWhereWithAggregatesInput = {
    AND?: PlayerScalarWhereWithAggregatesInput | PlayerScalarWhereWithAggregatesInput[]
    OR?: PlayerScalarWhereWithAggregatesInput[]
    NOT?: PlayerScalarWhereWithAggregatesInput | PlayerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Player"> | number
    userId?: IntWithAggregatesFilter<"Player"> | number
    race?: StringWithAggregatesFilter<"Player"> | string
    credits?: IntWithAggregatesFilter<"Player"> | number
    shipId?: IntNullableWithAggregatesFilter<"Player"> | number | null
    currentSystemId?: IntNullableWithAggregatesFilter<"Player"> | number | null
  }

  export type RaceWhereInput = {
    AND?: RaceWhereInput | RaceWhereInput[]
    OR?: RaceWhereInput[]
    NOT?: RaceWhereInput | RaceWhereInput[]
    id?: IntFilter<"Race"> | number
    name?: StringFilter<"Race"> | string
    ships?: ShipListRelationFilter
    weapons?: WeaponListRelationFilter
    goods?: GoodListRelationFilter
  }

  export type RaceOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    ships?: ShipOrderByRelationAggregateInput
    weapons?: WeaponOrderByRelationAggregateInput
    goods?: GoodOrderByRelationAggregateInput
  }

  export type RaceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RaceWhereInput | RaceWhereInput[]
    OR?: RaceWhereInput[]
    NOT?: RaceWhereInput | RaceWhereInput[]
    name?: StringFilter<"Race"> | string
    ships?: ShipListRelationFilter
    weapons?: WeaponListRelationFilter
    goods?: GoodListRelationFilter
  }, "id">

  export type RaceOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: RaceCountOrderByAggregateInput
    _avg?: RaceAvgOrderByAggregateInput
    _max?: RaceMaxOrderByAggregateInput
    _min?: RaceMinOrderByAggregateInput
    _sum?: RaceSumOrderByAggregateInput
  }

  export type RaceScalarWhereWithAggregatesInput = {
    AND?: RaceScalarWhereWithAggregatesInput | RaceScalarWhereWithAggregatesInput[]
    OR?: RaceScalarWhereWithAggregatesInput[]
    NOT?: RaceScalarWhereWithAggregatesInput | RaceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Race"> | number
    name?: StringWithAggregatesFilter<"Race"> | string
  }

  export type RankWhereInput = {
    AND?: RankWhereInput | RankWhereInput[]
    OR?: RankWhereInput[]
    NOT?: RankWhereInput | RankWhereInput[]
    id?: IntFilter<"Rank"> | number
    name?: StringFilter<"Rank"> | string
    ships?: ShipListRelationFilter
  }

  export type RankOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    ships?: ShipOrderByRelationAggregateInput
  }

  export type RankWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RankWhereInput | RankWhereInput[]
    OR?: RankWhereInput[]
    NOT?: RankWhereInput | RankWhereInput[]
    name?: StringFilter<"Rank"> | string
    ships?: ShipListRelationFilter
  }, "id">

  export type RankOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: RankCountOrderByAggregateInput
    _avg?: RankAvgOrderByAggregateInput
    _max?: RankMaxOrderByAggregateInput
    _min?: RankMinOrderByAggregateInput
    _sum?: RankSumOrderByAggregateInput
  }

  export type RankScalarWhereWithAggregatesInput = {
    AND?: RankScalarWhereWithAggregatesInput | RankScalarWhereWithAggregatesInput[]
    OR?: RankScalarWhereWithAggregatesInput[]
    NOT?: RankScalarWhereWithAggregatesInput | RankScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Rank"> | number
    name?: StringWithAggregatesFilter<"Rank"> | string
  }

  export type SystemWhereInput = {
    AND?: SystemWhereInput | SystemWhereInput[]
    OR?: SystemWhereInput[]
    NOT?: SystemWhereInput | SystemWhereInput[]
    id?: IntFilter<"System"> | number
    name?: StringFilter<"System"> | string
    coordsX?: IntFilter<"System"> | number
    coordsY?: IntFilter<"System"> | number
    raceType?: StringNullableFilter<"System"> | string | null
    ports?: PortListRelationFilter
    playersHere?: PlayerListRelationFilter
  }

  export type SystemOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    coordsX?: SortOrder
    coordsY?: SortOrder
    raceType?: SortOrderInput | SortOrder
    ports?: PortOrderByRelationAggregateInput
    playersHere?: PlayerOrderByRelationAggregateInput
  }

  export type SystemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SystemWhereInput | SystemWhereInput[]
    OR?: SystemWhereInput[]
    NOT?: SystemWhereInput | SystemWhereInput[]
    name?: StringFilter<"System"> | string
    coordsX?: IntFilter<"System"> | number
    coordsY?: IntFilter<"System"> | number
    raceType?: StringNullableFilter<"System"> | string | null
    ports?: PortListRelationFilter
    playersHere?: PlayerListRelationFilter
  }, "id">

  export type SystemOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    coordsX?: SortOrder
    coordsY?: SortOrder
    raceType?: SortOrderInput | SortOrder
    _count?: SystemCountOrderByAggregateInput
    _avg?: SystemAvgOrderByAggregateInput
    _max?: SystemMaxOrderByAggregateInput
    _min?: SystemMinOrderByAggregateInput
    _sum?: SystemSumOrderByAggregateInput
  }

  export type SystemScalarWhereWithAggregatesInput = {
    AND?: SystemScalarWhereWithAggregatesInput | SystemScalarWhereWithAggregatesInput[]
    OR?: SystemScalarWhereWithAggregatesInput[]
    NOT?: SystemScalarWhereWithAggregatesInput | SystemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"System"> | number
    name?: StringWithAggregatesFilter<"System"> | string
    coordsX?: IntWithAggregatesFilter<"System"> | number
    coordsY?: IntWithAggregatesFilter<"System"> | number
    raceType?: StringNullableWithAggregatesFilter<"System"> | string | null
  }

  export type PortWhereInput = {
    AND?: PortWhereInput | PortWhereInput[]
    OR?: PortWhereInput[]
    NOT?: PortWhereInput | PortWhereInput[]
    id?: IntFilter<"Port"> | number
    systemId?: IntFilter<"Port"> | number
    goodsAvailable?: JsonNullableFilter<"Port">
    upgradeLevel?: IntFilter<"Port"> | number
    system?: XOR<SystemScalarRelationFilter, SystemWhereInput>
  }

  export type PortOrderByWithRelationInput = {
    id?: SortOrder
    systemId?: SortOrder
    goodsAvailable?: SortOrderInput | SortOrder
    upgradeLevel?: SortOrder
    system?: SystemOrderByWithRelationInput
  }

  export type PortWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PortWhereInput | PortWhereInput[]
    OR?: PortWhereInput[]
    NOT?: PortWhereInput | PortWhereInput[]
    systemId?: IntFilter<"Port"> | number
    goodsAvailable?: JsonNullableFilter<"Port">
    upgradeLevel?: IntFilter<"Port"> | number
    system?: XOR<SystemScalarRelationFilter, SystemWhereInput>
  }, "id">

  export type PortOrderByWithAggregationInput = {
    id?: SortOrder
    systemId?: SortOrder
    goodsAvailable?: SortOrderInput | SortOrder
    upgradeLevel?: SortOrder
    _count?: PortCountOrderByAggregateInput
    _avg?: PortAvgOrderByAggregateInput
    _max?: PortMaxOrderByAggregateInput
    _min?: PortMinOrderByAggregateInput
    _sum?: PortSumOrderByAggregateInput
  }

  export type PortScalarWhereWithAggregatesInput = {
    AND?: PortScalarWhereWithAggregatesInput | PortScalarWhereWithAggregatesInput[]
    OR?: PortScalarWhereWithAggregatesInput[]
    NOT?: PortScalarWhereWithAggregatesInput | PortScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Port"> | number
    systemId?: IntWithAggregatesFilter<"Port"> | number
    goodsAvailable?: JsonNullableWithAggregatesFilter<"Port">
    upgradeLevel?: IntWithAggregatesFilter<"Port"> | number
  }

  export type GoodWhereInput = {
    AND?: GoodWhereInput | GoodWhereInput[]
    OR?: GoodWhereInput[]
    NOT?: GoodWhereInput | GoodWhereInput[]
    id?: IntFilter<"Good"> | number
    name?: StringFilter<"Good"> | string
    level?: IntFilter<"Good"> | number
    raceId?: IntNullableFilter<"Good"> | number | null
    tech?: IntFilter<"Good"> | number
    type?: IntFilter<"Good"> | number
    race?: XOR<RaceNullableScalarRelationFilter, RaceWhereInput> | null
    weapons?: WeaponListRelationFilter
    ammunitions?: WeaponListRelationFilter
  }

  export type GoodOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    level?: SortOrder
    raceId?: SortOrderInput | SortOrder
    tech?: SortOrder
    type?: SortOrder
    race?: RaceOrderByWithRelationInput
    weapons?: WeaponOrderByRelationAggregateInput
    ammunitions?: WeaponOrderByRelationAggregateInput
  }

  export type GoodWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GoodWhereInput | GoodWhereInput[]
    OR?: GoodWhereInput[]
    NOT?: GoodWhereInput | GoodWhereInput[]
    name?: StringFilter<"Good"> | string
    level?: IntFilter<"Good"> | number
    raceId?: IntNullableFilter<"Good"> | number | null
    tech?: IntFilter<"Good"> | number
    type?: IntFilter<"Good"> | number
    race?: XOR<RaceNullableScalarRelationFilter, RaceWhereInput> | null
    weapons?: WeaponListRelationFilter
    ammunitions?: WeaponListRelationFilter
  }, "id">

  export type GoodOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    level?: SortOrder
    raceId?: SortOrderInput | SortOrder
    tech?: SortOrder
    type?: SortOrder
    _count?: GoodCountOrderByAggregateInput
    _avg?: GoodAvgOrderByAggregateInput
    _max?: GoodMaxOrderByAggregateInput
    _min?: GoodMinOrderByAggregateInput
    _sum?: GoodSumOrderByAggregateInput
  }

  export type GoodScalarWhereWithAggregatesInput = {
    AND?: GoodScalarWhereWithAggregatesInput | GoodScalarWhereWithAggregatesInput[]
    OR?: GoodScalarWhereWithAggregatesInput[]
    NOT?: GoodScalarWhereWithAggregatesInput | GoodScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Good"> | number
    name?: StringWithAggregatesFilter<"Good"> | string
    level?: IntWithAggregatesFilter<"Good"> | number
    raceId?: IntNullableWithAggregatesFilter<"Good"> | number | null
    tech?: IntWithAggregatesFilter<"Good"> | number
    type?: IntWithAggregatesFilter<"Good"> | number
  }

  export type ShipWhereInput = {
    AND?: ShipWhereInput | ShipWhereInput[]
    OR?: ShipWhereInput[]
    NOT?: ShipWhereInput | ShipWhereInput[]
    id?: IntFilter<"Ship"> | number
    name?: StringNullableFilter<"Ship"> | string | null
    raceId?: IntFilter<"Ship"> | number
    rankId?: IntFilter<"Ship"> | number
    cargoSpace?: IntFilter<"Ship"> | number
    shields?: IntFilter<"Ship"> | number
    armor?: IntFilter<"Ship"> | number
    accel?: FloatFilter<"Ship"> | number
    cost?: IntFilter<"Ship"> | number
    weaponsSlots?: IntFilter<"Ship"> | number
    shieldsSlots?: IntFilter<"Ship"> | number
    recharge?: IntFilter<"Ship"> | number
    race?: XOR<RaceScalarRelationFilter, RaceWhereInput>
    rank?: XOR<RankScalarRelationFilter, RankWhereInput>
    players?: PlayerListRelationFilter
  }

  export type ShipOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    raceId?: SortOrder
    rankId?: SortOrder
    cargoSpace?: SortOrder
    shields?: SortOrder
    armor?: SortOrder
    accel?: SortOrder
    cost?: SortOrder
    weaponsSlots?: SortOrder
    shieldsSlots?: SortOrder
    recharge?: SortOrder
    race?: RaceOrderByWithRelationInput
    rank?: RankOrderByWithRelationInput
    players?: PlayerOrderByRelationAggregateInput
  }

  export type ShipWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ShipWhereInput | ShipWhereInput[]
    OR?: ShipWhereInput[]
    NOT?: ShipWhereInput | ShipWhereInput[]
    name?: StringNullableFilter<"Ship"> | string | null
    raceId?: IntFilter<"Ship"> | number
    rankId?: IntFilter<"Ship"> | number
    cargoSpace?: IntFilter<"Ship"> | number
    shields?: IntFilter<"Ship"> | number
    armor?: IntFilter<"Ship"> | number
    accel?: FloatFilter<"Ship"> | number
    cost?: IntFilter<"Ship"> | number
    weaponsSlots?: IntFilter<"Ship"> | number
    shieldsSlots?: IntFilter<"Ship"> | number
    recharge?: IntFilter<"Ship"> | number
    race?: XOR<RaceScalarRelationFilter, RaceWhereInput>
    rank?: XOR<RankScalarRelationFilter, RankWhereInput>
    players?: PlayerListRelationFilter
  }, "id">

  export type ShipOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    raceId?: SortOrder
    rankId?: SortOrder
    cargoSpace?: SortOrder
    shields?: SortOrder
    armor?: SortOrder
    accel?: SortOrder
    cost?: SortOrder
    weaponsSlots?: SortOrder
    shieldsSlots?: SortOrder
    recharge?: SortOrder
    _count?: ShipCountOrderByAggregateInput
    _avg?: ShipAvgOrderByAggregateInput
    _max?: ShipMaxOrderByAggregateInput
    _min?: ShipMinOrderByAggregateInput
    _sum?: ShipSumOrderByAggregateInput
  }

  export type ShipScalarWhereWithAggregatesInput = {
    AND?: ShipScalarWhereWithAggregatesInput | ShipScalarWhereWithAggregatesInput[]
    OR?: ShipScalarWhereWithAggregatesInput[]
    NOT?: ShipScalarWhereWithAggregatesInput | ShipScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Ship"> | number
    name?: StringNullableWithAggregatesFilter<"Ship"> | string | null
    raceId?: IntWithAggregatesFilter<"Ship"> | number
    rankId?: IntWithAggregatesFilter<"Ship"> | number
    cargoSpace?: IntWithAggregatesFilter<"Ship"> | number
    shields?: IntWithAggregatesFilter<"Ship"> | number
    armor?: IntWithAggregatesFilter<"Ship"> | number
    accel?: FloatWithAggregatesFilter<"Ship"> | number
    cost?: IntWithAggregatesFilter<"Ship"> | number
    weaponsSlots?: IntWithAggregatesFilter<"Ship"> | number
    shieldsSlots?: IntWithAggregatesFilter<"Ship"> | number
    recharge?: IntWithAggregatesFilter<"Ship"> | number
  }

  export type WeaponWhereInput = {
    AND?: WeaponWhereInput | WeaponWhereInput[]
    OR?: WeaponWhereInput[]
    NOT?: WeaponWhereInput | WeaponWhereInput[]
    id?: IntFilter<"Weapon"> | number
    name?: StringFilter<"Weapon"> | string
    goodId?: IntFilter<"Weapon"> | number
    raceId?: IntNullableFilter<"Weapon"> | number | null
    racks?: IntFilter<"Weapon"> | number
    stations?: IntFilter<"Weapon"> | number
    accuracy?: FloatFilter<"Weapon"> | number
    volley?: IntFilter<"Weapon"> | number
    ammunitionId?: IntNullableFilter<"Weapon"> | number | null
    generalDamage?: IntFilter<"Weapon"> | number
    shieldDamage?: IntFilter<"Weapon"> | number
    armorDamage?: IntFilter<"Weapon"> | number
    good?: XOR<GoodScalarRelationFilter, GoodWhereInput>
    race?: XOR<RaceNullableScalarRelationFilter, RaceWhereInput> | null
    ammunition?: XOR<GoodNullableScalarRelationFilter, GoodWhereInput> | null
  }

  export type WeaponOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    goodId?: SortOrder
    raceId?: SortOrderInput | SortOrder
    racks?: SortOrder
    stations?: SortOrder
    accuracy?: SortOrder
    volley?: SortOrder
    ammunitionId?: SortOrderInput | SortOrder
    generalDamage?: SortOrder
    shieldDamage?: SortOrder
    armorDamage?: SortOrder
    good?: GoodOrderByWithRelationInput
    race?: RaceOrderByWithRelationInput
    ammunition?: GoodOrderByWithRelationInput
  }

  export type WeaponWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: WeaponWhereInput | WeaponWhereInput[]
    OR?: WeaponWhereInput[]
    NOT?: WeaponWhereInput | WeaponWhereInput[]
    name?: StringFilter<"Weapon"> | string
    goodId?: IntFilter<"Weapon"> | number
    raceId?: IntNullableFilter<"Weapon"> | number | null
    racks?: IntFilter<"Weapon"> | number
    stations?: IntFilter<"Weapon"> | number
    accuracy?: FloatFilter<"Weapon"> | number
    volley?: IntFilter<"Weapon"> | number
    ammunitionId?: IntNullableFilter<"Weapon"> | number | null
    generalDamage?: IntFilter<"Weapon"> | number
    shieldDamage?: IntFilter<"Weapon"> | number
    armorDamage?: IntFilter<"Weapon"> | number
    good?: XOR<GoodScalarRelationFilter, GoodWhereInput>
    race?: XOR<RaceNullableScalarRelationFilter, RaceWhereInput> | null
    ammunition?: XOR<GoodNullableScalarRelationFilter, GoodWhereInput> | null
  }, "id">

  export type WeaponOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    goodId?: SortOrder
    raceId?: SortOrderInput | SortOrder
    racks?: SortOrder
    stations?: SortOrder
    accuracy?: SortOrder
    volley?: SortOrder
    ammunitionId?: SortOrderInput | SortOrder
    generalDamage?: SortOrder
    shieldDamage?: SortOrder
    armorDamage?: SortOrder
    _count?: WeaponCountOrderByAggregateInput
    _avg?: WeaponAvgOrderByAggregateInput
    _max?: WeaponMaxOrderByAggregateInput
    _min?: WeaponMinOrderByAggregateInput
    _sum?: WeaponSumOrderByAggregateInput
  }

  export type WeaponScalarWhereWithAggregatesInput = {
    AND?: WeaponScalarWhereWithAggregatesInput | WeaponScalarWhereWithAggregatesInput[]
    OR?: WeaponScalarWhereWithAggregatesInput[]
    NOT?: WeaponScalarWhereWithAggregatesInput | WeaponScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Weapon"> | number
    name?: StringWithAggregatesFilter<"Weapon"> | string
    goodId?: IntWithAggregatesFilter<"Weapon"> | number
    raceId?: IntNullableWithAggregatesFilter<"Weapon"> | number | null
    racks?: IntWithAggregatesFilter<"Weapon"> | number
    stations?: IntWithAggregatesFilter<"Weapon"> | number
    accuracy?: FloatWithAggregatesFilter<"Weapon"> | number
    volley?: IntWithAggregatesFilter<"Weapon"> | number
    ammunitionId?: IntNullableWithAggregatesFilter<"Weapon"> | number | null
    generalDamage?: IntWithAggregatesFilter<"Weapon"> | number
    shieldDamage?: IntWithAggregatesFilter<"Weapon"> | number
    armorDamage?: IntWithAggregatesFilter<"Weapon"> | number
  }

  export type UserCreateInput = {
    username: string
    password: string
    admin?: boolean
    players?: PlayerCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    username: string
    password: string
    admin?: boolean
    players?: PlayerUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    admin?: BoolFieldUpdateOperationsInput | boolean
    players?: PlayerUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    admin?: BoolFieldUpdateOperationsInput | boolean
    players?: PlayerUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    username: string
    password: string
    admin?: boolean
  }

  export type UserUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    admin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    admin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PlayerCreateInput = {
    race: string
    credits?: number
    user: UserCreateNestedOneWithoutPlayersInput
    ship?: ShipCreateNestedOneWithoutPlayersInput
    currentSystem?: SystemCreateNestedOneWithoutPlayersHereInput
  }

  export type PlayerUncheckedCreateInput = {
    id?: number
    userId: number
    race: string
    credits?: number
    shipId?: number | null
    currentSystemId?: number | null
  }

  export type PlayerUpdateInput = {
    race?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutPlayersNestedInput
    ship?: ShipUpdateOneWithoutPlayersNestedInput
    currentSystem?: SystemUpdateOneWithoutPlayersHereNestedInput
  }

  export type PlayerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    race?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    shipId?: NullableIntFieldUpdateOperationsInput | number | null
    currentSystemId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PlayerCreateManyInput = {
    id?: number
    userId: number
    race: string
    credits?: number
    shipId?: number | null
    currentSystemId?: number | null
  }

  export type PlayerUpdateManyMutationInput = {
    race?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
  }

  export type PlayerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    race?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    shipId?: NullableIntFieldUpdateOperationsInput | number | null
    currentSystemId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type RaceCreateInput = {
    name: string
    ships?: ShipCreateNestedManyWithoutRaceInput
    weapons?: WeaponCreateNestedManyWithoutRaceInput
    goods?: GoodCreateNestedManyWithoutRaceInput
  }

  export type RaceUncheckedCreateInput = {
    id?: number
    name: string
    ships?: ShipUncheckedCreateNestedManyWithoutRaceInput
    weapons?: WeaponUncheckedCreateNestedManyWithoutRaceInput
    goods?: GoodUncheckedCreateNestedManyWithoutRaceInput
  }

  export type RaceUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    ships?: ShipUpdateManyWithoutRaceNestedInput
    weapons?: WeaponUpdateManyWithoutRaceNestedInput
    goods?: GoodUpdateManyWithoutRaceNestedInput
  }

  export type RaceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    ships?: ShipUncheckedUpdateManyWithoutRaceNestedInput
    weapons?: WeaponUncheckedUpdateManyWithoutRaceNestedInput
    goods?: GoodUncheckedUpdateManyWithoutRaceNestedInput
  }

  export type RaceCreateManyInput = {
    id?: number
    name: string
  }

  export type RaceUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type RaceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type RankCreateInput = {
    name: string
    ships?: ShipCreateNestedManyWithoutRankInput
  }

  export type RankUncheckedCreateInput = {
    id?: number
    name: string
    ships?: ShipUncheckedCreateNestedManyWithoutRankInput
  }

  export type RankUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    ships?: ShipUpdateManyWithoutRankNestedInput
  }

  export type RankUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    ships?: ShipUncheckedUpdateManyWithoutRankNestedInput
  }

  export type RankCreateManyInput = {
    id?: number
    name: string
  }

  export type RankUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type RankUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SystemCreateInput = {
    name: string
    coordsX: number
    coordsY: number
    raceType?: string | null
    ports?: PortCreateNestedManyWithoutSystemInput
    playersHere?: PlayerCreateNestedManyWithoutCurrentSystemInput
  }

  export type SystemUncheckedCreateInput = {
    id?: number
    name: string
    coordsX: number
    coordsY: number
    raceType?: string | null
    ports?: PortUncheckedCreateNestedManyWithoutSystemInput
    playersHere?: PlayerUncheckedCreateNestedManyWithoutCurrentSystemInput
  }

  export type SystemUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    coordsX?: IntFieldUpdateOperationsInput | number
    coordsY?: IntFieldUpdateOperationsInput | number
    raceType?: NullableStringFieldUpdateOperationsInput | string | null
    ports?: PortUpdateManyWithoutSystemNestedInput
    playersHere?: PlayerUpdateManyWithoutCurrentSystemNestedInput
  }

  export type SystemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    coordsX?: IntFieldUpdateOperationsInput | number
    coordsY?: IntFieldUpdateOperationsInput | number
    raceType?: NullableStringFieldUpdateOperationsInput | string | null
    ports?: PortUncheckedUpdateManyWithoutSystemNestedInput
    playersHere?: PlayerUncheckedUpdateManyWithoutCurrentSystemNestedInput
  }

  export type SystemCreateManyInput = {
    id?: number
    name: string
    coordsX: number
    coordsY: number
    raceType?: string | null
  }

  export type SystemUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    coordsX?: IntFieldUpdateOperationsInput | number
    coordsY?: IntFieldUpdateOperationsInput | number
    raceType?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SystemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    coordsX?: IntFieldUpdateOperationsInput | number
    coordsY?: IntFieldUpdateOperationsInput | number
    raceType?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PortCreateInput = {
    goodsAvailable?: NullableJsonNullValueInput | InputJsonValue
    upgradeLevel?: number
    system: SystemCreateNestedOneWithoutPortsInput
  }

  export type PortUncheckedCreateInput = {
    id?: number
    systemId: number
    goodsAvailable?: NullableJsonNullValueInput | InputJsonValue
    upgradeLevel?: number
  }

  export type PortUpdateInput = {
    goodsAvailable?: NullableJsonNullValueInput | InputJsonValue
    upgradeLevel?: IntFieldUpdateOperationsInput | number
    system?: SystemUpdateOneRequiredWithoutPortsNestedInput
  }

  export type PortUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    systemId?: IntFieldUpdateOperationsInput | number
    goodsAvailable?: NullableJsonNullValueInput | InputJsonValue
    upgradeLevel?: IntFieldUpdateOperationsInput | number
  }

  export type PortCreateManyInput = {
    id?: number
    systemId: number
    goodsAvailable?: NullableJsonNullValueInput | InputJsonValue
    upgradeLevel?: number
  }

  export type PortUpdateManyMutationInput = {
    goodsAvailable?: NullableJsonNullValueInput | InputJsonValue
    upgradeLevel?: IntFieldUpdateOperationsInput | number
  }

  export type PortUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    systemId?: IntFieldUpdateOperationsInput | number
    goodsAvailable?: NullableJsonNullValueInput | InputJsonValue
    upgradeLevel?: IntFieldUpdateOperationsInput | number
  }

  export type GoodCreateInput = {
    name: string
    level?: number
    tech?: number
    type?: number
    race?: RaceCreateNestedOneWithoutGoodsInput
    weapons?: WeaponCreateNestedManyWithoutGoodInput
    ammunitions?: WeaponCreateNestedManyWithoutAmmunitionInput
  }

  export type GoodUncheckedCreateInput = {
    id?: number
    name: string
    level?: number
    raceId?: number | null
    tech?: number
    type?: number
    weapons?: WeaponUncheckedCreateNestedManyWithoutGoodInput
    ammunitions?: WeaponUncheckedCreateNestedManyWithoutAmmunitionInput
  }

  export type GoodUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    tech?: IntFieldUpdateOperationsInput | number
    type?: IntFieldUpdateOperationsInput | number
    race?: RaceUpdateOneWithoutGoodsNestedInput
    weapons?: WeaponUpdateManyWithoutGoodNestedInput
    ammunitions?: WeaponUpdateManyWithoutAmmunitionNestedInput
  }

  export type GoodUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    raceId?: NullableIntFieldUpdateOperationsInput | number | null
    tech?: IntFieldUpdateOperationsInput | number
    type?: IntFieldUpdateOperationsInput | number
    weapons?: WeaponUncheckedUpdateManyWithoutGoodNestedInput
    ammunitions?: WeaponUncheckedUpdateManyWithoutAmmunitionNestedInput
  }

  export type GoodCreateManyInput = {
    id?: number
    name: string
    level?: number
    raceId?: number | null
    tech?: number
    type?: number
  }

  export type GoodUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    tech?: IntFieldUpdateOperationsInput | number
    type?: IntFieldUpdateOperationsInput | number
  }

  export type GoodUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    raceId?: NullableIntFieldUpdateOperationsInput | number | null
    tech?: IntFieldUpdateOperationsInput | number
    type?: IntFieldUpdateOperationsInput | number
  }

  export type ShipCreateInput = {
    name?: string | null
    cargoSpace?: number
    shields?: number
    armor?: number
    accel?: number
    cost?: number
    weaponsSlots?: number
    shieldsSlots?: number
    recharge?: number
    race: RaceCreateNestedOneWithoutShipsInput
    rank?: RankCreateNestedOneWithoutShipsInput
    players?: PlayerCreateNestedManyWithoutShipInput
  }

  export type ShipUncheckedCreateInput = {
    id?: number
    name?: string | null
    raceId: number
    rankId?: number
    cargoSpace?: number
    shields?: number
    armor?: number
    accel?: number
    cost?: number
    weaponsSlots?: number
    shieldsSlots?: number
    recharge?: number
    players?: PlayerUncheckedCreateNestedManyWithoutShipInput
  }

  export type ShipUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    cargoSpace?: IntFieldUpdateOperationsInput | number
    shields?: IntFieldUpdateOperationsInput | number
    armor?: IntFieldUpdateOperationsInput | number
    accel?: FloatFieldUpdateOperationsInput | number
    cost?: IntFieldUpdateOperationsInput | number
    weaponsSlots?: IntFieldUpdateOperationsInput | number
    shieldsSlots?: IntFieldUpdateOperationsInput | number
    recharge?: IntFieldUpdateOperationsInput | number
    race?: RaceUpdateOneRequiredWithoutShipsNestedInput
    rank?: RankUpdateOneRequiredWithoutShipsNestedInput
    players?: PlayerUpdateManyWithoutShipNestedInput
  }

  export type ShipUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    raceId?: IntFieldUpdateOperationsInput | number
    rankId?: IntFieldUpdateOperationsInput | number
    cargoSpace?: IntFieldUpdateOperationsInput | number
    shields?: IntFieldUpdateOperationsInput | number
    armor?: IntFieldUpdateOperationsInput | number
    accel?: FloatFieldUpdateOperationsInput | number
    cost?: IntFieldUpdateOperationsInput | number
    weaponsSlots?: IntFieldUpdateOperationsInput | number
    shieldsSlots?: IntFieldUpdateOperationsInput | number
    recharge?: IntFieldUpdateOperationsInput | number
    players?: PlayerUncheckedUpdateManyWithoutShipNestedInput
  }

  export type ShipCreateManyInput = {
    id?: number
    name?: string | null
    raceId: number
    rankId?: number
    cargoSpace?: number
    shields?: number
    armor?: number
    accel?: number
    cost?: number
    weaponsSlots?: number
    shieldsSlots?: number
    recharge?: number
  }

  export type ShipUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    cargoSpace?: IntFieldUpdateOperationsInput | number
    shields?: IntFieldUpdateOperationsInput | number
    armor?: IntFieldUpdateOperationsInput | number
    accel?: FloatFieldUpdateOperationsInput | number
    cost?: IntFieldUpdateOperationsInput | number
    weaponsSlots?: IntFieldUpdateOperationsInput | number
    shieldsSlots?: IntFieldUpdateOperationsInput | number
    recharge?: IntFieldUpdateOperationsInput | number
  }

  export type ShipUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    raceId?: IntFieldUpdateOperationsInput | number
    rankId?: IntFieldUpdateOperationsInput | number
    cargoSpace?: IntFieldUpdateOperationsInput | number
    shields?: IntFieldUpdateOperationsInput | number
    armor?: IntFieldUpdateOperationsInput | number
    accel?: FloatFieldUpdateOperationsInput | number
    cost?: IntFieldUpdateOperationsInput | number
    weaponsSlots?: IntFieldUpdateOperationsInput | number
    shieldsSlots?: IntFieldUpdateOperationsInput | number
    recharge?: IntFieldUpdateOperationsInput | number
  }

  export type WeaponCreateInput = {
    name: string
    racks?: number
    stations?: number
    accuracy?: number
    volley?: number
    generalDamage?: number
    shieldDamage?: number
    armorDamage?: number
    good?: GoodCreateNestedOneWithoutWeaponsInput
    race?: RaceCreateNestedOneWithoutWeaponsInput
    ammunition?: GoodCreateNestedOneWithoutAmmunitionsInput
  }

  export type WeaponUncheckedCreateInput = {
    id?: number
    name: string
    goodId?: number
    raceId?: number | null
    racks?: number
    stations?: number
    accuracy?: number
    volley?: number
    ammunitionId?: number | null
    generalDamage?: number
    shieldDamage?: number
    armorDamage?: number
  }

  export type WeaponUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    racks?: IntFieldUpdateOperationsInput | number
    stations?: IntFieldUpdateOperationsInput | number
    accuracy?: FloatFieldUpdateOperationsInput | number
    volley?: IntFieldUpdateOperationsInput | number
    generalDamage?: IntFieldUpdateOperationsInput | number
    shieldDamage?: IntFieldUpdateOperationsInput | number
    armorDamage?: IntFieldUpdateOperationsInput | number
    good?: GoodUpdateOneRequiredWithoutWeaponsNestedInput
    race?: RaceUpdateOneWithoutWeaponsNestedInput
    ammunition?: GoodUpdateOneWithoutAmmunitionsNestedInput
  }

  export type WeaponUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    goodId?: IntFieldUpdateOperationsInput | number
    raceId?: NullableIntFieldUpdateOperationsInput | number | null
    racks?: IntFieldUpdateOperationsInput | number
    stations?: IntFieldUpdateOperationsInput | number
    accuracy?: FloatFieldUpdateOperationsInput | number
    volley?: IntFieldUpdateOperationsInput | number
    ammunitionId?: NullableIntFieldUpdateOperationsInput | number | null
    generalDamage?: IntFieldUpdateOperationsInput | number
    shieldDamage?: IntFieldUpdateOperationsInput | number
    armorDamage?: IntFieldUpdateOperationsInput | number
  }

  export type WeaponCreateManyInput = {
    id?: number
    name: string
    goodId?: number
    raceId?: number | null
    racks?: number
    stations?: number
    accuracy?: number
    volley?: number
    ammunitionId?: number | null
    generalDamage?: number
    shieldDamage?: number
    armorDamage?: number
  }

  export type WeaponUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    racks?: IntFieldUpdateOperationsInput | number
    stations?: IntFieldUpdateOperationsInput | number
    accuracy?: FloatFieldUpdateOperationsInput | number
    volley?: IntFieldUpdateOperationsInput | number
    generalDamage?: IntFieldUpdateOperationsInput | number
    shieldDamage?: IntFieldUpdateOperationsInput | number
    armorDamage?: IntFieldUpdateOperationsInput | number
  }

  export type WeaponUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    goodId?: IntFieldUpdateOperationsInput | number
    raceId?: NullableIntFieldUpdateOperationsInput | number | null
    racks?: IntFieldUpdateOperationsInput | number
    stations?: IntFieldUpdateOperationsInput | number
    accuracy?: FloatFieldUpdateOperationsInput | number
    volley?: IntFieldUpdateOperationsInput | number
    ammunitionId?: NullableIntFieldUpdateOperationsInput | number | null
    generalDamage?: IntFieldUpdateOperationsInput | number
    shieldDamage?: IntFieldUpdateOperationsInput | number
    armorDamage?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type PlayerListRelationFilter = {
    every?: PlayerWhereInput
    some?: PlayerWhereInput
    none?: PlayerWhereInput
  }

  export type PlayerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    admin?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    admin?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    admin?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ShipNullableScalarRelationFilter = {
    is?: ShipWhereInput | null
    isNot?: ShipWhereInput | null
  }

  export type SystemNullableScalarRelationFilter = {
    is?: SystemWhereInput | null
    isNot?: SystemWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type PlayerCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    race?: SortOrder
    credits?: SortOrder
    shipId?: SortOrder
    currentSystemId?: SortOrder
  }

  export type PlayerAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    credits?: SortOrder
    shipId?: SortOrder
    currentSystemId?: SortOrder
  }

  export type PlayerMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    race?: SortOrder
    credits?: SortOrder
    shipId?: SortOrder
    currentSystemId?: SortOrder
  }

  export type PlayerMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    race?: SortOrder
    credits?: SortOrder
    shipId?: SortOrder
    currentSystemId?: SortOrder
  }

  export type PlayerSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    credits?: SortOrder
    shipId?: SortOrder
    currentSystemId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type ShipListRelationFilter = {
    every?: ShipWhereInput
    some?: ShipWhereInput
    none?: ShipWhereInput
  }

  export type WeaponListRelationFilter = {
    every?: WeaponWhereInput
    some?: WeaponWhereInput
    none?: WeaponWhereInput
  }

  export type GoodListRelationFilter = {
    every?: GoodWhereInput
    some?: GoodWhereInput
    none?: GoodWhereInput
  }

  export type ShipOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WeaponOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GoodOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RaceCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type RaceAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RaceMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type RaceMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type RaceSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RankCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type RankAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RankMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type RankMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type RankSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type PortListRelationFilter = {
    every?: PortWhereInput
    some?: PortWhereInput
    none?: PortWhereInput
  }

  export type PortOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SystemCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    coordsX?: SortOrder
    coordsY?: SortOrder
    raceType?: SortOrder
  }

  export type SystemAvgOrderByAggregateInput = {
    id?: SortOrder
    coordsX?: SortOrder
    coordsY?: SortOrder
  }

  export type SystemMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    coordsX?: SortOrder
    coordsY?: SortOrder
    raceType?: SortOrder
  }

  export type SystemMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    coordsX?: SortOrder
    coordsY?: SortOrder
    raceType?: SortOrder
  }

  export type SystemSumOrderByAggregateInput = {
    id?: SortOrder
    coordsX?: SortOrder
    coordsY?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type SystemScalarRelationFilter = {
    is?: SystemWhereInput
    isNot?: SystemWhereInput
  }

  export type PortCountOrderByAggregateInput = {
    id?: SortOrder
    systemId?: SortOrder
    goodsAvailable?: SortOrder
    upgradeLevel?: SortOrder
  }

  export type PortAvgOrderByAggregateInput = {
    id?: SortOrder
    systemId?: SortOrder
    upgradeLevel?: SortOrder
  }

  export type PortMaxOrderByAggregateInput = {
    id?: SortOrder
    systemId?: SortOrder
    upgradeLevel?: SortOrder
  }

  export type PortMinOrderByAggregateInput = {
    id?: SortOrder
    systemId?: SortOrder
    upgradeLevel?: SortOrder
  }

  export type PortSumOrderByAggregateInput = {
    id?: SortOrder
    systemId?: SortOrder
    upgradeLevel?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type RaceNullableScalarRelationFilter = {
    is?: RaceWhereInput | null
    isNot?: RaceWhereInput | null
  }

  export type GoodCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    level?: SortOrder
    raceId?: SortOrder
    tech?: SortOrder
    type?: SortOrder
  }

  export type GoodAvgOrderByAggregateInput = {
    id?: SortOrder
    level?: SortOrder
    raceId?: SortOrder
    tech?: SortOrder
    type?: SortOrder
  }

  export type GoodMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    level?: SortOrder
    raceId?: SortOrder
    tech?: SortOrder
    type?: SortOrder
  }

  export type GoodMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    level?: SortOrder
    raceId?: SortOrder
    tech?: SortOrder
    type?: SortOrder
  }

  export type GoodSumOrderByAggregateInput = {
    id?: SortOrder
    level?: SortOrder
    raceId?: SortOrder
    tech?: SortOrder
    type?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type RaceScalarRelationFilter = {
    is?: RaceWhereInput
    isNot?: RaceWhereInput
  }

  export type RankScalarRelationFilter = {
    is?: RankWhereInput
    isNot?: RankWhereInput
  }

  export type ShipCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    raceId?: SortOrder
    rankId?: SortOrder
    cargoSpace?: SortOrder
    shields?: SortOrder
    armor?: SortOrder
    accel?: SortOrder
    cost?: SortOrder
    weaponsSlots?: SortOrder
    shieldsSlots?: SortOrder
    recharge?: SortOrder
  }

  export type ShipAvgOrderByAggregateInput = {
    id?: SortOrder
    raceId?: SortOrder
    rankId?: SortOrder
    cargoSpace?: SortOrder
    shields?: SortOrder
    armor?: SortOrder
    accel?: SortOrder
    cost?: SortOrder
    weaponsSlots?: SortOrder
    shieldsSlots?: SortOrder
    recharge?: SortOrder
  }

  export type ShipMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    raceId?: SortOrder
    rankId?: SortOrder
    cargoSpace?: SortOrder
    shields?: SortOrder
    armor?: SortOrder
    accel?: SortOrder
    cost?: SortOrder
    weaponsSlots?: SortOrder
    shieldsSlots?: SortOrder
    recharge?: SortOrder
  }

  export type ShipMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    raceId?: SortOrder
    rankId?: SortOrder
    cargoSpace?: SortOrder
    shields?: SortOrder
    armor?: SortOrder
    accel?: SortOrder
    cost?: SortOrder
    weaponsSlots?: SortOrder
    shieldsSlots?: SortOrder
    recharge?: SortOrder
  }

  export type ShipSumOrderByAggregateInput = {
    id?: SortOrder
    raceId?: SortOrder
    rankId?: SortOrder
    cargoSpace?: SortOrder
    shields?: SortOrder
    armor?: SortOrder
    accel?: SortOrder
    cost?: SortOrder
    weaponsSlots?: SortOrder
    shieldsSlots?: SortOrder
    recharge?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type GoodScalarRelationFilter = {
    is?: GoodWhereInput
    isNot?: GoodWhereInput
  }

  export type GoodNullableScalarRelationFilter = {
    is?: GoodWhereInput | null
    isNot?: GoodWhereInput | null
  }

  export type WeaponCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    goodId?: SortOrder
    raceId?: SortOrder
    racks?: SortOrder
    stations?: SortOrder
    accuracy?: SortOrder
    volley?: SortOrder
    ammunitionId?: SortOrder
    generalDamage?: SortOrder
    shieldDamage?: SortOrder
    armorDamage?: SortOrder
  }

  export type WeaponAvgOrderByAggregateInput = {
    id?: SortOrder
    goodId?: SortOrder
    raceId?: SortOrder
    racks?: SortOrder
    stations?: SortOrder
    accuracy?: SortOrder
    volley?: SortOrder
    ammunitionId?: SortOrder
    generalDamage?: SortOrder
    shieldDamage?: SortOrder
    armorDamage?: SortOrder
  }

  export type WeaponMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    goodId?: SortOrder
    raceId?: SortOrder
    racks?: SortOrder
    stations?: SortOrder
    accuracy?: SortOrder
    volley?: SortOrder
    ammunitionId?: SortOrder
    generalDamage?: SortOrder
    shieldDamage?: SortOrder
    armorDamage?: SortOrder
  }

  export type WeaponMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    goodId?: SortOrder
    raceId?: SortOrder
    racks?: SortOrder
    stations?: SortOrder
    accuracy?: SortOrder
    volley?: SortOrder
    ammunitionId?: SortOrder
    generalDamage?: SortOrder
    shieldDamage?: SortOrder
    armorDamage?: SortOrder
  }

  export type WeaponSumOrderByAggregateInput = {
    id?: SortOrder
    goodId?: SortOrder
    raceId?: SortOrder
    racks?: SortOrder
    stations?: SortOrder
    accuracy?: SortOrder
    volley?: SortOrder
    ammunitionId?: SortOrder
    generalDamage?: SortOrder
    shieldDamage?: SortOrder
    armorDamage?: SortOrder
  }

  export type PlayerCreateNestedManyWithoutUserInput = {
    create?: XOR<PlayerCreateWithoutUserInput, PlayerUncheckedCreateWithoutUserInput> | PlayerCreateWithoutUserInput[] | PlayerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PlayerCreateOrConnectWithoutUserInput | PlayerCreateOrConnectWithoutUserInput[]
    createMany?: PlayerCreateManyUserInputEnvelope
    connect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
  }

  export type PlayerUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PlayerCreateWithoutUserInput, PlayerUncheckedCreateWithoutUserInput> | PlayerCreateWithoutUserInput[] | PlayerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PlayerCreateOrConnectWithoutUserInput | PlayerCreateOrConnectWithoutUserInput[]
    createMany?: PlayerCreateManyUserInputEnvelope
    connect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type PlayerUpdateManyWithoutUserNestedInput = {
    create?: XOR<PlayerCreateWithoutUserInput, PlayerUncheckedCreateWithoutUserInput> | PlayerCreateWithoutUserInput[] | PlayerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PlayerCreateOrConnectWithoutUserInput | PlayerCreateOrConnectWithoutUserInput[]
    upsert?: PlayerUpsertWithWhereUniqueWithoutUserInput | PlayerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PlayerCreateManyUserInputEnvelope
    set?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    disconnect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    delete?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    connect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    update?: PlayerUpdateWithWhereUniqueWithoutUserInput | PlayerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PlayerUpdateManyWithWhereWithoutUserInput | PlayerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PlayerScalarWhereInput | PlayerScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PlayerUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PlayerCreateWithoutUserInput, PlayerUncheckedCreateWithoutUserInput> | PlayerCreateWithoutUserInput[] | PlayerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PlayerCreateOrConnectWithoutUserInput | PlayerCreateOrConnectWithoutUserInput[]
    upsert?: PlayerUpsertWithWhereUniqueWithoutUserInput | PlayerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PlayerCreateManyUserInputEnvelope
    set?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    disconnect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    delete?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    connect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    update?: PlayerUpdateWithWhereUniqueWithoutUserInput | PlayerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PlayerUpdateManyWithWhereWithoutUserInput | PlayerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PlayerScalarWhereInput | PlayerScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutPlayersInput = {
    create?: XOR<UserCreateWithoutPlayersInput, UserUncheckedCreateWithoutPlayersInput>
    connectOrCreate?: UserCreateOrConnectWithoutPlayersInput
    connect?: UserWhereUniqueInput
  }

  export type ShipCreateNestedOneWithoutPlayersInput = {
    create?: XOR<ShipCreateWithoutPlayersInput, ShipUncheckedCreateWithoutPlayersInput>
    connectOrCreate?: ShipCreateOrConnectWithoutPlayersInput
    connect?: ShipWhereUniqueInput
  }

  export type SystemCreateNestedOneWithoutPlayersHereInput = {
    create?: XOR<SystemCreateWithoutPlayersHereInput, SystemUncheckedCreateWithoutPlayersHereInput>
    connectOrCreate?: SystemCreateOrConnectWithoutPlayersHereInput
    connect?: SystemWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPlayersNestedInput = {
    create?: XOR<UserCreateWithoutPlayersInput, UserUncheckedCreateWithoutPlayersInput>
    connectOrCreate?: UserCreateOrConnectWithoutPlayersInput
    upsert?: UserUpsertWithoutPlayersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPlayersInput, UserUpdateWithoutPlayersInput>, UserUncheckedUpdateWithoutPlayersInput>
  }

  export type ShipUpdateOneWithoutPlayersNestedInput = {
    create?: XOR<ShipCreateWithoutPlayersInput, ShipUncheckedCreateWithoutPlayersInput>
    connectOrCreate?: ShipCreateOrConnectWithoutPlayersInput
    upsert?: ShipUpsertWithoutPlayersInput
    disconnect?: ShipWhereInput | boolean
    delete?: ShipWhereInput | boolean
    connect?: ShipWhereUniqueInput
    update?: XOR<XOR<ShipUpdateToOneWithWhereWithoutPlayersInput, ShipUpdateWithoutPlayersInput>, ShipUncheckedUpdateWithoutPlayersInput>
  }

  export type SystemUpdateOneWithoutPlayersHereNestedInput = {
    create?: XOR<SystemCreateWithoutPlayersHereInput, SystemUncheckedCreateWithoutPlayersHereInput>
    connectOrCreate?: SystemCreateOrConnectWithoutPlayersHereInput
    upsert?: SystemUpsertWithoutPlayersHereInput
    disconnect?: SystemWhereInput | boolean
    delete?: SystemWhereInput | boolean
    connect?: SystemWhereUniqueInput
    update?: XOR<XOR<SystemUpdateToOneWithWhereWithoutPlayersHereInput, SystemUpdateWithoutPlayersHereInput>, SystemUncheckedUpdateWithoutPlayersHereInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ShipCreateNestedManyWithoutRaceInput = {
    create?: XOR<ShipCreateWithoutRaceInput, ShipUncheckedCreateWithoutRaceInput> | ShipCreateWithoutRaceInput[] | ShipUncheckedCreateWithoutRaceInput[]
    connectOrCreate?: ShipCreateOrConnectWithoutRaceInput | ShipCreateOrConnectWithoutRaceInput[]
    createMany?: ShipCreateManyRaceInputEnvelope
    connect?: ShipWhereUniqueInput | ShipWhereUniqueInput[]
  }

  export type WeaponCreateNestedManyWithoutRaceInput = {
    create?: XOR<WeaponCreateWithoutRaceInput, WeaponUncheckedCreateWithoutRaceInput> | WeaponCreateWithoutRaceInput[] | WeaponUncheckedCreateWithoutRaceInput[]
    connectOrCreate?: WeaponCreateOrConnectWithoutRaceInput | WeaponCreateOrConnectWithoutRaceInput[]
    createMany?: WeaponCreateManyRaceInputEnvelope
    connect?: WeaponWhereUniqueInput | WeaponWhereUniqueInput[]
  }

  export type GoodCreateNestedManyWithoutRaceInput = {
    create?: XOR<GoodCreateWithoutRaceInput, GoodUncheckedCreateWithoutRaceInput> | GoodCreateWithoutRaceInput[] | GoodUncheckedCreateWithoutRaceInput[]
    connectOrCreate?: GoodCreateOrConnectWithoutRaceInput | GoodCreateOrConnectWithoutRaceInput[]
    createMany?: GoodCreateManyRaceInputEnvelope
    connect?: GoodWhereUniqueInput | GoodWhereUniqueInput[]
  }

  export type ShipUncheckedCreateNestedManyWithoutRaceInput = {
    create?: XOR<ShipCreateWithoutRaceInput, ShipUncheckedCreateWithoutRaceInput> | ShipCreateWithoutRaceInput[] | ShipUncheckedCreateWithoutRaceInput[]
    connectOrCreate?: ShipCreateOrConnectWithoutRaceInput | ShipCreateOrConnectWithoutRaceInput[]
    createMany?: ShipCreateManyRaceInputEnvelope
    connect?: ShipWhereUniqueInput | ShipWhereUniqueInput[]
  }

  export type WeaponUncheckedCreateNestedManyWithoutRaceInput = {
    create?: XOR<WeaponCreateWithoutRaceInput, WeaponUncheckedCreateWithoutRaceInput> | WeaponCreateWithoutRaceInput[] | WeaponUncheckedCreateWithoutRaceInput[]
    connectOrCreate?: WeaponCreateOrConnectWithoutRaceInput | WeaponCreateOrConnectWithoutRaceInput[]
    createMany?: WeaponCreateManyRaceInputEnvelope
    connect?: WeaponWhereUniqueInput | WeaponWhereUniqueInput[]
  }

  export type GoodUncheckedCreateNestedManyWithoutRaceInput = {
    create?: XOR<GoodCreateWithoutRaceInput, GoodUncheckedCreateWithoutRaceInput> | GoodCreateWithoutRaceInput[] | GoodUncheckedCreateWithoutRaceInput[]
    connectOrCreate?: GoodCreateOrConnectWithoutRaceInput | GoodCreateOrConnectWithoutRaceInput[]
    createMany?: GoodCreateManyRaceInputEnvelope
    connect?: GoodWhereUniqueInput | GoodWhereUniqueInput[]
  }

  export type ShipUpdateManyWithoutRaceNestedInput = {
    create?: XOR<ShipCreateWithoutRaceInput, ShipUncheckedCreateWithoutRaceInput> | ShipCreateWithoutRaceInput[] | ShipUncheckedCreateWithoutRaceInput[]
    connectOrCreate?: ShipCreateOrConnectWithoutRaceInput | ShipCreateOrConnectWithoutRaceInput[]
    upsert?: ShipUpsertWithWhereUniqueWithoutRaceInput | ShipUpsertWithWhereUniqueWithoutRaceInput[]
    createMany?: ShipCreateManyRaceInputEnvelope
    set?: ShipWhereUniqueInput | ShipWhereUniqueInput[]
    disconnect?: ShipWhereUniqueInput | ShipWhereUniqueInput[]
    delete?: ShipWhereUniqueInput | ShipWhereUniqueInput[]
    connect?: ShipWhereUniqueInput | ShipWhereUniqueInput[]
    update?: ShipUpdateWithWhereUniqueWithoutRaceInput | ShipUpdateWithWhereUniqueWithoutRaceInput[]
    updateMany?: ShipUpdateManyWithWhereWithoutRaceInput | ShipUpdateManyWithWhereWithoutRaceInput[]
    deleteMany?: ShipScalarWhereInput | ShipScalarWhereInput[]
  }

  export type WeaponUpdateManyWithoutRaceNestedInput = {
    create?: XOR<WeaponCreateWithoutRaceInput, WeaponUncheckedCreateWithoutRaceInput> | WeaponCreateWithoutRaceInput[] | WeaponUncheckedCreateWithoutRaceInput[]
    connectOrCreate?: WeaponCreateOrConnectWithoutRaceInput | WeaponCreateOrConnectWithoutRaceInput[]
    upsert?: WeaponUpsertWithWhereUniqueWithoutRaceInput | WeaponUpsertWithWhereUniqueWithoutRaceInput[]
    createMany?: WeaponCreateManyRaceInputEnvelope
    set?: WeaponWhereUniqueInput | WeaponWhereUniqueInput[]
    disconnect?: WeaponWhereUniqueInput | WeaponWhereUniqueInput[]
    delete?: WeaponWhereUniqueInput | WeaponWhereUniqueInput[]
    connect?: WeaponWhereUniqueInput | WeaponWhereUniqueInput[]
    update?: WeaponUpdateWithWhereUniqueWithoutRaceInput | WeaponUpdateWithWhereUniqueWithoutRaceInput[]
    updateMany?: WeaponUpdateManyWithWhereWithoutRaceInput | WeaponUpdateManyWithWhereWithoutRaceInput[]
    deleteMany?: WeaponScalarWhereInput | WeaponScalarWhereInput[]
  }

  export type GoodUpdateManyWithoutRaceNestedInput = {
    create?: XOR<GoodCreateWithoutRaceInput, GoodUncheckedCreateWithoutRaceInput> | GoodCreateWithoutRaceInput[] | GoodUncheckedCreateWithoutRaceInput[]
    connectOrCreate?: GoodCreateOrConnectWithoutRaceInput | GoodCreateOrConnectWithoutRaceInput[]
    upsert?: GoodUpsertWithWhereUniqueWithoutRaceInput | GoodUpsertWithWhereUniqueWithoutRaceInput[]
    createMany?: GoodCreateManyRaceInputEnvelope
    set?: GoodWhereUniqueInput | GoodWhereUniqueInput[]
    disconnect?: GoodWhereUniqueInput | GoodWhereUniqueInput[]
    delete?: GoodWhereUniqueInput | GoodWhereUniqueInput[]
    connect?: GoodWhereUniqueInput | GoodWhereUniqueInput[]
    update?: GoodUpdateWithWhereUniqueWithoutRaceInput | GoodUpdateWithWhereUniqueWithoutRaceInput[]
    updateMany?: GoodUpdateManyWithWhereWithoutRaceInput | GoodUpdateManyWithWhereWithoutRaceInput[]
    deleteMany?: GoodScalarWhereInput | GoodScalarWhereInput[]
  }

  export type ShipUncheckedUpdateManyWithoutRaceNestedInput = {
    create?: XOR<ShipCreateWithoutRaceInput, ShipUncheckedCreateWithoutRaceInput> | ShipCreateWithoutRaceInput[] | ShipUncheckedCreateWithoutRaceInput[]
    connectOrCreate?: ShipCreateOrConnectWithoutRaceInput | ShipCreateOrConnectWithoutRaceInput[]
    upsert?: ShipUpsertWithWhereUniqueWithoutRaceInput | ShipUpsertWithWhereUniqueWithoutRaceInput[]
    createMany?: ShipCreateManyRaceInputEnvelope
    set?: ShipWhereUniqueInput | ShipWhereUniqueInput[]
    disconnect?: ShipWhereUniqueInput | ShipWhereUniqueInput[]
    delete?: ShipWhereUniqueInput | ShipWhereUniqueInput[]
    connect?: ShipWhereUniqueInput | ShipWhereUniqueInput[]
    update?: ShipUpdateWithWhereUniqueWithoutRaceInput | ShipUpdateWithWhereUniqueWithoutRaceInput[]
    updateMany?: ShipUpdateManyWithWhereWithoutRaceInput | ShipUpdateManyWithWhereWithoutRaceInput[]
    deleteMany?: ShipScalarWhereInput | ShipScalarWhereInput[]
  }

  export type WeaponUncheckedUpdateManyWithoutRaceNestedInput = {
    create?: XOR<WeaponCreateWithoutRaceInput, WeaponUncheckedCreateWithoutRaceInput> | WeaponCreateWithoutRaceInput[] | WeaponUncheckedCreateWithoutRaceInput[]
    connectOrCreate?: WeaponCreateOrConnectWithoutRaceInput | WeaponCreateOrConnectWithoutRaceInput[]
    upsert?: WeaponUpsertWithWhereUniqueWithoutRaceInput | WeaponUpsertWithWhereUniqueWithoutRaceInput[]
    createMany?: WeaponCreateManyRaceInputEnvelope
    set?: WeaponWhereUniqueInput | WeaponWhereUniqueInput[]
    disconnect?: WeaponWhereUniqueInput | WeaponWhereUniqueInput[]
    delete?: WeaponWhereUniqueInput | WeaponWhereUniqueInput[]
    connect?: WeaponWhereUniqueInput | WeaponWhereUniqueInput[]
    update?: WeaponUpdateWithWhereUniqueWithoutRaceInput | WeaponUpdateWithWhereUniqueWithoutRaceInput[]
    updateMany?: WeaponUpdateManyWithWhereWithoutRaceInput | WeaponUpdateManyWithWhereWithoutRaceInput[]
    deleteMany?: WeaponScalarWhereInput | WeaponScalarWhereInput[]
  }

  export type GoodUncheckedUpdateManyWithoutRaceNestedInput = {
    create?: XOR<GoodCreateWithoutRaceInput, GoodUncheckedCreateWithoutRaceInput> | GoodCreateWithoutRaceInput[] | GoodUncheckedCreateWithoutRaceInput[]
    connectOrCreate?: GoodCreateOrConnectWithoutRaceInput | GoodCreateOrConnectWithoutRaceInput[]
    upsert?: GoodUpsertWithWhereUniqueWithoutRaceInput | GoodUpsertWithWhereUniqueWithoutRaceInput[]
    createMany?: GoodCreateManyRaceInputEnvelope
    set?: GoodWhereUniqueInput | GoodWhereUniqueInput[]
    disconnect?: GoodWhereUniqueInput | GoodWhereUniqueInput[]
    delete?: GoodWhereUniqueInput | GoodWhereUniqueInput[]
    connect?: GoodWhereUniqueInput | GoodWhereUniqueInput[]
    update?: GoodUpdateWithWhereUniqueWithoutRaceInput | GoodUpdateWithWhereUniqueWithoutRaceInput[]
    updateMany?: GoodUpdateManyWithWhereWithoutRaceInput | GoodUpdateManyWithWhereWithoutRaceInput[]
    deleteMany?: GoodScalarWhereInput | GoodScalarWhereInput[]
  }

  export type ShipCreateNestedManyWithoutRankInput = {
    create?: XOR<ShipCreateWithoutRankInput, ShipUncheckedCreateWithoutRankInput> | ShipCreateWithoutRankInput[] | ShipUncheckedCreateWithoutRankInput[]
    connectOrCreate?: ShipCreateOrConnectWithoutRankInput | ShipCreateOrConnectWithoutRankInput[]
    createMany?: ShipCreateManyRankInputEnvelope
    connect?: ShipWhereUniqueInput | ShipWhereUniqueInput[]
  }

  export type ShipUncheckedCreateNestedManyWithoutRankInput = {
    create?: XOR<ShipCreateWithoutRankInput, ShipUncheckedCreateWithoutRankInput> | ShipCreateWithoutRankInput[] | ShipUncheckedCreateWithoutRankInput[]
    connectOrCreate?: ShipCreateOrConnectWithoutRankInput | ShipCreateOrConnectWithoutRankInput[]
    createMany?: ShipCreateManyRankInputEnvelope
    connect?: ShipWhereUniqueInput | ShipWhereUniqueInput[]
  }

  export type ShipUpdateManyWithoutRankNestedInput = {
    create?: XOR<ShipCreateWithoutRankInput, ShipUncheckedCreateWithoutRankInput> | ShipCreateWithoutRankInput[] | ShipUncheckedCreateWithoutRankInput[]
    connectOrCreate?: ShipCreateOrConnectWithoutRankInput | ShipCreateOrConnectWithoutRankInput[]
    upsert?: ShipUpsertWithWhereUniqueWithoutRankInput | ShipUpsertWithWhereUniqueWithoutRankInput[]
    createMany?: ShipCreateManyRankInputEnvelope
    set?: ShipWhereUniqueInput | ShipWhereUniqueInput[]
    disconnect?: ShipWhereUniqueInput | ShipWhereUniqueInput[]
    delete?: ShipWhereUniqueInput | ShipWhereUniqueInput[]
    connect?: ShipWhereUniqueInput | ShipWhereUniqueInput[]
    update?: ShipUpdateWithWhereUniqueWithoutRankInput | ShipUpdateWithWhereUniqueWithoutRankInput[]
    updateMany?: ShipUpdateManyWithWhereWithoutRankInput | ShipUpdateManyWithWhereWithoutRankInput[]
    deleteMany?: ShipScalarWhereInput | ShipScalarWhereInput[]
  }

  export type ShipUncheckedUpdateManyWithoutRankNestedInput = {
    create?: XOR<ShipCreateWithoutRankInput, ShipUncheckedCreateWithoutRankInput> | ShipCreateWithoutRankInput[] | ShipUncheckedCreateWithoutRankInput[]
    connectOrCreate?: ShipCreateOrConnectWithoutRankInput | ShipCreateOrConnectWithoutRankInput[]
    upsert?: ShipUpsertWithWhereUniqueWithoutRankInput | ShipUpsertWithWhereUniqueWithoutRankInput[]
    createMany?: ShipCreateManyRankInputEnvelope
    set?: ShipWhereUniqueInput | ShipWhereUniqueInput[]
    disconnect?: ShipWhereUniqueInput | ShipWhereUniqueInput[]
    delete?: ShipWhereUniqueInput | ShipWhereUniqueInput[]
    connect?: ShipWhereUniqueInput | ShipWhereUniqueInput[]
    update?: ShipUpdateWithWhereUniqueWithoutRankInput | ShipUpdateWithWhereUniqueWithoutRankInput[]
    updateMany?: ShipUpdateManyWithWhereWithoutRankInput | ShipUpdateManyWithWhereWithoutRankInput[]
    deleteMany?: ShipScalarWhereInput | ShipScalarWhereInput[]
  }

  export type PortCreateNestedManyWithoutSystemInput = {
    create?: XOR<PortCreateWithoutSystemInput, PortUncheckedCreateWithoutSystemInput> | PortCreateWithoutSystemInput[] | PortUncheckedCreateWithoutSystemInput[]
    connectOrCreate?: PortCreateOrConnectWithoutSystemInput | PortCreateOrConnectWithoutSystemInput[]
    createMany?: PortCreateManySystemInputEnvelope
    connect?: PortWhereUniqueInput | PortWhereUniqueInput[]
  }

  export type PlayerCreateNestedManyWithoutCurrentSystemInput = {
    create?: XOR<PlayerCreateWithoutCurrentSystemInput, PlayerUncheckedCreateWithoutCurrentSystemInput> | PlayerCreateWithoutCurrentSystemInput[] | PlayerUncheckedCreateWithoutCurrentSystemInput[]
    connectOrCreate?: PlayerCreateOrConnectWithoutCurrentSystemInput | PlayerCreateOrConnectWithoutCurrentSystemInput[]
    createMany?: PlayerCreateManyCurrentSystemInputEnvelope
    connect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
  }

  export type PortUncheckedCreateNestedManyWithoutSystemInput = {
    create?: XOR<PortCreateWithoutSystemInput, PortUncheckedCreateWithoutSystemInput> | PortCreateWithoutSystemInput[] | PortUncheckedCreateWithoutSystemInput[]
    connectOrCreate?: PortCreateOrConnectWithoutSystemInput | PortCreateOrConnectWithoutSystemInput[]
    createMany?: PortCreateManySystemInputEnvelope
    connect?: PortWhereUniqueInput | PortWhereUniqueInput[]
  }

  export type PlayerUncheckedCreateNestedManyWithoutCurrentSystemInput = {
    create?: XOR<PlayerCreateWithoutCurrentSystemInput, PlayerUncheckedCreateWithoutCurrentSystemInput> | PlayerCreateWithoutCurrentSystemInput[] | PlayerUncheckedCreateWithoutCurrentSystemInput[]
    connectOrCreate?: PlayerCreateOrConnectWithoutCurrentSystemInput | PlayerCreateOrConnectWithoutCurrentSystemInput[]
    createMany?: PlayerCreateManyCurrentSystemInputEnvelope
    connect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type PortUpdateManyWithoutSystemNestedInput = {
    create?: XOR<PortCreateWithoutSystemInput, PortUncheckedCreateWithoutSystemInput> | PortCreateWithoutSystemInput[] | PortUncheckedCreateWithoutSystemInput[]
    connectOrCreate?: PortCreateOrConnectWithoutSystemInput | PortCreateOrConnectWithoutSystemInput[]
    upsert?: PortUpsertWithWhereUniqueWithoutSystemInput | PortUpsertWithWhereUniqueWithoutSystemInput[]
    createMany?: PortCreateManySystemInputEnvelope
    set?: PortWhereUniqueInput | PortWhereUniqueInput[]
    disconnect?: PortWhereUniqueInput | PortWhereUniqueInput[]
    delete?: PortWhereUniqueInput | PortWhereUniqueInput[]
    connect?: PortWhereUniqueInput | PortWhereUniqueInput[]
    update?: PortUpdateWithWhereUniqueWithoutSystemInput | PortUpdateWithWhereUniqueWithoutSystemInput[]
    updateMany?: PortUpdateManyWithWhereWithoutSystemInput | PortUpdateManyWithWhereWithoutSystemInput[]
    deleteMany?: PortScalarWhereInput | PortScalarWhereInput[]
  }

  export type PlayerUpdateManyWithoutCurrentSystemNestedInput = {
    create?: XOR<PlayerCreateWithoutCurrentSystemInput, PlayerUncheckedCreateWithoutCurrentSystemInput> | PlayerCreateWithoutCurrentSystemInput[] | PlayerUncheckedCreateWithoutCurrentSystemInput[]
    connectOrCreate?: PlayerCreateOrConnectWithoutCurrentSystemInput | PlayerCreateOrConnectWithoutCurrentSystemInput[]
    upsert?: PlayerUpsertWithWhereUniqueWithoutCurrentSystemInput | PlayerUpsertWithWhereUniqueWithoutCurrentSystemInput[]
    createMany?: PlayerCreateManyCurrentSystemInputEnvelope
    set?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    disconnect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    delete?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    connect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    update?: PlayerUpdateWithWhereUniqueWithoutCurrentSystemInput | PlayerUpdateWithWhereUniqueWithoutCurrentSystemInput[]
    updateMany?: PlayerUpdateManyWithWhereWithoutCurrentSystemInput | PlayerUpdateManyWithWhereWithoutCurrentSystemInput[]
    deleteMany?: PlayerScalarWhereInput | PlayerScalarWhereInput[]
  }

  export type PortUncheckedUpdateManyWithoutSystemNestedInput = {
    create?: XOR<PortCreateWithoutSystemInput, PortUncheckedCreateWithoutSystemInput> | PortCreateWithoutSystemInput[] | PortUncheckedCreateWithoutSystemInput[]
    connectOrCreate?: PortCreateOrConnectWithoutSystemInput | PortCreateOrConnectWithoutSystemInput[]
    upsert?: PortUpsertWithWhereUniqueWithoutSystemInput | PortUpsertWithWhereUniqueWithoutSystemInput[]
    createMany?: PortCreateManySystemInputEnvelope
    set?: PortWhereUniqueInput | PortWhereUniqueInput[]
    disconnect?: PortWhereUniqueInput | PortWhereUniqueInput[]
    delete?: PortWhereUniqueInput | PortWhereUniqueInput[]
    connect?: PortWhereUniqueInput | PortWhereUniqueInput[]
    update?: PortUpdateWithWhereUniqueWithoutSystemInput | PortUpdateWithWhereUniqueWithoutSystemInput[]
    updateMany?: PortUpdateManyWithWhereWithoutSystemInput | PortUpdateManyWithWhereWithoutSystemInput[]
    deleteMany?: PortScalarWhereInput | PortScalarWhereInput[]
  }

  export type PlayerUncheckedUpdateManyWithoutCurrentSystemNestedInput = {
    create?: XOR<PlayerCreateWithoutCurrentSystemInput, PlayerUncheckedCreateWithoutCurrentSystemInput> | PlayerCreateWithoutCurrentSystemInput[] | PlayerUncheckedCreateWithoutCurrentSystemInput[]
    connectOrCreate?: PlayerCreateOrConnectWithoutCurrentSystemInput | PlayerCreateOrConnectWithoutCurrentSystemInput[]
    upsert?: PlayerUpsertWithWhereUniqueWithoutCurrentSystemInput | PlayerUpsertWithWhereUniqueWithoutCurrentSystemInput[]
    createMany?: PlayerCreateManyCurrentSystemInputEnvelope
    set?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    disconnect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    delete?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    connect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    update?: PlayerUpdateWithWhereUniqueWithoutCurrentSystemInput | PlayerUpdateWithWhereUniqueWithoutCurrentSystemInput[]
    updateMany?: PlayerUpdateManyWithWhereWithoutCurrentSystemInput | PlayerUpdateManyWithWhereWithoutCurrentSystemInput[]
    deleteMany?: PlayerScalarWhereInput | PlayerScalarWhereInput[]
  }

  export type SystemCreateNestedOneWithoutPortsInput = {
    create?: XOR<SystemCreateWithoutPortsInput, SystemUncheckedCreateWithoutPortsInput>
    connectOrCreate?: SystemCreateOrConnectWithoutPortsInput
    connect?: SystemWhereUniqueInput
  }

  export type SystemUpdateOneRequiredWithoutPortsNestedInput = {
    create?: XOR<SystemCreateWithoutPortsInput, SystemUncheckedCreateWithoutPortsInput>
    connectOrCreate?: SystemCreateOrConnectWithoutPortsInput
    upsert?: SystemUpsertWithoutPortsInput
    connect?: SystemWhereUniqueInput
    update?: XOR<XOR<SystemUpdateToOneWithWhereWithoutPortsInput, SystemUpdateWithoutPortsInput>, SystemUncheckedUpdateWithoutPortsInput>
  }

  export type RaceCreateNestedOneWithoutGoodsInput = {
    create?: XOR<RaceCreateWithoutGoodsInput, RaceUncheckedCreateWithoutGoodsInput>
    connectOrCreate?: RaceCreateOrConnectWithoutGoodsInput
    connect?: RaceWhereUniqueInput
  }

  export type WeaponCreateNestedManyWithoutGoodInput = {
    create?: XOR<WeaponCreateWithoutGoodInput, WeaponUncheckedCreateWithoutGoodInput> | WeaponCreateWithoutGoodInput[] | WeaponUncheckedCreateWithoutGoodInput[]
    connectOrCreate?: WeaponCreateOrConnectWithoutGoodInput | WeaponCreateOrConnectWithoutGoodInput[]
    createMany?: WeaponCreateManyGoodInputEnvelope
    connect?: WeaponWhereUniqueInput | WeaponWhereUniqueInput[]
  }

  export type WeaponCreateNestedManyWithoutAmmunitionInput = {
    create?: XOR<WeaponCreateWithoutAmmunitionInput, WeaponUncheckedCreateWithoutAmmunitionInput> | WeaponCreateWithoutAmmunitionInput[] | WeaponUncheckedCreateWithoutAmmunitionInput[]
    connectOrCreate?: WeaponCreateOrConnectWithoutAmmunitionInput | WeaponCreateOrConnectWithoutAmmunitionInput[]
    createMany?: WeaponCreateManyAmmunitionInputEnvelope
    connect?: WeaponWhereUniqueInput | WeaponWhereUniqueInput[]
  }

  export type WeaponUncheckedCreateNestedManyWithoutGoodInput = {
    create?: XOR<WeaponCreateWithoutGoodInput, WeaponUncheckedCreateWithoutGoodInput> | WeaponCreateWithoutGoodInput[] | WeaponUncheckedCreateWithoutGoodInput[]
    connectOrCreate?: WeaponCreateOrConnectWithoutGoodInput | WeaponCreateOrConnectWithoutGoodInput[]
    createMany?: WeaponCreateManyGoodInputEnvelope
    connect?: WeaponWhereUniqueInput | WeaponWhereUniqueInput[]
  }

  export type WeaponUncheckedCreateNestedManyWithoutAmmunitionInput = {
    create?: XOR<WeaponCreateWithoutAmmunitionInput, WeaponUncheckedCreateWithoutAmmunitionInput> | WeaponCreateWithoutAmmunitionInput[] | WeaponUncheckedCreateWithoutAmmunitionInput[]
    connectOrCreate?: WeaponCreateOrConnectWithoutAmmunitionInput | WeaponCreateOrConnectWithoutAmmunitionInput[]
    createMany?: WeaponCreateManyAmmunitionInputEnvelope
    connect?: WeaponWhereUniqueInput | WeaponWhereUniqueInput[]
  }

  export type RaceUpdateOneWithoutGoodsNestedInput = {
    create?: XOR<RaceCreateWithoutGoodsInput, RaceUncheckedCreateWithoutGoodsInput>
    connectOrCreate?: RaceCreateOrConnectWithoutGoodsInput
    upsert?: RaceUpsertWithoutGoodsInput
    disconnect?: RaceWhereInput | boolean
    delete?: RaceWhereInput | boolean
    connect?: RaceWhereUniqueInput
    update?: XOR<XOR<RaceUpdateToOneWithWhereWithoutGoodsInput, RaceUpdateWithoutGoodsInput>, RaceUncheckedUpdateWithoutGoodsInput>
  }

  export type WeaponUpdateManyWithoutGoodNestedInput = {
    create?: XOR<WeaponCreateWithoutGoodInput, WeaponUncheckedCreateWithoutGoodInput> | WeaponCreateWithoutGoodInput[] | WeaponUncheckedCreateWithoutGoodInput[]
    connectOrCreate?: WeaponCreateOrConnectWithoutGoodInput | WeaponCreateOrConnectWithoutGoodInput[]
    upsert?: WeaponUpsertWithWhereUniqueWithoutGoodInput | WeaponUpsertWithWhereUniqueWithoutGoodInput[]
    createMany?: WeaponCreateManyGoodInputEnvelope
    set?: WeaponWhereUniqueInput | WeaponWhereUniqueInput[]
    disconnect?: WeaponWhereUniqueInput | WeaponWhereUniqueInput[]
    delete?: WeaponWhereUniqueInput | WeaponWhereUniqueInput[]
    connect?: WeaponWhereUniqueInput | WeaponWhereUniqueInput[]
    update?: WeaponUpdateWithWhereUniqueWithoutGoodInput | WeaponUpdateWithWhereUniqueWithoutGoodInput[]
    updateMany?: WeaponUpdateManyWithWhereWithoutGoodInput | WeaponUpdateManyWithWhereWithoutGoodInput[]
    deleteMany?: WeaponScalarWhereInput | WeaponScalarWhereInput[]
  }

  export type WeaponUpdateManyWithoutAmmunitionNestedInput = {
    create?: XOR<WeaponCreateWithoutAmmunitionInput, WeaponUncheckedCreateWithoutAmmunitionInput> | WeaponCreateWithoutAmmunitionInput[] | WeaponUncheckedCreateWithoutAmmunitionInput[]
    connectOrCreate?: WeaponCreateOrConnectWithoutAmmunitionInput | WeaponCreateOrConnectWithoutAmmunitionInput[]
    upsert?: WeaponUpsertWithWhereUniqueWithoutAmmunitionInput | WeaponUpsertWithWhereUniqueWithoutAmmunitionInput[]
    createMany?: WeaponCreateManyAmmunitionInputEnvelope
    set?: WeaponWhereUniqueInput | WeaponWhereUniqueInput[]
    disconnect?: WeaponWhereUniqueInput | WeaponWhereUniqueInput[]
    delete?: WeaponWhereUniqueInput | WeaponWhereUniqueInput[]
    connect?: WeaponWhereUniqueInput | WeaponWhereUniqueInput[]
    update?: WeaponUpdateWithWhereUniqueWithoutAmmunitionInput | WeaponUpdateWithWhereUniqueWithoutAmmunitionInput[]
    updateMany?: WeaponUpdateManyWithWhereWithoutAmmunitionInput | WeaponUpdateManyWithWhereWithoutAmmunitionInput[]
    deleteMany?: WeaponScalarWhereInput | WeaponScalarWhereInput[]
  }

  export type WeaponUncheckedUpdateManyWithoutGoodNestedInput = {
    create?: XOR<WeaponCreateWithoutGoodInput, WeaponUncheckedCreateWithoutGoodInput> | WeaponCreateWithoutGoodInput[] | WeaponUncheckedCreateWithoutGoodInput[]
    connectOrCreate?: WeaponCreateOrConnectWithoutGoodInput | WeaponCreateOrConnectWithoutGoodInput[]
    upsert?: WeaponUpsertWithWhereUniqueWithoutGoodInput | WeaponUpsertWithWhereUniqueWithoutGoodInput[]
    createMany?: WeaponCreateManyGoodInputEnvelope
    set?: WeaponWhereUniqueInput | WeaponWhereUniqueInput[]
    disconnect?: WeaponWhereUniqueInput | WeaponWhereUniqueInput[]
    delete?: WeaponWhereUniqueInput | WeaponWhereUniqueInput[]
    connect?: WeaponWhereUniqueInput | WeaponWhereUniqueInput[]
    update?: WeaponUpdateWithWhereUniqueWithoutGoodInput | WeaponUpdateWithWhereUniqueWithoutGoodInput[]
    updateMany?: WeaponUpdateManyWithWhereWithoutGoodInput | WeaponUpdateManyWithWhereWithoutGoodInput[]
    deleteMany?: WeaponScalarWhereInput | WeaponScalarWhereInput[]
  }

  export type WeaponUncheckedUpdateManyWithoutAmmunitionNestedInput = {
    create?: XOR<WeaponCreateWithoutAmmunitionInput, WeaponUncheckedCreateWithoutAmmunitionInput> | WeaponCreateWithoutAmmunitionInput[] | WeaponUncheckedCreateWithoutAmmunitionInput[]
    connectOrCreate?: WeaponCreateOrConnectWithoutAmmunitionInput | WeaponCreateOrConnectWithoutAmmunitionInput[]
    upsert?: WeaponUpsertWithWhereUniqueWithoutAmmunitionInput | WeaponUpsertWithWhereUniqueWithoutAmmunitionInput[]
    createMany?: WeaponCreateManyAmmunitionInputEnvelope
    set?: WeaponWhereUniqueInput | WeaponWhereUniqueInput[]
    disconnect?: WeaponWhereUniqueInput | WeaponWhereUniqueInput[]
    delete?: WeaponWhereUniqueInput | WeaponWhereUniqueInput[]
    connect?: WeaponWhereUniqueInput | WeaponWhereUniqueInput[]
    update?: WeaponUpdateWithWhereUniqueWithoutAmmunitionInput | WeaponUpdateWithWhereUniqueWithoutAmmunitionInput[]
    updateMany?: WeaponUpdateManyWithWhereWithoutAmmunitionInput | WeaponUpdateManyWithWhereWithoutAmmunitionInput[]
    deleteMany?: WeaponScalarWhereInput | WeaponScalarWhereInput[]
  }

  export type RaceCreateNestedOneWithoutShipsInput = {
    create?: XOR<RaceCreateWithoutShipsInput, RaceUncheckedCreateWithoutShipsInput>
    connectOrCreate?: RaceCreateOrConnectWithoutShipsInput
    connect?: RaceWhereUniqueInput
  }

  export type RankCreateNestedOneWithoutShipsInput = {
    create?: XOR<RankCreateWithoutShipsInput, RankUncheckedCreateWithoutShipsInput>
    connectOrCreate?: RankCreateOrConnectWithoutShipsInput
    connect?: RankWhereUniqueInput
  }

  export type PlayerCreateNestedManyWithoutShipInput = {
    create?: XOR<PlayerCreateWithoutShipInput, PlayerUncheckedCreateWithoutShipInput> | PlayerCreateWithoutShipInput[] | PlayerUncheckedCreateWithoutShipInput[]
    connectOrCreate?: PlayerCreateOrConnectWithoutShipInput | PlayerCreateOrConnectWithoutShipInput[]
    createMany?: PlayerCreateManyShipInputEnvelope
    connect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
  }

  export type PlayerUncheckedCreateNestedManyWithoutShipInput = {
    create?: XOR<PlayerCreateWithoutShipInput, PlayerUncheckedCreateWithoutShipInput> | PlayerCreateWithoutShipInput[] | PlayerUncheckedCreateWithoutShipInput[]
    connectOrCreate?: PlayerCreateOrConnectWithoutShipInput | PlayerCreateOrConnectWithoutShipInput[]
    createMany?: PlayerCreateManyShipInputEnvelope
    connect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type RaceUpdateOneRequiredWithoutShipsNestedInput = {
    create?: XOR<RaceCreateWithoutShipsInput, RaceUncheckedCreateWithoutShipsInput>
    connectOrCreate?: RaceCreateOrConnectWithoutShipsInput
    upsert?: RaceUpsertWithoutShipsInput
    connect?: RaceWhereUniqueInput
    update?: XOR<XOR<RaceUpdateToOneWithWhereWithoutShipsInput, RaceUpdateWithoutShipsInput>, RaceUncheckedUpdateWithoutShipsInput>
  }

  export type RankUpdateOneRequiredWithoutShipsNestedInput = {
    create?: XOR<RankCreateWithoutShipsInput, RankUncheckedCreateWithoutShipsInput>
    connectOrCreate?: RankCreateOrConnectWithoutShipsInput
    upsert?: RankUpsertWithoutShipsInput
    connect?: RankWhereUniqueInput
    update?: XOR<XOR<RankUpdateToOneWithWhereWithoutShipsInput, RankUpdateWithoutShipsInput>, RankUncheckedUpdateWithoutShipsInput>
  }

  export type PlayerUpdateManyWithoutShipNestedInput = {
    create?: XOR<PlayerCreateWithoutShipInput, PlayerUncheckedCreateWithoutShipInput> | PlayerCreateWithoutShipInput[] | PlayerUncheckedCreateWithoutShipInput[]
    connectOrCreate?: PlayerCreateOrConnectWithoutShipInput | PlayerCreateOrConnectWithoutShipInput[]
    upsert?: PlayerUpsertWithWhereUniqueWithoutShipInput | PlayerUpsertWithWhereUniqueWithoutShipInput[]
    createMany?: PlayerCreateManyShipInputEnvelope
    set?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    disconnect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    delete?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    connect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    update?: PlayerUpdateWithWhereUniqueWithoutShipInput | PlayerUpdateWithWhereUniqueWithoutShipInput[]
    updateMany?: PlayerUpdateManyWithWhereWithoutShipInput | PlayerUpdateManyWithWhereWithoutShipInput[]
    deleteMany?: PlayerScalarWhereInput | PlayerScalarWhereInput[]
  }

  export type PlayerUncheckedUpdateManyWithoutShipNestedInput = {
    create?: XOR<PlayerCreateWithoutShipInput, PlayerUncheckedCreateWithoutShipInput> | PlayerCreateWithoutShipInput[] | PlayerUncheckedCreateWithoutShipInput[]
    connectOrCreate?: PlayerCreateOrConnectWithoutShipInput | PlayerCreateOrConnectWithoutShipInput[]
    upsert?: PlayerUpsertWithWhereUniqueWithoutShipInput | PlayerUpsertWithWhereUniqueWithoutShipInput[]
    createMany?: PlayerCreateManyShipInputEnvelope
    set?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    disconnect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    delete?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    connect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    update?: PlayerUpdateWithWhereUniqueWithoutShipInput | PlayerUpdateWithWhereUniqueWithoutShipInput[]
    updateMany?: PlayerUpdateManyWithWhereWithoutShipInput | PlayerUpdateManyWithWhereWithoutShipInput[]
    deleteMany?: PlayerScalarWhereInput | PlayerScalarWhereInput[]
  }

  export type GoodCreateNestedOneWithoutWeaponsInput = {
    create?: XOR<GoodCreateWithoutWeaponsInput, GoodUncheckedCreateWithoutWeaponsInput>
    connectOrCreate?: GoodCreateOrConnectWithoutWeaponsInput
    connect?: GoodWhereUniqueInput
  }

  export type RaceCreateNestedOneWithoutWeaponsInput = {
    create?: XOR<RaceCreateWithoutWeaponsInput, RaceUncheckedCreateWithoutWeaponsInput>
    connectOrCreate?: RaceCreateOrConnectWithoutWeaponsInput
    connect?: RaceWhereUniqueInput
  }

  export type GoodCreateNestedOneWithoutAmmunitionsInput = {
    create?: XOR<GoodCreateWithoutAmmunitionsInput, GoodUncheckedCreateWithoutAmmunitionsInput>
    connectOrCreate?: GoodCreateOrConnectWithoutAmmunitionsInput
    connect?: GoodWhereUniqueInput
  }

  export type GoodUpdateOneRequiredWithoutWeaponsNestedInput = {
    create?: XOR<GoodCreateWithoutWeaponsInput, GoodUncheckedCreateWithoutWeaponsInput>
    connectOrCreate?: GoodCreateOrConnectWithoutWeaponsInput
    upsert?: GoodUpsertWithoutWeaponsInput
    connect?: GoodWhereUniqueInput
    update?: XOR<XOR<GoodUpdateToOneWithWhereWithoutWeaponsInput, GoodUpdateWithoutWeaponsInput>, GoodUncheckedUpdateWithoutWeaponsInput>
  }

  export type RaceUpdateOneWithoutWeaponsNestedInput = {
    create?: XOR<RaceCreateWithoutWeaponsInput, RaceUncheckedCreateWithoutWeaponsInput>
    connectOrCreate?: RaceCreateOrConnectWithoutWeaponsInput
    upsert?: RaceUpsertWithoutWeaponsInput
    disconnect?: RaceWhereInput | boolean
    delete?: RaceWhereInput | boolean
    connect?: RaceWhereUniqueInput
    update?: XOR<XOR<RaceUpdateToOneWithWhereWithoutWeaponsInput, RaceUpdateWithoutWeaponsInput>, RaceUncheckedUpdateWithoutWeaponsInput>
  }

  export type GoodUpdateOneWithoutAmmunitionsNestedInput = {
    create?: XOR<GoodCreateWithoutAmmunitionsInput, GoodUncheckedCreateWithoutAmmunitionsInput>
    connectOrCreate?: GoodCreateOrConnectWithoutAmmunitionsInput
    upsert?: GoodUpsertWithoutAmmunitionsInput
    disconnect?: GoodWhereInput | boolean
    delete?: GoodWhereInput | boolean
    connect?: GoodWhereUniqueInput
    update?: XOR<XOR<GoodUpdateToOneWithWhereWithoutAmmunitionsInput, GoodUpdateWithoutAmmunitionsInput>, GoodUncheckedUpdateWithoutAmmunitionsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type PlayerCreateWithoutUserInput = {
    race: string
    credits?: number
    ship?: ShipCreateNestedOneWithoutPlayersInput
    currentSystem?: SystemCreateNestedOneWithoutPlayersHereInput
  }

  export type PlayerUncheckedCreateWithoutUserInput = {
    id?: number
    race: string
    credits?: number
    shipId?: number | null
    currentSystemId?: number | null
  }

  export type PlayerCreateOrConnectWithoutUserInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutUserInput, PlayerUncheckedCreateWithoutUserInput>
  }

  export type PlayerCreateManyUserInputEnvelope = {
    data: PlayerCreateManyUserInput | PlayerCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PlayerUpsertWithWhereUniqueWithoutUserInput = {
    where: PlayerWhereUniqueInput
    update: XOR<PlayerUpdateWithoutUserInput, PlayerUncheckedUpdateWithoutUserInput>
    create: XOR<PlayerCreateWithoutUserInput, PlayerUncheckedCreateWithoutUserInput>
  }

  export type PlayerUpdateWithWhereUniqueWithoutUserInput = {
    where: PlayerWhereUniqueInput
    data: XOR<PlayerUpdateWithoutUserInput, PlayerUncheckedUpdateWithoutUserInput>
  }

  export type PlayerUpdateManyWithWhereWithoutUserInput = {
    where: PlayerScalarWhereInput
    data: XOR<PlayerUpdateManyMutationInput, PlayerUncheckedUpdateManyWithoutUserInput>
  }

  export type PlayerScalarWhereInput = {
    AND?: PlayerScalarWhereInput | PlayerScalarWhereInput[]
    OR?: PlayerScalarWhereInput[]
    NOT?: PlayerScalarWhereInput | PlayerScalarWhereInput[]
    id?: IntFilter<"Player"> | number
    userId?: IntFilter<"Player"> | number
    race?: StringFilter<"Player"> | string
    credits?: IntFilter<"Player"> | number
    shipId?: IntNullableFilter<"Player"> | number | null
    currentSystemId?: IntNullableFilter<"Player"> | number | null
  }

  export type UserCreateWithoutPlayersInput = {
    username: string
    password: string
    admin?: boolean
  }

  export type UserUncheckedCreateWithoutPlayersInput = {
    id?: number
    username: string
    password: string
    admin?: boolean
  }

  export type UserCreateOrConnectWithoutPlayersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPlayersInput, UserUncheckedCreateWithoutPlayersInput>
  }

  export type ShipCreateWithoutPlayersInput = {
    name?: string | null
    cargoSpace?: number
    shields?: number
    armor?: number
    accel?: number
    cost?: number
    weaponsSlots?: number
    shieldsSlots?: number
    recharge?: number
    race: RaceCreateNestedOneWithoutShipsInput
    rank?: RankCreateNestedOneWithoutShipsInput
  }

  export type ShipUncheckedCreateWithoutPlayersInput = {
    id?: number
    name?: string | null
    raceId: number
    rankId?: number
    cargoSpace?: number
    shields?: number
    armor?: number
    accel?: number
    cost?: number
    weaponsSlots?: number
    shieldsSlots?: number
    recharge?: number
  }

  export type ShipCreateOrConnectWithoutPlayersInput = {
    where: ShipWhereUniqueInput
    create: XOR<ShipCreateWithoutPlayersInput, ShipUncheckedCreateWithoutPlayersInput>
  }

  export type SystemCreateWithoutPlayersHereInput = {
    name: string
    coordsX: number
    coordsY: number
    raceType?: string | null
    ports?: PortCreateNestedManyWithoutSystemInput
  }

  export type SystemUncheckedCreateWithoutPlayersHereInput = {
    id?: number
    name: string
    coordsX: number
    coordsY: number
    raceType?: string | null
    ports?: PortUncheckedCreateNestedManyWithoutSystemInput
  }

  export type SystemCreateOrConnectWithoutPlayersHereInput = {
    where: SystemWhereUniqueInput
    create: XOR<SystemCreateWithoutPlayersHereInput, SystemUncheckedCreateWithoutPlayersHereInput>
  }

  export type UserUpsertWithoutPlayersInput = {
    update: XOR<UserUpdateWithoutPlayersInput, UserUncheckedUpdateWithoutPlayersInput>
    create: XOR<UserCreateWithoutPlayersInput, UserUncheckedCreateWithoutPlayersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPlayersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPlayersInput, UserUncheckedUpdateWithoutPlayersInput>
  }

  export type UserUpdateWithoutPlayersInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    admin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserUncheckedUpdateWithoutPlayersInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    admin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ShipUpsertWithoutPlayersInput = {
    update: XOR<ShipUpdateWithoutPlayersInput, ShipUncheckedUpdateWithoutPlayersInput>
    create: XOR<ShipCreateWithoutPlayersInput, ShipUncheckedCreateWithoutPlayersInput>
    where?: ShipWhereInput
  }

  export type ShipUpdateToOneWithWhereWithoutPlayersInput = {
    where?: ShipWhereInput
    data: XOR<ShipUpdateWithoutPlayersInput, ShipUncheckedUpdateWithoutPlayersInput>
  }

  export type ShipUpdateWithoutPlayersInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    cargoSpace?: IntFieldUpdateOperationsInput | number
    shields?: IntFieldUpdateOperationsInput | number
    armor?: IntFieldUpdateOperationsInput | number
    accel?: FloatFieldUpdateOperationsInput | number
    cost?: IntFieldUpdateOperationsInput | number
    weaponsSlots?: IntFieldUpdateOperationsInput | number
    shieldsSlots?: IntFieldUpdateOperationsInput | number
    recharge?: IntFieldUpdateOperationsInput | number
    race?: RaceUpdateOneRequiredWithoutShipsNestedInput
    rank?: RankUpdateOneRequiredWithoutShipsNestedInput
  }

  export type ShipUncheckedUpdateWithoutPlayersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    raceId?: IntFieldUpdateOperationsInput | number
    rankId?: IntFieldUpdateOperationsInput | number
    cargoSpace?: IntFieldUpdateOperationsInput | number
    shields?: IntFieldUpdateOperationsInput | number
    armor?: IntFieldUpdateOperationsInput | number
    accel?: FloatFieldUpdateOperationsInput | number
    cost?: IntFieldUpdateOperationsInput | number
    weaponsSlots?: IntFieldUpdateOperationsInput | number
    shieldsSlots?: IntFieldUpdateOperationsInput | number
    recharge?: IntFieldUpdateOperationsInput | number
  }

  export type SystemUpsertWithoutPlayersHereInput = {
    update: XOR<SystemUpdateWithoutPlayersHereInput, SystemUncheckedUpdateWithoutPlayersHereInput>
    create: XOR<SystemCreateWithoutPlayersHereInput, SystemUncheckedCreateWithoutPlayersHereInput>
    where?: SystemWhereInput
  }

  export type SystemUpdateToOneWithWhereWithoutPlayersHereInput = {
    where?: SystemWhereInput
    data: XOR<SystemUpdateWithoutPlayersHereInput, SystemUncheckedUpdateWithoutPlayersHereInput>
  }

  export type SystemUpdateWithoutPlayersHereInput = {
    name?: StringFieldUpdateOperationsInput | string
    coordsX?: IntFieldUpdateOperationsInput | number
    coordsY?: IntFieldUpdateOperationsInput | number
    raceType?: NullableStringFieldUpdateOperationsInput | string | null
    ports?: PortUpdateManyWithoutSystemNestedInput
  }

  export type SystemUncheckedUpdateWithoutPlayersHereInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    coordsX?: IntFieldUpdateOperationsInput | number
    coordsY?: IntFieldUpdateOperationsInput | number
    raceType?: NullableStringFieldUpdateOperationsInput | string | null
    ports?: PortUncheckedUpdateManyWithoutSystemNestedInput
  }

  export type ShipCreateWithoutRaceInput = {
    name?: string | null
    cargoSpace?: number
    shields?: number
    armor?: number
    accel?: number
    cost?: number
    weaponsSlots?: number
    shieldsSlots?: number
    recharge?: number
    rank?: RankCreateNestedOneWithoutShipsInput
    players?: PlayerCreateNestedManyWithoutShipInput
  }

  export type ShipUncheckedCreateWithoutRaceInput = {
    id?: number
    name?: string | null
    rankId?: number
    cargoSpace?: number
    shields?: number
    armor?: number
    accel?: number
    cost?: number
    weaponsSlots?: number
    shieldsSlots?: number
    recharge?: number
    players?: PlayerUncheckedCreateNestedManyWithoutShipInput
  }

  export type ShipCreateOrConnectWithoutRaceInput = {
    where: ShipWhereUniqueInput
    create: XOR<ShipCreateWithoutRaceInput, ShipUncheckedCreateWithoutRaceInput>
  }

  export type ShipCreateManyRaceInputEnvelope = {
    data: ShipCreateManyRaceInput | ShipCreateManyRaceInput[]
    skipDuplicates?: boolean
  }

  export type WeaponCreateWithoutRaceInput = {
    name: string
    racks?: number
    stations?: number
    accuracy?: number
    volley?: number
    generalDamage?: number
    shieldDamage?: number
    armorDamage?: number
    good?: GoodCreateNestedOneWithoutWeaponsInput
    ammunition?: GoodCreateNestedOneWithoutAmmunitionsInput
  }

  export type WeaponUncheckedCreateWithoutRaceInput = {
    id?: number
    name: string
    goodId?: number
    racks?: number
    stations?: number
    accuracy?: number
    volley?: number
    ammunitionId?: number | null
    generalDamage?: number
    shieldDamage?: number
    armorDamage?: number
  }

  export type WeaponCreateOrConnectWithoutRaceInput = {
    where: WeaponWhereUniqueInput
    create: XOR<WeaponCreateWithoutRaceInput, WeaponUncheckedCreateWithoutRaceInput>
  }

  export type WeaponCreateManyRaceInputEnvelope = {
    data: WeaponCreateManyRaceInput | WeaponCreateManyRaceInput[]
    skipDuplicates?: boolean
  }

  export type GoodCreateWithoutRaceInput = {
    name: string
    level?: number
    tech?: number
    type?: number
    weapons?: WeaponCreateNestedManyWithoutGoodInput
    ammunitions?: WeaponCreateNestedManyWithoutAmmunitionInput
  }

  export type GoodUncheckedCreateWithoutRaceInput = {
    id?: number
    name: string
    level?: number
    tech?: number
    type?: number
    weapons?: WeaponUncheckedCreateNestedManyWithoutGoodInput
    ammunitions?: WeaponUncheckedCreateNestedManyWithoutAmmunitionInput
  }

  export type GoodCreateOrConnectWithoutRaceInput = {
    where: GoodWhereUniqueInput
    create: XOR<GoodCreateWithoutRaceInput, GoodUncheckedCreateWithoutRaceInput>
  }

  export type GoodCreateManyRaceInputEnvelope = {
    data: GoodCreateManyRaceInput | GoodCreateManyRaceInput[]
    skipDuplicates?: boolean
  }

  export type ShipUpsertWithWhereUniqueWithoutRaceInput = {
    where: ShipWhereUniqueInput
    update: XOR<ShipUpdateWithoutRaceInput, ShipUncheckedUpdateWithoutRaceInput>
    create: XOR<ShipCreateWithoutRaceInput, ShipUncheckedCreateWithoutRaceInput>
  }

  export type ShipUpdateWithWhereUniqueWithoutRaceInput = {
    where: ShipWhereUniqueInput
    data: XOR<ShipUpdateWithoutRaceInput, ShipUncheckedUpdateWithoutRaceInput>
  }

  export type ShipUpdateManyWithWhereWithoutRaceInput = {
    where: ShipScalarWhereInput
    data: XOR<ShipUpdateManyMutationInput, ShipUncheckedUpdateManyWithoutRaceInput>
  }

  export type ShipScalarWhereInput = {
    AND?: ShipScalarWhereInput | ShipScalarWhereInput[]
    OR?: ShipScalarWhereInput[]
    NOT?: ShipScalarWhereInput | ShipScalarWhereInput[]
    id?: IntFilter<"Ship"> | number
    name?: StringNullableFilter<"Ship"> | string | null
    raceId?: IntFilter<"Ship"> | number
    rankId?: IntFilter<"Ship"> | number
    cargoSpace?: IntFilter<"Ship"> | number
    shields?: IntFilter<"Ship"> | number
    armor?: IntFilter<"Ship"> | number
    accel?: FloatFilter<"Ship"> | number
    cost?: IntFilter<"Ship"> | number
    weaponsSlots?: IntFilter<"Ship"> | number
    shieldsSlots?: IntFilter<"Ship"> | number
    recharge?: IntFilter<"Ship"> | number
  }

  export type WeaponUpsertWithWhereUniqueWithoutRaceInput = {
    where: WeaponWhereUniqueInput
    update: XOR<WeaponUpdateWithoutRaceInput, WeaponUncheckedUpdateWithoutRaceInput>
    create: XOR<WeaponCreateWithoutRaceInput, WeaponUncheckedCreateWithoutRaceInput>
  }

  export type WeaponUpdateWithWhereUniqueWithoutRaceInput = {
    where: WeaponWhereUniqueInput
    data: XOR<WeaponUpdateWithoutRaceInput, WeaponUncheckedUpdateWithoutRaceInput>
  }

  export type WeaponUpdateManyWithWhereWithoutRaceInput = {
    where: WeaponScalarWhereInput
    data: XOR<WeaponUpdateManyMutationInput, WeaponUncheckedUpdateManyWithoutRaceInput>
  }

  export type WeaponScalarWhereInput = {
    AND?: WeaponScalarWhereInput | WeaponScalarWhereInput[]
    OR?: WeaponScalarWhereInput[]
    NOT?: WeaponScalarWhereInput | WeaponScalarWhereInput[]
    id?: IntFilter<"Weapon"> | number
    name?: StringFilter<"Weapon"> | string
    goodId?: IntFilter<"Weapon"> | number
    raceId?: IntNullableFilter<"Weapon"> | number | null
    racks?: IntFilter<"Weapon"> | number
    stations?: IntFilter<"Weapon"> | number
    accuracy?: FloatFilter<"Weapon"> | number
    volley?: IntFilter<"Weapon"> | number
    ammunitionId?: IntNullableFilter<"Weapon"> | number | null
    generalDamage?: IntFilter<"Weapon"> | number
    shieldDamage?: IntFilter<"Weapon"> | number
    armorDamage?: IntFilter<"Weapon"> | number
  }

  export type GoodUpsertWithWhereUniqueWithoutRaceInput = {
    where: GoodWhereUniqueInput
    update: XOR<GoodUpdateWithoutRaceInput, GoodUncheckedUpdateWithoutRaceInput>
    create: XOR<GoodCreateWithoutRaceInput, GoodUncheckedCreateWithoutRaceInput>
  }

  export type GoodUpdateWithWhereUniqueWithoutRaceInput = {
    where: GoodWhereUniqueInput
    data: XOR<GoodUpdateWithoutRaceInput, GoodUncheckedUpdateWithoutRaceInput>
  }

  export type GoodUpdateManyWithWhereWithoutRaceInput = {
    where: GoodScalarWhereInput
    data: XOR<GoodUpdateManyMutationInput, GoodUncheckedUpdateManyWithoutRaceInput>
  }

  export type GoodScalarWhereInput = {
    AND?: GoodScalarWhereInput | GoodScalarWhereInput[]
    OR?: GoodScalarWhereInput[]
    NOT?: GoodScalarWhereInput | GoodScalarWhereInput[]
    id?: IntFilter<"Good"> | number
    name?: StringFilter<"Good"> | string
    level?: IntFilter<"Good"> | number
    raceId?: IntNullableFilter<"Good"> | number | null
    tech?: IntFilter<"Good"> | number
    type?: IntFilter<"Good"> | number
  }

  export type ShipCreateWithoutRankInput = {
    name?: string | null
    cargoSpace?: number
    shields?: number
    armor?: number
    accel?: number
    cost?: number
    weaponsSlots?: number
    shieldsSlots?: number
    recharge?: number
    race: RaceCreateNestedOneWithoutShipsInput
    players?: PlayerCreateNestedManyWithoutShipInput
  }

  export type ShipUncheckedCreateWithoutRankInput = {
    id?: number
    name?: string | null
    raceId: number
    cargoSpace?: number
    shields?: number
    armor?: number
    accel?: number
    cost?: number
    weaponsSlots?: number
    shieldsSlots?: number
    recharge?: number
    players?: PlayerUncheckedCreateNestedManyWithoutShipInput
  }

  export type ShipCreateOrConnectWithoutRankInput = {
    where: ShipWhereUniqueInput
    create: XOR<ShipCreateWithoutRankInput, ShipUncheckedCreateWithoutRankInput>
  }

  export type ShipCreateManyRankInputEnvelope = {
    data: ShipCreateManyRankInput | ShipCreateManyRankInput[]
    skipDuplicates?: boolean
  }

  export type ShipUpsertWithWhereUniqueWithoutRankInput = {
    where: ShipWhereUniqueInput
    update: XOR<ShipUpdateWithoutRankInput, ShipUncheckedUpdateWithoutRankInput>
    create: XOR<ShipCreateWithoutRankInput, ShipUncheckedCreateWithoutRankInput>
  }

  export type ShipUpdateWithWhereUniqueWithoutRankInput = {
    where: ShipWhereUniqueInput
    data: XOR<ShipUpdateWithoutRankInput, ShipUncheckedUpdateWithoutRankInput>
  }

  export type ShipUpdateManyWithWhereWithoutRankInput = {
    where: ShipScalarWhereInput
    data: XOR<ShipUpdateManyMutationInput, ShipUncheckedUpdateManyWithoutRankInput>
  }

  export type PortCreateWithoutSystemInput = {
    goodsAvailable?: NullableJsonNullValueInput | InputJsonValue
    upgradeLevel?: number
  }

  export type PortUncheckedCreateWithoutSystemInput = {
    id?: number
    goodsAvailable?: NullableJsonNullValueInput | InputJsonValue
    upgradeLevel?: number
  }

  export type PortCreateOrConnectWithoutSystemInput = {
    where: PortWhereUniqueInput
    create: XOR<PortCreateWithoutSystemInput, PortUncheckedCreateWithoutSystemInput>
  }

  export type PortCreateManySystemInputEnvelope = {
    data: PortCreateManySystemInput | PortCreateManySystemInput[]
    skipDuplicates?: boolean
  }

  export type PlayerCreateWithoutCurrentSystemInput = {
    race: string
    credits?: number
    user: UserCreateNestedOneWithoutPlayersInput
    ship?: ShipCreateNestedOneWithoutPlayersInput
  }

  export type PlayerUncheckedCreateWithoutCurrentSystemInput = {
    id?: number
    userId: number
    race: string
    credits?: number
    shipId?: number | null
  }

  export type PlayerCreateOrConnectWithoutCurrentSystemInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutCurrentSystemInput, PlayerUncheckedCreateWithoutCurrentSystemInput>
  }

  export type PlayerCreateManyCurrentSystemInputEnvelope = {
    data: PlayerCreateManyCurrentSystemInput | PlayerCreateManyCurrentSystemInput[]
    skipDuplicates?: boolean
  }

  export type PortUpsertWithWhereUniqueWithoutSystemInput = {
    where: PortWhereUniqueInput
    update: XOR<PortUpdateWithoutSystemInput, PortUncheckedUpdateWithoutSystemInput>
    create: XOR<PortCreateWithoutSystemInput, PortUncheckedCreateWithoutSystemInput>
  }

  export type PortUpdateWithWhereUniqueWithoutSystemInput = {
    where: PortWhereUniqueInput
    data: XOR<PortUpdateWithoutSystemInput, PortUncheckedUpdateWithoutSystemInput>
  }

  export type PortUpdateManyWithWhereWithoutSystemInput = {
    where: PortScalarWhereInput
    data: XOR<PortUpdateManyMutationInput, PortUncheckedUpdateManyWithoutSystemInput>
  }

  export type PortScalarWhereInput = {
    AND?: PortScalarWhereInput | PortScalarWhereInput[]
    OR?: PortScalarWhereInput[]
    NOT?: PortScalarWhereInput | PortScalarWhereInput[]
    id?: IntFilter<"Port"> | number
    systemId?: IntFilter<"Port"> | number
    goodsAvailable?: JsonNullableFilter<"Port">
    upgradeLevel?: IntFilter<"Port"> | number
  }

  export type PlayerUpsertWithWhereUniqueWithoutCurrentSystemInput = {
    where: PlayerWhereUniqueInput
    update: XOR<PlayerUpdateWithoutCurrentSystemInput, PlayerUncheckedUpdateWithoutCurrentSystemInput>
    create: XOR<PlayerCreateWithoutCurrentSystemInput, PlayerUncheckedCreateWithoutCurrentSystemInput>
  }

  export type PlayerUpdateWithWhereUniqueWithoutCurrentSystemInput = {
    where: PlayerWhereUniqueInput
    data: XOR<PlayerUpdateWithoutCurrentSystemInput, PlayerUncheckedUpdateWithoutCurrentSystemInput>
  }

  export type PlayerUpdateManyWithWhereWithoutCurrentSystemInput = {
    where: PlayerScalarWhereInput
    data: XOR<PlayerUpdateManyMutationInput, PlayerUncheckedUpdateManyWithoutCurrentSystemInput>
  }

  export type SystemCreateWithoutPortsInput = {
    name: string
    coordsX: number
    coordsY: number
    raceType?: string | null
    playersHere?: PlayerCreateNestedManyWithoutCurrentSystemInput
  }

  export type SystemUncheckedCreateWithoutPortsInput = {
    id?: number
    name: string
    coordsX: number
    coordsY: number
    raceType?: string | null
    playersHere?: PlayerUncheckedCreateNestedManyWithoutCurrentSystemInput
  }

  export type SystemCreateOrConnectWithoutPortsInput = {
    where: SystemWhereUniqueInput
    create: XOR<SystemCreateWithoutPortsInput, SystemUncheckedCreateWithoutPortsInput>
  }

  export type SystemUpsertWithoutPortsInput = {
    update: XOR<SystemUpdateWithoutPortsInput, SystemUncheckedUpdateWithoutPortsInput>
    create: XOR<SystemCreateWithoutPortsInput, SystemUncheckedCreateWithoutPortsInput>
    where?: SystemWhereInput
  }

  export type SystemUpdateToOneWithWhereWithoutPortsInput = {
    where?: SystemWhereInput
    data: XOR<SystemUpdateWithoutPortsInput, SystemUncheckedUpdateWithoutPortsInput>
  }

  export type SystemUpdateWithoutPortsInput = {
    name?: StringFieldUpdateOperationsInput | string
    coordsX?: IntFieldUpdateOperationsInput | number
    coordsY?: IntFieldUpdateOperationsInput | number
    raceType?: NullableStringFieldUpdateOperationsInput | string | null
    playersHere?: PlayerUpdateManyWithoutCurrentSystemNestedInput
  }

  export type SystemUncheckedUpdateWithoutPortsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    coordsX?: IntFieldUpdateOperationsInput | number
    coordsY?: IntFieldUpdateOperationsInput | number
    raceType?: NullableStringFieldUpdateOperationsInput | string | null
    playersHere?: PlayerUncheckedUpdateManyWithoutCurrentSystemNestedInput
  }

  export type RaceCreateWithoutGoodsInput = {
    name: string
    ships?: ShipCreateNestedManyWithoutRaceInput
    weapons?: WeaponCreateNestedManyWithoutRaceInput
  }

  export type RaceUncheckedCreateWithoutGoodsInput = {
    id?: number
    name: string
    ships?: ShipUncheckedCreateNestedManyWithoutRaceInput
    weapons?: WeaponUncheckedCreateNestedManyWithoutRaceInput
  }

  export type RaceCreateOrConnectWithoutGoodsInput = {
    where: RaceWhereUniqueInput
    create: XOR<RaceCreateWithoutGoodsInput, RaceUncheckedCreateWithoutGoodsInput>
  }

  export type WeaponCreateWithoutGoodInput = {
    name: string
    racks?: number
    stations?: number
    accuracy?: number
    volley?: number
    generalDamage?: number
    shieldDamage?: number
    armorDamage?: number
    race?: RaceCreateNestedOneWithoutWeaponsInput
    ammunition?: GoodCreateNestedOneWithoutAmmunitionsInput
  }

  export type WeaponUncheckedCreateWithoutGoodInput = {
    id?: number
    name: string
    raceId?: number | null
    racks?: number
    stations?: number
    accuracy?: number
    volley?: number
    ammunitionId?: number | null
    generalDamage?: number
    shieldDamage?: number
    armorDamage?: number
  }

  export type WeaponCreateOrConnectWithoutGoodInput = {
    where: WeaponWhereUniqueInput
    create: XOR<WeaponCreateWithoutGoodInput, WeaponUncheckedCreateWithoutGoodInput>
  }

  export type WeaponCreateManyGoodInputEnvelope = {
    data: WeaponCreateManyGoodInput | WeaponCreateManyGoodInput[]
    skipDuplicates?: boolean
  }

  export type WeaponCreateWithoutAmmunitionInput = {
    name: string
    racks?: number
    stations?: number
    accuracy?: number
    volley?: number
    generalDamage?: number
    shieldDamage?: number
    armorDamage?: number
    good?: GoodCreateNestedOneWithoutWeaponsInput
    race?: RaceCreateNestedOneWithoutWeaponsInput
  }

  export type WeaponUncheckedCreateWithoutAmmunitionInput = {
    id?: number
    name: string
    goodId?: number
    raceId?: number | null
    racks?: number
    stations?: number
    accuracy?: number
    volley?: number
    generalDamage?: number
    shieldDamage?: number
    armorDamage?: number
  }

  export type WeaponCreateOrConnectWithoutAmmunitionInput = {
    where: WeaponWhereUniqueInput
    create: XOR<WeaponCreateWithoutAmmunitionInput, WeaponUncheckedCreateWithoutAmmunitionInput>
  }

  export type WeaponCreateManyAmmunitionInputEnvelope = {
    data: WeaponCreateManyAmmunitionInput | WeaponCreateManyAmmunitionInput[]
    skipDuplicates?: boolean
  }

  export type RaceUpsertWithoutGoodsInput = {
    update: XOR<RaceUpdateWithoutGoodsInput, RaceUncheckedUpdateWithoutGoodsInput>
    create: XOR<RaceCreateWithoutGoodsInput, RaceUncheckedCreateWithoutGoodsInput>
    where?: RaceWhereInput
  }

  export type RaceUpdateToOneWithWhereWithoutGoodsInput = {
    where?: RaceWhereInput
    data: XOR<RaceUpdateWithoutGoodsInput, RaceUncheckedUpdateWithoutGoodsInput>
  }

  export type RaceUpdateWithoutGoodsInput = {
    name?: StringFieldUpdateOperationsInput | string
    ships?: ShipUpdateManyWithoutRaceNestedInput
    weapons?: WeaponUpdateManyWithoutRaceNestedInput
  }

  export type RaceUncheckedUpdateWithoutGoodsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    ships?: ShipUncheckedUpdateManyWithoutRaceNestedInput
    weapons?: WeaponUncheckedUpdateManyWithoutRaceNestedInput
  }

  export type WeaponUpsertWithWhereUniqueWithoutGoodInput = {
    where: WeaponWhereUniqueInput
    update: XOR<WeaponUpdateWithoutGoodInput, WeaponUncheckedUpdateWithoutGoodInput>
    create: XOR<WeaponCreateWithoutGoodInput, WeaponUncheckedCreateWithoutGoodInput>
  }

  export type WeaponUpdateWithWhereUniqueWithoutGoodInput = {
    where: WeaponWhereUniqueInput
    data: XOR<WeaponUpdateWithoutGoodInput, WeaponUncheckedUpdateWithoutGoodInput>
  }

  export type WeaponUpdateManyWithWhereWithoutGoodInput = {
    where: WeaponScalarWhereInput
    data: XOR<WeaponUpdateManyMutationInput, WeaponUncheckedUpdateManyWithoutGoodInput>
  }

  export type WeaponUpsertWithWhereUniqueWithoutAmmunitionInput = {
    where: WeaponWhereUniqueInput
    update: XOR<WeaponUpdateWithoutAmmunitionInput, WeaponUncheckedUpdateWithoutAmmunitionInput>
    create: XOR<WeaponCreateWithoutAmmunitionInput, WeaponUncheckedCreateWithoutAmmunitionInput>
  }

  export type WeaponUpdateWithWhereUniqueWithoutAmmunitionInput = {
    where: WeaponWhereUniqueInput
    data: XOR<WeaponUpdateWithoutAmmunitionInput, WeaponUncheckedUpdateWithoutAmmunitionInput>
  }

  export type WeaponUpdateManyWithWhereWithoutAmmunitionInput = {
    where: WeaponScalarWhereInput
    data: XOR<WeaponUpdateManyMutationInput, WeaponUncheckedUpdateManyWithoutAmmunitionInput>
  }

  export type RaceCreateWithoutShipsInput = {
    name: string
    weapons?: WeaponCreateNestedManyWithoutRaceInput
    goods?: GoodCreateNestedManyWithoutRaceInput
  }

  export type RaceUncheckedCreateWithoutShipsInput = {
    id?: number
    name: string
    weapons?: WeaponUncheckedCreateNestedManyWithoutRaceInput
    goods?: GoodUncheckedCreateNestedManyWithoutRaceInput
  }

  export type RaceCreateOrConnectWithoutShipsInput = {
    where: RaceWhereUniqueInput
    create: XOR<RaceCreateWithoutShipsInput, RaceUncheckedCreateWithoutShipsInput>
  }

  export type RankCreateWithoutShipsInput = {
    name: string
  }

  export type RankUncheckedCreateWithoutShipsInput = {
    id?: number
    name: string
  }

  export type RankCreateOrConnectWithoutShipsInput = {
    where: RankWhereUniqueInput
    create: XOR<RankCreateWithoutShipsInput, RankUncheckedCreateWithoutShipsInput>
  }

  export type PlayerCreateWithoutShipInput = {
    race: string
    credits?: number
    user: UserCreateNestedOneWithoutPlayersInput
    currentSystem?: SystemCreateNestedOneWithoutPlayersHereInput
  }

  export type PlayerUncheckedCreateWithoutShipInput = {
    id?: number
    userId: number
    race: string
    credits?: number
    currentSystemId?: number | null
  }

  export type PlayerCreateOrConnectWithoutShipInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutShipInput, PlayerUncheckedCreateWithoutShipInput>
  }

  export type PlayerCreateManyShipInputEnvelope = {
    data: PlayerCreateManyShipInput | PlayerCreateManyShipInput[]
    skipDuplicates?: boolean
  }

  export type RaceUpsertWithoutShipsInput = {
    update: XOR<RaceUpdateWithoutShipsInput, RaceUncheckedUpdateWithoutShipsInput>
    create: XOR<RaceCreateWithoutShipsInput, RaceUncheckedCreateWithoutShipsInput>
    where?: RaceWhereInput
  }

  export type RaceUpdateToOneWithWhereWithoutShipsInput = {
    where?: RaceWhereInput
    data: XOR<RaceUpdateWithoutShipsInput, RaceUncheckedUpdateWithoutShipsInput>
  }

  export type RaceUpdateWithoutShipsInput = {
    name?: StringFieldUpdateOperationsInput | string
    weapons?: WeaponUpdateManyWithoutRaceNestedInput
    goods?: GoodUpdateManyWithoutRaceNestedInput
  }

  export type RaceUncheckedUpdateWithoutShipsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    weapons?: WeaponUncheckedUpdateManyWithoutRaceNestedInput
    goods?: GoodUncheckedUpdateManyWithoutRaceNestedInput
  }

  export type RankUpsertWithoutShipsInput = {
    update: XOR<RankUpdateWithoutShipsInput, RankUncheckedUpdateWithoutShipsInput>
    create: XOR<RankCreateWithoutShipsInput, RankUncheckedCreateWithoutShipsInput>
    where?: RankWhereInput
  }

  export type RankUpdateToOneWithWhereWithoutShipsInput = {
    where?: RankWhereInput
    data: XOR<RankUpdateWithoutShipsInput, RankUncheckedUpdateWithoutShipsInput>
  }

  export type RankUpdateWithoutShipsInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type RankUncheckedUpdateWithoutShipsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type PlayerUpsertWithWhereUniqueWithoutShipInput = {
    where: PlayerWhereUniqueInput
    update: XOR<PlayerUpdateWithoutShipInput, PlayerUncheckedUpdateWithoutShipInput>
    create: XOR<PlayerCreateWithoutShipInput, PlayerUncheckedCreateWithoutShipInput>
  }

  export type PlayerUpdateWithWhereUniqueWithoutShipInput = {
    where: PlayerWhereUniqueInput
    data: XOR<PlayerUpdateWithoutShipInput, PlayerUncheckedUpdateWithoutShipInput>
  }

  export type PlayerUpdateManyWithWhereWithoutShipInput = {
    where: PlayerScalarWhereInput
    data: XOR<PlayerUpdateManyMutationInput, PlayerUncheckedUpdateManyWithoutShipInput>
  }

  export type GoodCreateWithoutWeaponsInput = {
    name: string
    level?: number
    tech?: number
    type?: number
    race?: RaceCreateNestedOneWithoutGoodsInput
    ammunitions?: WeaponCreateNestedManyWithoutAmmunitionInput
  }

  export type GoodUncheckedCreateWithoutWeaponsInput = {
    id?: number
    name: string
    level?: number
    raceId?: number | null
    tech?: number
    type?: number
    ammunitions?: WeaponUncheckedCreateNestedManyWithoutAmmunitionInput
  }

  export type GoodCreateOrConnectWithoutWeaponsInput = {
    where: GoodWhereUniqueInput
    create: XOR<GoodCreateWithoutWeaponsInput, GoodUncheckedCreateWithoutWeaponsInput>
  }

  export type RaceCreateWithoutWeaponsInput = {
    name: string
    ships?: ShipCreateNestedManyWithoutRaceInput
    goods?: GoodCreateNestedManyWithoutRaceInput
  }

  export type RaceUncheckedCreateWithoutWeaponsInput = {
    id?: number
    name: string
    ships?: ShipUncheckedCreateNestedManyWithoutRaceInput
    goods?: GoodUncheckedCreateNestedManyWithoutRaceInput
  }

  export type RaceCreateOrConnectWithoutWeaponsInput = {
    where: RaceWhereUniqueInput
    create: XOR<RaceCreateWithoutWeaponsInput, RaceUncheckedCreateWithoutWeaponsInput>
  }

  export type GoodCreateWithoutAmmunitionsInput = {
    name: string
    level?: number
    tech?: number
    type?: number
    race?: RaceCreateNestedOneWithoutGoodsInput
    weapons?: WeaponCreateNestedManyWithoutGoodInput
  }

  export type GoodUncheckedCreateWithoutAmmunitionsInput = {
    id?: number
    name: string
    level?: number
    raceId?: number | null
    tech?: number
    type?: number
    weapons?: WeaponUncheckedCreateNestedManyWithoutGoodInput
  }

  export type GoodCreateOrConnectWithoutAmmunitionsInput = {
    where: GoodWhereUniqueInput
    create: XOR<GoodCreateWithoutAmmunitionsInput, GoodUncheckedCreateWithoutAmmunitionsInput>
  }

  export type GoodUpsertWithoutWeaponsInput = {
    update: XOR<GoodUpdateWithoutWeaponsInput, GoodUncheckedUpdateWithoutWeaponsInput>
    create: XOR<GoodCreateWithoutWeaponsInput, GoodUncheckedCreateWithoutWeaponsInput>
    where?: GoodWhereInput
  }

  export type GoodUpdateToOneWithWhereWithoutWeaponsInput = {
    where?: GoodWhereInput
    data: XOR<GoodUpdateWithoutWeaponsInput, GoodUncheckedUpdateWithoutWeaponsInput>
  }

  export type GoodUpdateWithoutWeaponsInput = {
    name?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    tech?: IntFieldUpdateOperationsInput | number
    type?: IntFieldUpdateOperationsInput | number
    race?: RaceUpdateOneWithoutGoodsNestedInput
    ammunitions?: WeaponUpdateManyWithoutAmmunitionNestedInput
  }

  export type GoodUncheckedUpdateWithoutWeaponsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    raceId?: NullableIntFieldUpdateOperationsInput | number | null
    tech?: IntFieldUpdateOperationsInput | number
    type?: IntFieldUpdateOperationsInput | number
    ammunitions?: WeaponUncheckedUpdateManyWithoutAmmunitionNestedInput
  }

  export type RaceUpsertWithoutWeaponsInput = {
    update: XOR<RaceUpdateWithoutWeaponsInput, RaceUncheckedUpdateWithoutWeaponsInput>
    create: XOR<RaceCreateWithoutWeaponsInput, RaceUncheckedCreateWithoutWeaponsInput>
    where?: RaceWhereInput
  }

  export type RaceUpdateToOneWithWhereWithoutWeaponsInput = {
    where?: RaceWhereInput
    data: XOR<RaceUpdateWithoutWeaponsInput, RaceUncheckedUpdateWithoutWeaponsInput>
  }

  export type RaceUpdateWithoutWeaponsInput = {
    name?: StringFieldUpdateOperationsInput | string
    ships?: ShipUpdateManyWithoutRaceNestedInput
    goods?: GoodUpdateManyWithoutRaceNestedInput
  }

  export type RaceUncheckedUpdateWithoutWeaponsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    ships?: ShipUncheckedUpdateManyWithoutRaceNestedInput
    goods?: GoodUncheckedUpdateManyWithoutRaceNestedInput
  }

  export type GoodUpsertWithoutAmmunitionsInput = {
    update: XOR<GoodUpdateWithoutAmmunitionsInput, GoodUncheckedUpdateWithoutAmmunitionsInput>
    create: XOR<GoodCreateWithoutAmmunitionsInput, GoodUncheckedCreateWithoutAmmunitionsInput>
    where?: GoodWhereInput
  }

  export type GoodUpdateToOneWithWhereWithoutAmmunitionsInput = {
    where?: GoodWhereInput
    data: XOR<GoodUpdateWithoutAmmunitionsInput, GoodUncheckedUpdateWithoutAmmunitionsInput>
  }

  export type GoodUpdateWithoutAmmunitionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    tech?: IntFieldUpdateOperationsInput | number
    type?: IntFieldUpdateOperationsInput | number
    race?: RaceUpdateOneWithoutGoodsNestedInput
    weapons?: WeaponUpdateManyWithoutGoodNestedInput
  }

  export type GoodUncheckedUpdateWithoutAmmunitionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    raceId?: NullableIntFieldUpdateOperationsInput | number | null
    tech?: IntFieldUpdateOperationsInput | number
    type?: IntFieldUpdateOperationsInput | number
    weapons?: WeaponUncheckedUpdateManyWithoutGoodNestedInput
  }

  export type PlayerCreateManyUserInput = {
    id?: number
    race: string
    credits?: number
    shipId?: number | null
    currentSystemId?: number | null
  }

  export type PlayerUpdateWithoutUserInput = {
    race?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    ship?: ShipUpdateOneWithoutPlayersNestedInput
    currentSystem?: SystemUpdateOneWithoutPlayersHereNestedInput
  }

  export type PlayerUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    race?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    shipId?: NullableIntFieldUpdateOperationsInput | number | null
    currentSystemId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PlayerUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    race?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    shipId?: NullableIntFieldUpdateOperationsInput | number | null
    currentSystemId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ShipCreateManyRaceInput = {
    id?: number
    name?: string | null
    rankId?: number
    cargoSpace?: number
    shields?: number
    armor?: number
    accel?: number
    cost?: number
    weaponsSlots?: number
    shieldsSlots?: number
    recharge?: number
  }

  export type WeaponCreateManyRaceInput = {
    id?: number
    name: string
    goodId?: number
    racks?: number
    stations?: number
    accuracy?: number
    volley?: number
    ammunitionId?: number | null
    generalDamage?: number
    shieldDamage?: number
    armorDamage?: number
  }

  export type GoodCreateManyRaceInput = {
    id?: number
    name: string
    level?: number
    tech?: number
    type?: number
  }

  export type ShipUpdateWithoutRaceInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    cargoSpace?: IntFieldUpdateOperationsInput | number
    shields?: IntFieldUpdateOperationsInput | number
    armor?: IntFieldUpdateOperationsInput | number
    accel?: FloatFieldUpdateOperationsInput | number
    cost?: IntFieldUpdateOperationsInput | number
    weaponsSlots?: IntFieldUpdateOperationsInput | number
    shieldsSlots?: IntFieldUpdateOperationsInput | number
    recharge?: IntFieldUpdateOperationsInput | number
    rank?: RankUpdateOneRequiredWithoutShipsNestedInput
    players?: PlayerUpdateManyWithoutShipNestedInput
  }

  export type ShipUncheckedUpdateWithoutRaceInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    rankId?: IntFieldUpdateOperationsInput | number
    cargoSpace?: IntFieldUpdateOperationsInput | number
    shields?: IntFieldUpdateOperationsInput | number
    armor?: IntFieldUpdateOperationsInput | number
    accel?: FloatFieldUpdateOperationsInput | number
    cost?: IntFieldUpdateOperationsInput | number
    weaponsSlots?: IntFieldUpdateOperationsInput | number
    shieldsSlots?: IntFieldUpdateOperationsInput | number
    recharge?: IntFieldUpdateOperationsInput | number
    players?: PlayerUncheckedUpdateManyWithoutShipNestedInput
  }

  export type ShipUncheckedUpdateManyWithoutRaceInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    rankId?: IntFieldUpdateOperationsInput | number
    cargoSpace?: IntFieldUpdateOperationsInput | number
    shields?: IntFieldUpdateOperationsInput | number
    armor?: IntFieldUpdateOperationsInput | number
    accel?: FloatFieldUpdateOperationsInput | number
    cost?: IntFieldUpdateOperationsInput | number
    weaponsSlots?: IntFieldUpdateOperationsInput | number
    shieldsSlots?: IntFieldUpdateOperationsInput | number
    recharge?: IntFieldUpdateOperationsInput | number
  }

  export type WeaponUpdateWithoutRaceInput = {
    name?: StringFieldUpdateOperationsInput | string
    racks?: IntFieldUpdateOperationsInput | number
    stations?: IntFieldUpdateOperationsInput | number
    accuracy?: FloatFieldUpdateOperationsInput | number
    volley?: IntFieldUpdateOperationsInput | number
    generalDamage?: IntFieldUpdateOperationsInput | number
    shieldDamage?: IntFieldUpdateOperationsInput | number
    armorDamage?: IntFieldUpdateOperationsInput | number
    good?: GoodUpdateOneRequiredWithoutWeaponsNestedInput
    ammunition?: GoodUpdateOneWithoutAmmunitionsNestedInput
  }

  export type WeaponUncheckedUpdateWithoutRaceInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    goodId?: IntFieldUpdateOperationsInput | number
    racks?: IntFieldUpdateOperationsInput | number
    stations?: IntFieldUpdateOperationsInput | number
    accuracy?: FloatFieldUpdateOperationsInput | number
    volley?: IntFieldUpdateOperationsInput | number
    ammunitionId?: NullableIntFieldUpdateOperationsInput | number | null
    generalDamage?: IntFieldUpdateOperationsInput | number
    shieldDamage?: IntFieldUpdateOperationsInput | number
    armorDamage?: IntFieldUpdateOperationsInput | number
  }

  export type WeaponUncheckedUpdateManyWithoutRaceInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    goodId?: IntFieldUpdateOperationsInput | number
    racks?: IntFieldUpdateOperationsInput | number
    stations?: IntFieldUpdateOperationsInput | number
    accuracy?: FloatFieldUpdateOperationsInput | number
    volley?: IntFieldUpdateOperationsInput | number
    ammunitionId?: NullableIntFieldUpdateOperationsInput | number | null
    generalDamage?: IntFieldUpdateOperationsInput | number
    shieldDamage?: IntFieldUpdateOperationsInput | number
    armorDamage?: IntFieldUpdateOperationsInput | number
  }

  export type GoodUpdateWithoutRaceInput = {
    name?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    tech?: IntFieldUpdateOperationsInput | number
    type?: IntFieldUpdateOperationsInput | number
    weapons?: WeaponUpdateManyWithoutGoodNestedInput
    ammunitions?: WeaponUpdateManyWithoutAmmunitionNestedInput
  }

  export type GoodUncheckedUpdateWithoutRaceInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    tech?: IntFieldUpdateOperationsInput | number
    type?: IntFieldUpdateOperationsInput | number
    weapons?: WeaponUncheckedUpdateManyWithoutGoodNestedInput
    ammunitions?: WeaponUncheckedUpdateManyWithoutAmmunitionNestedInput
  }

  export type GoodUncheckedUpdateManyWithoutRaceInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    tech?: IntFieldUpdateOperationsInput | number
    type?: IntFieldUpdateOperationsInput | number
  }

  export type ShipCreateManyRankInput = {
    id?: number
    name?: string | null
    raceId: number
    cargoSpace?: number
    shields?: number
    armor?: number
    accel?: number
    cost?: number
    weaponsSlots?: number
    shieldsSlots?: number
    recharge?: number
  }

  export type ShipUpdateWithoutRankInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    cargoSpace?: IntFieldUpdateOperationsInput | number
    shields?: IntFieldUpdateOperationsInput | number
    armor?: IntFieldUpdateOperationsInput | number
    accel?: FloatFieldUpdateOperationsInput | number
    cost?: IntFieldUpdateOperationsInput | number
    weaponsSlots?: IntFieldUpdateOperationsInput | number
    shieldsSlots?: IntFieldUpdateOperationsInput | number
    recharge?: IntFieldUpdateOperationsInput | number
    race?: RaceUpdateOneRequiredWithoutShipsNestedInput
    players?: PlayerUpdateManyWithoutShipNestedInput
  }

  export type ShipUncheckedUpdateWithoutRankInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    raceId?: IntFieldUpdateOperationsInput | number
    cargoSpace?: IntFieldUpdateOperationsInput | number
    shields?: IntFieldUpdateOperationsInput | number
    armor?: IntFieldUpdateOperationsInput | number
    accel?: FloatFieldUpdateOperationsInput | number
    cost?: IntFieldUpdateOperationsInput | number
    weaponsSlots?: IntFieldUpdateOperationsInput | number
    shieldsSlots?: IntFieldUpdateOperationsInput | number
    recharge?: IntFieldUpdateOperationsInput | number
    players?: PlayerUncheckedUpdateManyWithoutShipNestedInput
  }

  export type ShipUncheckedUpdateManyWithoutRankInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    raceId?: IntFieldUpdateOperationsInput | number
    cargoSpace?: IntFieldUpdateOperationsInput | number
    shields?: IntFieldUpdateOperationsInput | number
    armor?: IntFieldUpdateOperationsInput | number
    accel?: FloatFieldUpdateOperationsInput | number
    cost?: IntFieldUpdateOperationsInput | number
    weaponsSlots?: IntFieldUpdateOperationsInput | number
    shieldsSlots?: IntFieldUpdateOperationsInput | number
    recharge?: IntFieldUpdateOperationsInput | number
  }

  export type PortCreateManySystemInput = {
    id?: number
    goodsAvailable?: NullableJsonNullValueInput | InputJsonValue
    upgradeLevel?: number
  }

  export type PlayerCreateManyCurrentSystemInput = {
    id?: number
    userId: number
    race: string
    credits?: number
    shipId?: number | null
  }

  export type PortUpdateWithoutSystemInput = {
    goodsAvailable?: NullableJsonNullValueInput | InputJsonValue
    upgradeLevel?: IntFieldUpdateOperationsInput | number
  }

  export type PortUncheckedUpdateWithoutSystemInput = {
    id?: IntFieldUpdateOperationsInput | number
    goodsAvailable?: NullableJsonNullValueInput | InputJsonValue
    upgradeLevel?: IntFieldUpdateOperationsInput | number
  }

  export type PortUncheckedUpdateManyWithoutSystemInput = {
    id?: IntFieldUpdateOperationsInput | number
    goodsAvailable?: NullableJsonNullValueInput | InputJsonValue
    upgradeLevel?: IntFieldUpdateOperationsInput | number
  }

  export type PlayerUpdateWithoutCurrentSystemInput = {
    race?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutPlayersNestedInput
    ship?: ShipUpdateOneWithoutPlayersNestedInput
  }

  export type PlayerUncheckedUpdateWithoutCurrentSystemInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    race?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    shipId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PlayerUncheckedUpdateManyWithoutCurrentSystemInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    race?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    shipId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type WeaponCreateManyGoodInput = {
    id?: number
    name: string
    raceId?: number | null
    racks?: number
    stations?: number
    accuracy?: number
    volley?: number
    ammunitionId?: number | null
    generalDamage?: number
    shieldDamage?: number
    armorDamage?: number
  }

  export type WeaponCreateManyAmmunitionInput = {
    id?: number
    name: string
    goodId?: number
    raceId?: number | null
    racks?: number
    stations?: number
    accuracy?: number
    volley?: number
    generalDamage?: number
    shieldDamage?: number
    armorDamage?: number
  }

  export type WeaponUpdateWithoutGoodInput = {
    name?: StringFieldUpdateOperationsInput | string
    racks?: IntFieldUpdateOperationsInput | number
    stations?: IntFieldUpdateOperationsInput | number
    accuracy?: FloatFieldUpdateOperationsInput | number
    volley?: IntFieldUpdateOperationsInput | number
    generalDamage?: IntFieldUpdateOperationsInput | number
    shieldDamage?: IntFieldUpdateOperationsInput | number
    armorDamage?: IntFieldUpdateOperationsInput | number
    race?: RaceUpdateOneWithoutWeaponsNestedInput
    ammunition?: GoodUpdateOneWithoutAmmunitionsNestedInput
  }

  export type WeaponUncheckedUpdateWithoutGoodInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    raceId?: NullableIntFieldUpdateOperationsInput | number | null
    racks?: IntFieldUpdateOperationsInput | number
    stations?: IntFieldUpdateOperationsInput | number
    accuracy?: FloatFieldUpdateOperationsInput | number
    volley?: IntFieldUpdateOperationsInput | number
    ammunitionId?: NullableIntFieldUpdateOperationsInput | number | null
    generalDamage?: IntFieldUpdateOperationsInput | number
    shieldDamage?: IntFieldUpdateOperationsInput | number
    armorDamage?: IntFieldUpdateOperationsInput | number
  }

  export type WeaponUncheckedUpdateManyWithoutGoodInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    raceId?: NullableIntFieldUpdateOperationsInput | number | null
    racks?: IntFieldUpdateOperationsInput | number
    stations?: IntFieldUpdateOperationsInput | number
    accuracy?: FloatFieldUpdateOperationsInput | number
    volley?: IntFieldUpdateOperationsInput | number
    ammunitionId?: NullableIntFieldUpdateOperationsInput | number | null
    generalDamage?: IntFieldUpdateOperationsInput | number
    shieldDamage?: IntFieldUpdateOperationsInput | number
    armorDamage?: IntFieldUpdateOperationsInput | number
  }

  export type WeaponUpdateWithoutAmmunitionInput = {
    name?: StringFieldUpdateOperationsInput | string
    racks?: IntFieldUpdateOperationsInput | number
    stations?: IntFieldUpdateOperationsInput | number
    accuracy?: FloatFieldUpdateOperationsInput | number
    volley?: IntFieldUpdateOperationsInput | number
    generalDamage?: IntFieldUpdateOperationsInput | number
    shieldDamage?: IntFieldUpdateOperationsInput | number
    armorDamage?: IntFieldUpdateOperationsInput | number
    good?: GoodUpdateOneRequiredWithoutWeaponsNestedInput
    race?: RaceUpdateOneWithoutWeaponsNestedInput
  }

  export type WeaponUncheckedUpdateWithoutAmmunitionInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    goodId?: IntFieldUpdateOperationsInput | number
    raceId?: NullableIntFieldUpdateOperationsInput | number | null
    racks?: IntFieldUpdateOperationsInput | number
    stations?: IntFieldUpdateOperationsInput | number
    accuracy?: FloatFieldUpdateOperationsInput | number
    volley?: IntFieldUpdateOperationsInput | number
    generalDamage?: IntFieldUpdateOperationsInput | number
    shieldDamage?: IntFieldUpdateOperationsInput | number
    armorDamage?: IntFieldUpdateOperationsInput | number
  }

  export type WeaponUncheckedUpdateManyWithoutAmmunitionInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    goodId?: IntFieldUpdateOperationsInput | number
    raceId?: NullableIntFieldUpdateOperationsInput | number | null
    racks?: IntFieldUpdateOperationsInput | number
    stations?: IntFieldUpdateOperationsInput | number
    accuracy?: FloatFieldUpdateOperationsInput | number
    volley?: IntFieldUpdateOperationsInput | number
    generalDamage?: IntFieldUpdateOperationsInput | number
    shieldDamage?: IntFieldUpdateOperationsInput | number
    armorDamage?: IntFieldUpdateOperationsInput | number
  }

  export type PlayerCreateManyShipInput = {
    id?: number
    userId: number
    race: string
    credits?: number
    currentSystemId?: number | null
  }

  export type PlayerUpdateWithoutShipInput = {
    race?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutPlayersNestedInput
    currentSystem?: SystemUpdateOneWithoutPlayersHereNestedInput
  }

  export type PlayerUncheckedUpdateWithoutShipInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    race?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    currentSystemId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PlayerUncheckedUpdateManyWithoutShipInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    race?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    currentSystemId?: NullableIntFieldUpdateOperationsInput | number | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}